{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":""},{"location":"az-204/az-204/","title":"\ud83d\udcd8 AZ-204 Guide","text":""},{"location":"az-204/az-204/#1-azure-compute-solutions","title":"\ud83d\udd11 1. Azure Compute Solutions","text":""},{"location":"az-204/az-204/#app-service","title":"App Service","text":"<ul> <li>Purpose: Platform-as-a-Service (PaaS) offering for hosting web applications, REST APIs, and mobile backends</li> <li>Features:</li> <li>Automatic scaling</li> <li>Built-in load balancing</li> <li>Support for .NET, .NET Core, Java, Ruby, Node.js, PHP, Python</li> <li>Continuous deployment from GitHub, Azure DevOps, or any Git repo</li> <li>Use Cases: Web applications, API backends, mobile app backends</li> <li>Advantages: No infrastructure management, supports custom domains and SSL</li> </ul>"},{"location":"az-204/az-204/#functions","title":"Functions","text":"<ul> <li>Purpose: Serverless compute service for running event-triggered code</li> <li>Key Characteristics:</li> <li>Pay-per-execution pricing model</li> <li>Automatic scaling</li> <li>Supports multiple languages (C#, Java, JavaScript, Python, PowerShell)</li> <li>Trigger Types:</li> <li>HTTP (API endpoints)</li> <li>Timer (scheduled tasks)</li> <li>Blob Storage (file uploads)</li> <li>Queue Storage (message processing)</li> <li>Event Grid (event processing)</li> <li>Use Cases: Microservices, event processing, lightweight APIs</li> </ul>"},{"location":"az-204/az-204/#aci-azure-container-instances-aks-azure-kubernetes-service","title":"ACI (Azure Container Instances) &amp; AKS (Azure Kubernetes Service)","text":"<ul> <li>ACI:</li> <li>Simplest way to run containers in Azure</li> <li>No orchestration needed</li> <li>Fast startup (seconds)</li> <li> <p>Ideal for: One-off tasks, dev/test scenarios, simple applications</p> </li> <li> <p>AKS:</p> </li> <li>Managed Kubernetes service</li> <li>Full container orchestration</li> <li>Features: Auto-scaling, self-healing, load balancing</li> <li>Ideal for: Microservices architectures, production workloads</li> </ul>"},{"location":"az-204/az-204/#virtual-machines","title":"Virtual Machines","text":"<ul> <li>Purpose: Infrastructure-as-a-Service (IaaS) offering for full control over OS and environment</li> <li>Characteristics:</li> <li>Complete control over the virtualized hardware</li> <li>Supports Windows and Linux</li> <li>Various sizes optimized for different workloads</li> <li>Use Cases:</li> <li>Legacy applications requiring specific OS versions</li> <li>Custom software stacks</li> <li>High-performance computing</li> <li>Applications requiring direct access to hardware</li> </ul>"},{"location":"az-204/az-204/#2-azure-storage-solutions","title":"\ufffd 2. Azure Storage Solutions","text":""},{"location":"az-204/az-204/#blob-storage","title":"Blob Storage","text":"<ul> <li>Purpose: Object storage for massive amounts of unstructured data</li> <li>Access Tiers:</li> <li>Hot: Frequently accessed data</li> <li>Cool: Infrequently accessed data (lower cost)</li> <li>Archive: Rarely accessed data (lowest cost, retrieval latency)</li> <li>Features:</li> <li>Tier lifecycle management</li> <li>Data encryption at rest</li> <li>Shared Access Signatures (SAS) for secure access</li> </ul>"},{"location":"az-204/az-204/#table-storage","title":"Table Storage","text":"<ul> <li>Purpose: NoSQL key-value store for semi-structured data</li> <li>Characteristics:</li> <li>Schemaless design</li> <li>Fast, cost-effective for large volumes of simple data</li> <li>Partition key + row key structure</li> <li>Use Cases: User data, device information, metadata storage</li> </ul>"},{"location":"az-204/az-204/#queue-storage","title":"Queue Storage","text":"<ul> <li>Purpose: Message queue service for asynchronous communication</li> <li>Features:</li> <li>First-In-First-Out (FIFO) processing</li> <li>At-least-once delivery</li> <li>Message time-to-live (TTL) configuration</li> <li>Use Cases: Decoupling application components, load leveling</li> </ul>"},{"location":"az-204/az-204/#file-storage","title":"File Storage","text":"<ul> <li>Purpose: Fully managed file shares using SMB protocol</li> <li>Characteristics:</li> <li>Accessible from cloud or on-premises</li> <li>Supports concurrent access</li> <li>Can be cached on Windows Servers with Azure File Sync</li> <li>Use Cases: Lift-and-shift of file-based applications, shared configuration files</li> </ul>"},{"location":"az-204/az-204/#3azure-security","title":"\ud83d\udd11 3.Azure Security","text":""},{"location":"az-204/az-204/#azure-ad-active-directory","title":"Azure AD (Active Directory)","text":"<ul> <li>Purpose: Cloud-based identity and access management service</li> <li>Features:</li> <li>Single sign-on (SSO)</li> <li>Multi-factor authentication (MFA)</li> <li>Application management</li> <li>Device management</li> <li>B2B and B2C capabilities</li> </ul>"},{"location":"az-204/az-204/#oauth-20openid-connect","title":"OAuth 2.0/OpenID Connect","text":"<ul> <li>OAuth 2.0: Authorization framework for delegated access</li> <li>OpenID Connect: Authentication layer built on OAuth 2.0</li> <li>Flow Types:</li> <li>Authorization Code (web apps)</li> <li>Implicit (SPAs)</li> <li>Client Credentials (service-to-service)</li> <li>Device Code (IoT/CLI)</li> </ul>"},{"location":"az-204/az-204/#managed-identity","title":"Managed Identity","text":"<ul> <li>Purpose: Automatically managed identity in Azure AD for Azure services</li> <li>Types:</li> <li>System-assigned (tied to resource lifecycle)</li> <li>User-assigned (standalone identity)</li> <li>Benefits: Eliminates need for credentials in code</li> </ul>"},{"location":"az-204/az-204/#key-vault","title":"Key Vault","text":"<ul> <li>Purpose: Centralized secrets management</li> <li>Stores:</li> <li>Secrets (passwords, connection strings)</li> <li>Keys (encryption keys)</li> <li>Certificates</li> <li>Features:</li> <li>Access policies and RBAC</li> <li>Hardware security modules (HSMs)</li> <li>Versioning</li> </ul>"},{"location":"az-204/az-204/#rbac-role-based-access-control","title":"RBAC (Role-Based Access Control)","text":"<ul> <li>Purpose: Granular access management for Azure resources</li> <li>Components:</li> <li>Security principal (who)</li> <li>Role definition (what permissions)</li> <li>Scope (where)</li> <li>Built-in Roles:</li> <li>Owner, Contributor, Reader</li> <li>Service-specific roles</li> </ul>"},{"location":"az-204/az-204/#4-monitoring-troubleshooting-and-optimization","title":"\ud83d\udd11 4. Monitoring, Troubleshooting, and Optimization","text":""},{"location":"az-204/az-204/#application-insights","title":"Application Insights","text":"<ul> <li>Purpose: Application performance management (APM) service</li> <li>Monitors:</li> <li>Request rates, response times, failure rates</li> <li>Dependency tracking</li> <li>Exceptions and logs</li> <li>Custom metrics and events</li> </ul>"},{"location":"az-204/az-204/#azure-monitor","title":"Azure Monitor","text":"<ul> <li>Purpose: Comprehensive solution for collecting, analyzing, and acting on telemetry</li> <li>Components:</li> <li>Metrics: Numerical values from resources</li> <li>Logs: Log data with KQL queries</li> <li>Alerts: Notifications based on conditions</li> <li>Workbooks: Interactive reports</li> </ul>"},{"location":"az-204/az-204/#log-analytics","title":"Log Analytics","text":"<ul> <li>Purpose: Log data repository and query engine</li> <li>Features:</li> <li>Kusto Query Language (KQL) for powerful analytics</li> <li>Cross-resource queries</li> <li>Saved queries and functions</li> <li>Integration with Azure Monitor</li> </ul>"},{"location":"az-204/az-204/#alertsautoscale","title":"Alerts/Autoscale","text":"<ul> <li>Alerts:</li> <li>Metric alerts (threshold-based)</li> <li>Log alerts (query-based)</li> <li> <p>Activity log alerts (operations-based)</p> </li> <li> <p>Autoscale:</p> </li> <li>Scale based on metrics or schedules</li> <li>Scale sets for VMs</li> <li>App Service scale-out</li> </ul>"},{"location":"az-204/az-204/#5-data-solutions","title":"\ud83d\udd11 5. Data Solutions","text":""},{"location":"az-204/az-204/#cosmos-db","title":"Cosmos DB","text":"<ul> <li>Purpose: Globally distributed, multi-model database service</li> <li>Consistency Levels:</li> <li>Strong, Bounded Staleness, Session, Consistent Prefix, Eventual</li> <li>APIs Supported:</li> <li>SQL, MongoDB, Cassandra, Gremlin, Table</li> <li>Features:</li> <li>Turnkey global distribution</li> <li>SLA-backed latency and availability</li> <li>Automatic indexing</li> </ul>"},{"location":"az-204/az-204/#sql-database","title":"SQL Database","text":"<ul> <li>Purpose: Fully managed relational database</li> <li>Deployment Models:</li> <li>Single database</li> <li>Elastic pool (shared resources)</li> <li>Managed instance (near-complete SQL Server compatibility)</li> <li>Features:</li> <li>Built-in high availability</li> <li>Intelligent performance tuning</li> <li>Advanced threat protection</li> </ul>"},{"location":"az-204/az-204/#ef-core-entity-framework-core","title":"EF Core (Entity Framework Core)","text":"<ul> <li>Purpose: Object-Relational Mapper (ORM) for .NET</li> <li>Features:</li> <li>LINQ support</li> <li>Change tracking</li> <li>Database migrations</li> <li>Cross-platform</li> <li>Use with Azure: Simplifies data access to Azure SQL, Cosmos DB</li> </ul>"},{"location":"az-204/az-204/#6-integrating-azure-services","title":"\ud83d\udd11 6. Integrating Azure Services","text":""},{"location":"az-204/az-204/#event-grid","title":"Event Grid","text":"<ul> <li>Purpose: Event routing service using publish-subscribe model</li> <li>Characteristics:</li> <li>Fully managed event routing</li> <li>Supports custom and Azure service events</li> <li>Push-based delivery</li> <li>Use Cases: Reacting to blob storage events, custom event processing</li> </ul>"},{"location":"az-204/az-204/#event-hubs","title":"Event Hubs","text":"<ul> <li>Purpose: Big data streaming platform and event ingestion service</li> <li>Features:</li> <li>High throughput (millions of events/sec)</li> <li>Capture feature for automatic data persistence</li> <li>Kafka compatibility</li> <li>Use Cases: IoT telemetry, clickstream analytics</li> </ul>"},{"location":"az-204/az-204/#service-bus","title":"Service Bus","text":"<ul> <li>Purpose: Enterprise messaging with queues and publish-subscribe topics</li> <li>Features:</li> <li>FIFO guarantees</li> <li>Dead-letter queues</li> <li>Duplicate detection</li> <li>Sessions for message ordering</li> <li>Use Cases: Order processing, financial transactions</li> </ul>"},{"location":"az-204/az-204/#logic-apps","title":"Logic Apps","text":"<ul> <li>Purpose: Serverless workflow automation</li> <li>Characteristics:</li> <li>Visual designer</li> <li>200+ connectors</li> <li>Enterprise Integration Pack for B2B scenarios</li> <li>Use Cases: Business process automation, system integration</li> </ul>"},{"location":"az-204/az-204/#api-management-apim","title":"API Management (APIM)","text":"<ul> <li>Purpose: API gateway for publishing, securing, and analyzing APIs</li> <li>Features:</li> <li>Rate limiting</li> <li>Request/response transformation</li> <li>Developer portal</li> <li>Multiple authentication options</li> </ul>"},{"location":"az-204/az-204/#7-deploying-and-managing-resources","title":"\ud83d\udd11 7. Deploying and Managing Resources","text":""},{"location":"az-204/az-204/#arm-templates","title":"ARM Templates","text":"<ul> <li>Purpose: Infrastructure as Code (IaC) for Azure</li> <li>Characteristics:</li> <li>JSON format</li> <li>Declarative syntax</li> <li>Idempotent deployments</li> <li>Modular design with linked templates</li> </ul>"},{"location":"az-204/az-204/#azure-clipowershell","title":"Azure CLI/PowerShell","text":"<ul> <li>Azure CLI:</li> <li>Cross-platform command-line tool</li> <li>Bash-like syntax</li> <li> <p>Interactive mode available</p> </li> <li> <p>Azure PowerShell:</p> </li> <li>PowerShell cmdlets for Azure</li> <li>More granular control than CLI</li> <li>Ideal for Windows environments</li> </ul>"},{"location":"az-204/az-204/#resource-manager-arm","title":"Resource Manager (ARM)","text":"<ul> <li>Purpose: Deployment and management service for Azure</li> <li>Features:</li> <li>Group resources into resource groups</li> <li>Dependency handling</li> <li>Tagging for organization</li> <li>Access control</li> </ul>"},{"location":"az-204/az-204/#cicd-with-github-actionsazure-devops","title":"CI/CD with GitHub Actions/Azure DevOps","text":"<ul> <li>GitHub Actions:</li> <li>YAML-based workflows</li> <li>Tight GitHub integration</li> <li> <p>Marketplace for actions</p> </li> <li> <p>Azure DevOps:</p> </li> <li>Pipelines for CI/CD</li> <li>Test plans</li> <li>Artifact feeds</li> <li>Full application lifecycle management</li> </ul>"},{"location":"az-204/az-204/#8-caching-and-performance-optimization","title":"\ud83d\udd11 8. Caching and Performance Optimization","text":""},{"location":"az-204/az-204/#azure-redis-cache","title":"Azure Redis Cache","text":"<ul> <li>Purpose: In-memory data store based on Redis</li> <li>Tiers:</li> <li>Basic (single node)</li> <li>Standard (replicated)</li> <li>Premium (with persistence and clustering)</li> <li> <p>Use Cases: Session store, output cache, message broker CDN (Content Delivery Network)</p> </li> <li> <p>Purpose: Global content caching for improved performance</p> </li> <li>Features:</li> <li>Edge locations worldwide</li> <li>Custom domains and HTTPS</li> <li>Rules engine for content handling</li> <li>Integration with Storage and Web Apps</li> </ul>"},{"location":"az-204/az-204/#9-api-and-web-app-development","title":"\ud83d\udd11 9. API and Web App Development","text":""},{"location":"az-204/az-204/#secure-api-development","title":"Secure API Development","text":"<ul> <li>Authentication:</li> <li>Azure AD integration</li> <li>OAuth 2.0 flows</li> <li> <p>API keys (for simpler scenarios)</p> </li> <li> <p>Best Practices:</p> </li> <li>Proper status codes</li> <li>Versioning</li> <li>Throttling</li> <li>Input validation</li> </ul>"},{"location":"az-204/az-204/#swaggeropenapi","title":"Swagger/OpenAPI","text":"<ul> <li>Purpose: API description format</li> <li>Features:</li> <li>Machine-readable API contracts</li> <li>Interactive documentation</li> <li>Client SDK generation</li> <li>Integration with API Management</li> </ul>"},{"location":"az-204/az-204/#10-messaging-patterns","title":"\ud83d\udd11 10. Messaging Patterns","text":""},{"location":"az-204/az-204/#queue-based-load-leveling","title":"Queue-based Load Leveling","text":"<ul> <li>Pattern: Use a queue as buffer between components</li> <li>Benefits:</li> <li>Smooths intermittent heavy loads</li> <li>Prevents resource exhaustion</li> <li>Enables asynchronous processing</li> </ul>"},{"location":"az-204/az-204/#competing-consumers","title":"Competing Consumers","text":"<ul> <li>Pattern: Multiple consumers process messages from same queue</li> <li>Benefits:</li> <li>Increased throughput</li> <li>Horizontal scaling</li> <li>Fault tolerance</li> </ul>"},{"location":"az-204/az-204/#publishersubscriber","title":"Publisher/Subscriber","text":"<ul> <li>Pattern: Events distributed to multiple subscribers</li> <li>Azure Services:</li> <li>Event Grid (lightweight)</li> <li>Service Bus Topics (enterprise)</li> <li>Event Hubs (high volume)</li> </ul>"},{"location":"database/Liquidbase/","title":"\ud83d\udce6 Liquibase + PostgreSQL + Partman Integration Guide","text":""},{"location":"database/Liquidbase/#what-is-liquibase","title":"\u2705 What is Liquibase?","text":"<p>Liquibase is an open-source database schema change management tool. It tracks, manages, and applies database changes across environments safely and automatically.</p>"},{"location":"database/Liquidbase/#why-use-liquibase","title":"\u2705 Why Use Liquibase?","text":"<ul> <li>Version control for your DB schema  </li> <li>Keep dev/test/prod databases in sync  </li> <li>Works well with CI/CD pipelines  </li> <li>Supports YAML, XML, JSON, SQL formats  </li> </ul>"},{"location":"database/Liquidbase/#key-terms","title":"\u2705 Key Terms","text":"<ul> <li>ChangeSet: Single unit of change (e.g., create table)  </li> <li>ChangeLog: File containing a list of ChangeSets  </li> <li>liquibase.properties: Configuration (DB URL, credentials, changelog file)  </li> </ul>"},{"location":"database/Liquidbase/#basic-yaml-changeset","title":"\u2705 Basic YAML ChangeSet","text":"<pre><code>- changeSet:\n    id: 1\n    author: darshan\n    changes:\n      - createTable:\n          tableName: student\n          columns:\n            - column:\n                name: id\n                type: SERIAL\n                constraints:\n                  primaryKey: true\n            - column:\n                name: name\n                type: VARCHAR(100)\n</code></pre> <p>Run:</p> <pre><code>liquibase update\n</code></pre>"},{"location":"database/Liquidbase/#rollback-support","title":"\u2705 Rollback Support","text":"<pre><code>- changeSet:\n    id: 2\n    author: darshan\n    changes:\n      - addColumn:\n          tableName: student\n          columns:\n            - column:\n                name: age\n                type: INT\n    rollback:\n      - dropColumn:\n          columnName: age\n          tableName: student\n</code></pre> <pre><code>liquibase rollbackCount 1\n</code></pre>"},{"location":"database/Liquidbase/#preconditions","title":"\u2705 Preconditions","text":"<pre><code>preConditions:\n  - not:\n      - tableExists:\n          tableName: student\n</code></pre>"},{"location":"database/Liquidbase/#tags-snapshots","title":"\u2705 Tags &amp; Snapshots","text":"<pre><code>liquibase tag v1.0\nliquibase snapshot\n</code></pre>"},{"location":"database/Liquidbase/#contexts-environment-specific","title":"\u2705 Contexts (Environment Specific)","text":"<pre><code>- changeSet:\n    id: 3\n    author: darshan\n    context: dev,test\n    changes:\n      - insert:\n          tableName: student\n          columns:\n            - column: { name: name, value: 'test user' }\n</code></pre> <p>Run:</p> <pre><code>liquibase update --contexts=dev\n</code></pre>"},{"location":"database/Liquidbase/#modular-changelogs","title":"\u2705 Modular ChangeLogs","text":"<pre><code>databaseChangeLog:\n  - include:\n      file: tables/student.yaml\n  - include:\n      file: data/init_data.yaml\n</code></pre>"},{"location":"database/Liquidbase/#cicd-integration-github-actions","title":"\u2705 CI/CD Integration (GitHub Actions)","text":"<pre><code>- uses: liquibase/liquibase-github-action@v4.23.0\n  with:\n    operation: update\n    changelogFile: changelog.yaml\n</code></pre>"},{"location":"database/Liquidbase/#liquibase-spring-boot-setup-maven","title":"\u2615 Liquibase + Spring Boot Setup (Maven)","text":""},{"location":"database/Liquidbase/#step-1-add-dependency","title":"Step 1: Add Dependency","text":"<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.liquibase&lt;/groupId&gt;\n  &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"database/Liquidbase/#step-2-dbchangelog-masteryaml","title":"Step 2: <code>db.changelog-master.yaml</code>","text":"<pre><code>databaseChangeLog:\n  - include:\n      file: db/changelog/001-create-student.yaml\n</code></pre>"},{"location":"database/Liquidbase/#step-3-create-changeset-file","title":"Step 3: Create ChangeSet File","text":"<p><code>db/changelog/001-create-student.yaml</code></p> <pre><code>- changeSet:\n    id: 001\n    author: darshan\n    changes:\n      - createTable:\n          tableName: student\n          columns:\n            - column:\n                name: id\n                type: BIGINT\n                autoIncrement: true\n                constraints:\n                  primaryKey: true\n            - column:\n                name: name\n                type: VARCHAR(100)\n</code></pre>"},{"location":"database/Liquidbase/#step-4-applicationyml","title":"Step 4: application.yml","text":"<pre><code>spring:\n  datasource:\n    url: jdbc:postgresql://localhost:5432/yourdb\n    username: youruser\n    password: yourpass\n  liquibase:\n    change-log: classpath:/db/changelog/db.changelog-master.yaml\n    enabled: true\n</code></pre>"},{"location":"database/Liquidbase/#step-5-run","title":"Step 5: Run","text":"<p>Liquibase auto-executes on Spring Boot start. For CLI:</p> <pre><code>mvn liquibase:update\n</code></pre> <p>Rollback:</p> <pre><code>mvn liquibase:rollback -Dliquibase.rollbackCount=1\n</code></pre>"},{"location":"database/Liquidbase/#postgresql-partman-liquibase-integration","title":"\ud83d\udce6 PostgreSQL Partman + Liquibase Integration","text":""},{"location":"database/Liquidbase/#what-is-pg_partman","title":"\u2705 What is pg_partman?","text":"<p>pg_partman is a PostgreSQL extension for automated time-based or ID-based partitioning.</p>"},{"location":"database/Liquidbase/#step-1-create-extension-optional-via-liquibase","title":"\u2705 Step 1: Create Extension (Optional via Liquibase)","text":"<pre><code>- changeSet:\n    id: 000\n    author: darshan\n    changes:\n      - sql:\n          sql: CREATE EXTENSION IF NOT EXISTS pg_partman;\n</code></pre> <p>Or manually:</p> <pre><code>CREATE EXTENSION IF NOT EXISTS pg_partman;\n</code></pre>"},{"location":"database/Liquidbase/#step-2-create-parent-table-with-partman","title":"\u2705 Step 2: Create Parent Table with Partman","text":"<p><code>001-create-events-parent.yaml</code></p> <pre><code>- changeSet:\n    id: 001\n    author: darshan\n    changes:\n      - sql:\n          splitStatements: false\n          sql: |\n            CREATE TABLE IF NOT EXISTS public.events (\n              id BIGSERIAL PRIMARY KEY,\n              user_id INT NOT NULL,\n              created_at TIMESTAMP NOT NULL,\n              event_type TEXT NOT NULL\n            ) PARTITION BY RANGE (created_at);\n</code></pre>"},{"location":"database/Liquidbase/#step-3-register-table-in-pg_partman","title":"\u2705 Step 3: Register Table in pg_partman","text":"<p><code>002-register-with-partman.yaml</code></p> <pre><code>- changeSet:\n    id: 002\n    author: darshan\n    changes:\n      - sql:\n          splitStatements: false\n          sql: |\n            SELECT partman.create_parent(\n              p_parent_table := 'public.events',\n              p_control := 'created_at',\n              p_type := 'native',\n              p_interval := 'monthly',\n              p_premake := 4\n            );\n</code></pre>"},{"location":"database/Liquidbase/#step-4-insert-sample-data-optional","title":"\u2705 Step 4: Insert Sample Data (Optional)","text":"<pre><code>- changeSet:\n    id: 003\n    author: darshan\n    context: dev\n    changes:\n      - insert:\n          tableName: events\n          columns:\n            - column: { name: user_id, value: 101 }\n            - column: { name: created_at, valueDate: \"2025-08-01T00:00:00\" }\n            - column: { name: event_type, value: \"login\" }\n</code></pre>"},{"location":"database/Liquidbase/#step-5-run-partman-maintenance","title":"\u2705 Step 5: Run Partman Maintenance","text":"<p>Required to pre-create partitions.</p> <pre><code>SELECT partman.run_maintenance();\n</code></pre> <p>Or via Liquibase:</p> <pre><code>- changeSet:\n    id: 004\n    author: darshan\n    changes:\n      - sql:\n          sql: SELECT partman.run_maintenance();\n</code></pre>"},{"location":"database/Liquidbase/#automate-maintenance-via-cron-or-k8s-job","title":"\u2705 Automate Maintenance via Cron or K8s Job","text":"<pre><code>psql -U user -d yourdb -c \"SELECT partman.run_maintenance();\"\n</code></pre> <p>Or use a Kubernetes CronJob to automate this.</p>"},{"location":"database/Liquidbase/#summary","title":"\u2705 Summary","text":"Component Details DB Change Tool Liquibase Partition Engine pg_partman Partition Type RANGE (time-based: monthly) Maintenance <code>partman.run_maintenance()</code> DevOps Integration GitHub Actions / Jenkins / CI/CD pipelines Spring Boot Auto Liquibase changelog execution <p>\u2705 You're now ready to use Liquibase with PostgreSQL Partman in microservices or monolithic apps!</p>"},{"location":"database/Liquidbase/#spring-boot-liquibase-postgresql-setup-guide","title":"\ud83d\udce6 Spring Boot + Liquibase + PostgreSQL Setup Guide","text":""},{"location":"database/Liquidbase/#phase-1-spring-boot-liquibase-postgresql-no-partitioning","title":"\u2705 Phase 1: Spring Boot + Liquibase + PostgreSQL (No Partitioning)","text":"<p>This section shows how to create a Spring Boot application with PostgreSQL and integrate Liquibase to manage schema changes.</p>"},{"location":"database/Liquidbase/#step-1-spring-boot-project-setup","title":"\ud83d\udd39 Step 1: Spring Boot Project Setup","text":"<ol> <li>Go to https://start.spring.io</li> <li> <p>Choose:</p> </li> <li> <p>Project: Maven</p> </li> <li>Language: Java</li> <li>Spring Boot: 3.x</li> <li> <p>Dependencies:</p> <ul> <li>Spring Web</li> <li>Spring Data JPA</li> <li>PostgreSQL Driver</li> <li>Liquibase</li> </ul> </li> </ol>"},{"location":"database/Liquidbase/#step-2-applicationyml","title":"\ud83d\udd39 Step 2: application.yml","text":"<pre><code>spring:\n  datasource:\n    url: jdbc:postgresql://localhost:5432/mydb\n    username: postgres\n    password: postgres\n  jpa:\n    hibernate:\n      ddl-auto: none\n  liquibase:\n    enabled: true\n    change-log: classpath:/db/changelog/db.changelog-master.yaml\n</code></pre>"},{"location":"database/Liquidbase/#step-3-create-liquibase-changelog","title":"\ud83d\udd39 Step 3: Create Liquibase Changelog","text":"<p>\ud83d\udcc1 <code>src/main/resources/db/changelog/db.changelog-master.yaml</code></p> <pre><code>databaseChangeLog:\n  - include:\n      file: db/changelog/001-create-user.yaml\n</code></pre> <p>\ud83d\udcc1 <code>src/main/resources/db/changelog/001-create-user.yaml</code></p> <pre><code>- changeSet:\n    id: 001\n    author: darshan\n    changes:\n      - createTable:\n          tableName: user\n          columns:\n            - column:\n                name: id\n                type: BIGINT\n                autoIncrement: true\n                constraints:\n                  primaryKey: true\n            - column:\n                name: name\n                type: VARCHAR(100)\n            - column:\n                name: email\n                type: VARCHAR(100)\n            - column:\n                name: role\n                type: VARCHAR(50)\n</code></pre>"},{"location":"database/Liquidbase/#step-4-java-code-for-crud","title":"\ud83d\udd39 Step 4: Java Code for CRUD","text":""},{"location":"database/Liquidbase/#userjava","title":"<code>User.java</code>","text":"<pre><code>@Entity\npublic class User {\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n  private String name;\n  private String email;\n  private String role;\n  // Getters &amp; Setters\n}\n</code></pre>"},{"location":"database/Liquidbase/#userrepositoryjava","title":"<code>UserRepository.java</code>","text":"<pre><code>public interface UserRepository extends JpaRepository&lt;User, Long&gt; {}\n</code></pre>"},{"location":"database/Liquidbase/#userservicejava","title":"<code>UserService.java</code>","text":"<pre><code>@Service\npublic class UserService {\n  @Autowired\n  private UserRepository repository;\n\n  public List&lt;User&gt; getAll() { return repository.findAll(); }\n  public User getById(Long id) { return repository.findById(id).orElse(null); }\n  public User save(User user) { return repository.save(user); }\n  public void delete(Long id) { repository.deleteById(id); }\n}\n</code></pre>"},{"location":"database/Liquidbase/#usercontrollerjava","title":"<code>UserController.java</code>","text":"<pre><code>@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n  @Autowired\n  private UserService service;\n\n  @GetMapping public List&lt;User&gt; getAll() { return service.getAll(); }\n  @GetMapping(\"/{id}\") public User get(@PathVariable Long id) { return service.getById(id); }\n  @PostMapping public User create(@RequestBody User u) { return service.save(u); }\n  @PutMapping(\"/{id}\") public User update(@PathVariable Long id, @RequestBody User u) {\n    u.setId(id); return service.save(u);\n  }\n  @DeleteMapping(\"/{id}\") public void delete(@PathVariable Long id) { service.delete(id); }\n}\n</code></pre>"},{"location":"database/Liquidbase/#phase-2-add-pg_partman-for-partitioning","title":"\u2705 Phase 2: Add pg_partman for Partitioning","text":"<p>This section extends the base setup to use pg_partman to manage PostgreSQL time-based partitions using Liquibase.</p>"},{"location":"database/Liquidbase/#step-1-enable-pg_partman-extension","title":"\ud83d\udd39 Step 1: Enable pg_partman Extension","text":"<p>\ud83d\udcc1 <code>db/changelog/000-enable-extension.yaml</code></p> <pre><code>- changeSet:\n    id: 000\n    author: darshan\n    changes:\n      - sql:\n          sql: CREATE EXTENSION IF NOT EXISTS pg_partman;\n</code></pre> <p>Include in master:</p> <pre><code>  - include:\n      file: db/changelog/000-enable-extension.yaml\n</code></pre>"},{"location":"database/Liquidbase/#step-2-create-partitioned-table","title":"\ud83d\udd39 Step 2: Create Partitioned Table","text":"<p>\ud83d\udcc1 <code>001-create-events-parent.yaml</code></p> <pre><code>- changeSet:\n    id: 001\n    author: darshan\n    changes:\n      - sql:\n          splitStatements: false\n          sql: |\n            CREATE TABLE IF NOT EXISTS public.events (\n              id BIGSERIAL PRIMARY KEY,\n              user_id INT NOT NULL,\n              created_at TIMESTAMP NOT NULL,\n              event_type TEXT NOT NULL\n            ) PARTITION BY RANGE (created_at);\n</code></pre>"},{"location":"database/Liquidbase/#step-3-register-with-pg_partman","title":"\ud83d\udd39 Step 3: Register with pg_partman","text":"<p>\ud83d\udcc1 <code>002-register-partman.yaml</code></p> <pre><code>- changeSet:\n    id: 002\n    author: darshan\n    changes:\n      - sql:\n          sql: |\n            SELECT partman.create_parent(\n              p_parent_table := 'public.events',\n              p_control := 'created_at',\n              p_type := 'native',\n              p_interval := 'monthly',\n              p_premake := 4\n            );\n</code></pre>"},{"location":"database/Liquidbase/#step-4-run-maintenance","title":"\ud83d\udd39 Step 4: Run Maintenance","text":"<p>\ud83d\udcc1 <code>004-run-maintenance.yaml</code></p> <pre><code>- changeSet:\n    id: 004\n    author: darshan\n    changes:\n      - sql:\n          sql: SELECT partman.run_maintenance();\n</code></pre> <p>Schedule with Linux Cron or Kubernetes CronJob.</p> <p>\u2705 You're now running a Spring Boot + PostgreSQL + Liquibase + Partman setup with versioned partitioning, auto-maintenance, and RESTful CRUD for users.</p>"},{"location":"database/postgreSQL/","title":"\ud83d\udc18 PostgreSQL","text":""},{"location":"database/postgreSQL/#why-postgresql","title":"\u2753 Why PostgreSQL?","text":"<ul> <li>\ud83d\udca1 Open-source, powerful and enterprise-grade</li> <li>\ud83d\udcbe ACID-compliant for safe transactions</li> <li>\ud83e\udde9 Extensible (custom data types, operators, functions)</li> <li>\ud83d\udcca Full support for relational + NoSQL (JSONB)</li> <li>\ud83d\udd04 MVCC (Multiversion Concurrency Control) for performance</li> <li>\ud83d\udd12 Advanced security, partitioning, indexing, constraints</li> </ul>"},{"location":"database/postgreSQL/#when-to-use-postgresql","title":"\u23f1\ufe0f When to Use PostgreSQL?","text":"<ul> <li>Enterprise systems needing complex queries &amp; high reliability</li> <li>Web apps (especially with ORMs like Hibernate, Sequelize)</li> <li>Geospatial applications (PostGIS)</li> <li>Systems with both structured and unstructured data (JSONB)</li> </ul>"},{"location":"database/postgreSQL/#what-makes-it-different","title":"\u2699\ufe0f What Makes It Different?","text":"Feature PostgreSQL MySQL Oracle DB MongoDB Type Relational + Object Relational Relational NoSQL Document JSONB Support \u2705 Yes \u26a0\ufe0f Basic JSON \u274c \u2705 Native ACID Compliance \u2705 Full \u2705 Partial \u2705 Full \u26a0\ufe0f Not strict Partitioning \u2705 Declarative &amp; Flexible \u2705 Manual setup \u2705 \u274c Full-Text Search \u2705 Built-in \u26a0\ufe0f Limited \u2705 \u2705 Procedural Language (PL) \u2705 PL/pgSQL, PL/Python, etc. \u274c Stored Proc \u2705 PL/SQL \u274c Licensing PostgreSQL License (Permissive) GPL Commercial SSPL"},{"location":"database/postgreSQL/#postgresql-data-types-explained","title":"\ud83e\uddfe PostgreSQL Data Types Explained","text":""},{"location":"database/postgreSQL/#1-numeric-types","title":"1\ufe0f\u20e3 Numeric Types","text":"Data Type Description Example <code>SMALLINT</code> 2 bytes integer (-32,768 to +32,767) 100 <code>INTEGER</code> or <code>INT</code> 4 bytes integer (-2B to +2B) 100000 <code>BIGINT</code> 8 bytes integer 9223372036854775807 <code>DECIMAL(p, s)</code> Exact numeric with precision and scale 1234.56 <code>NUMERIC(p, s)</code> Same as DECIMAL 99.99 <code>REAL</code> 4 bytes floating point 3.14 <code>DOUBLE PRECISION</code> 8 bytes floating point 3.1415926535"},{"location":"database/postgreSQL/#2-character-types","title":"2\ufe0f\u20e3 Character Types","text":"Data Type Description Example <code>CHAR(n)</code> Fixed-length string 'ABC   ' <code>VARCHAR(n)</code> Variable-length string 'Hello World' <code>TEXT</code> Unlimited length text 'This is a large text'"},{"location":"database/postgreSQL/#3-datetime-types","title":"3\ufe0f\u20e3 Date/Time Types","text":"Data Type Description Example <code>DATE</code> Calendar date (YYYY-MM-DD) '2025-08-04' <code>TIME</code> Time of day (HH\\:MM\\:SS) '14:30:00' <code>TIMESTAMP</code> Date and time '2025-08-04 14:30:00' <code>INTERVAL</code> Time span '1 day 2 hours'"},{"location":"database/postgreSQL/#4-boolean-type","title":"4\ufe0f\u20e3 Boolean Type","text":"Data Type Description Example <code>BOOLEAN</code> True or False TRUE"},{"location":"database/postgreSQL/#5-geometric-types-advanced","title":"5\ufe0f\u20e3 Geometric Types (Advanced)","text":"Data Type Description Example <code>POINT</code> A point in 2D space '(1,2)' <code>LINE</code> Infinite line '{1,2,3}' <code>CIRCLE</code> Circle '&lt;(3,4),5&gt;'"},{"location":"database/postgreSQL/#6-network-address-types","title":"6\ufe0f\u20e3 Network Address Types","text":"Data Type Description Example <code>CIDR</code> IPv4/IPv6 networks '192.168.0.0/24' <code>INET</code> IPv4/IPv6 host address '192.168.0.1' <code>MACADDR</code> MAC address '08:00:2b:01:02:03'"},{"location":"database/postgreSQL/#7-json-types","title":"7\ufe0f\u20e3 JSON Types","text":"Data Type Description Example <code>JSON</code> Text-based JSON '{\"name\":\"John\"}' <code>JSONB</code> Binary JSON (faster) '{\"name\":\"John\"}'"},{"location":"database/postgreSQL/#8-uuid","title":"8\ufe0f\u20e3 UUID","text":"Data Type Description Example <code>UUID</code> Universally Unique Identifier 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'"},{"location":"database/postgreSQL/#example-table-with-different-data-types","title":"\ud83d\udee0\ufe0f Example Table with Different Data Types","text":"<pre><code>CREATE TABLE employee (\n  emp_id UUID PRIMARY KEY,\n  name VARCHAR(100) NOT NULL,\n  salary NUMERIC(10,2),\n  joining_date DATE,\n  is_active BOOLEAN,\n  profile JSONB\n);\n</code></pre>"},{"location":"database/postgreSQL/#postgresql-constraints-explained","title":"\ud83c\udff7\ufe0f PostgreSQL Constraints Explained","text":""},{"location":"database/postgreSQL/#1-not-null","title":"1\ufe0f\u20e3 NOT NULL","text":"<p>Ensures a column cannot have NULL value.</p> <pre><code>name VARCHAR(100) NOT NULL\n</code></pre>"},{"location":"database/postgreSQL/#2-unique","title":"2\ufe0f\u20e3 UNIQUE","text":"<p>Ensures all values in a column are unique.</p> <pre><code>email VARCHAR(100) UNIQUE\n</code></pre>"},{"location":"database/postgreSQL/#3-primary-key","title":"3\ufe0f\u20e3 PRIMARY KEY","text":"<p>Combination of NOT NULL + UNIQUE.</p> <pre><code>emp_id UUID PRIMARY KEY\n</code></pre>"},{"location":"database/postgreSQL/#4-foreign-key","title":"4\ufe0f\u20e3 FOREIGN KEY","text":"<p>Ensures value exists in another table.</p> <pre><code>FOREIGN KEY (dept_id) REFERENCES department(dept_id)\n</code></pre>"},{"location":"database/postgreSQL/#5-check","title":"5\ufe0f\u20e3 CHECK","text":"<p>Validates data based on condition.</p> <pre><code>age INT CHECK (age &gt;= 18)\n</code></pre>"},{"location":"database/postgreSQL/#6-default","title":"6\ufe0f\u20e3 DEFAULT","text":"<p>Sets default value if none provided.</p> <pre><code>is_active BOOLEAN DEFAULT TRUE\n</code></pre>"},{"location":"database/postgreSQL/#7-exclusion","title":"7\ufe0f\u20e3 EXCLUSION","text":"<p>Ensures rows do not overlap in some way (used with geometric types, ranges).</p> <pre><code>EXCLUDE USING gist (period WITH &amp;&amp;)\n</code></pre>"},{"location":"database/postgreSQL/#example-table-with-constraints","title":"\ud83d\udee0\ufe0f Example Table with Constraints","text":"<pre><code>CREATE TABLE department (\n  dept_id SERIAL PRIMARY KEY,\n  name VARCHAR(50) NOT NULL UNIQUE\n);\n\nCREATE TABLE employee (\n  emp_id SERIAL PRIMARY KEY,\n  name VARCHAR(100) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  age INT CHECK (age &gt;= 18),\n  dept_id INT REFERENCES department(dept_id),\n  is_active BOOLEAN DEFAULT TRUE\n);\n</code></pre>"},{"location":"database/postgreSQL/#summary","title":"\u2705 Summary","text":"<ul> <li>Data types define the kind of data stored in columns.</li> <li>Constraints enforce rules on the data to maintain data integrity.</li> <li>Combining both ensures powerful and reliable database schema design.</li> </ul>"},{"location":"database/postgreSQL/#crud-operation-breakdown","title":"\ud83e\uddfe CRUD Operation Breakdown","text":"<pre><code>-- Insert data into table\nINSERT INTO students (name, age) VALUES ('Alice', 20);\n-- Adds a new student named Alice with age 20\n\n-- Read data from table\nSELECT * FROM students;\n-- Retrieves all columns and rows from 'students'\n\n-- Update data in table\nUPDATE students SET age = 21 WHERE name = 'Alice';\n-- Changes Alice's age to 21\n\n-- Delete data from table\nDELETE FROM students WHERE name = 'Alice';\n-- Removes Alice's record from the table\n</code></pre>"},{"location":"database/postgreSQL/#joins-detailed","title":"\ud83d\udd17 Joins (Detailed)","text":""},{"location":"database/postgreSQL/#inner-join","title":"\u2705 INNER JOIN","text":"<p>Returns only the matching rows from both tables.</p> <pre><code>SELECT s.name, e.course_id\nFROM students s\nINNER JOIN enrollments e ON s.id = e.student_id;\n</code></pre> <ul> <li>Fetches only students who are enrolled in a course.</li> </ul>"},{"location":"database/postgreSQL/#left-join-or-left-outer-join","title":"\u2705 LEFT JOIN (or LEFT OUTER JOIN)","text":"<p>Returns all rows from the left table, even if there's no match in the right table.</p> <pre><code>SELECT s.name, e.course_id\nFROM students s\nLEFT JOIN enrollments e ON s.id = e.student_id;\n</code></pre> <ul> <li>Returns all students. If a student isn't enrolled, <code>course_id</code> will be NULL.</li> </ul>"},{"location":"database/postgreSQL/#right-join-or-right-outer-join","title":"\u2705 RIGHT JOIN (or RIGHT OUTER JOIN)","text":"<p>Returns all rows from the right table, even if there's no match in the left table.</p> <pre><code>SELECT s.name, e.course_id\nFROM students s\nRIGHT JOIN enrollments e ON s.id = e.student_id;\n</code></pre> <ul> <li>Returns all enrollments. If no matching student, <code>name</code> will be NULL.</li> </ul>"},{"location":"database/postgreSQL/#full-join-or-full-outer-join","title":"\u2705 FULL JOIN (or FULL OUTER JOIN)","text":"<p>Returns rows when there is a match in either left or right table.</p> <pre><code>SELECT s.name, e.course_id\nFROM students s\nFULL JOIN enrollments e ON s.id = e.student_id;\n</code></pre> <ul> <li>Returns all students and all enrollments, with NULLs where there's no match.</li> </ul>"},{"location":"database/postgreSQL/#cross-join","title":"\u2705 CROSS JOIN","text":"<p>Returns a Cartesian product \u2014 every row from the first table is paired with every row from the second.</p> <pre><code>SELECT s.name, c.name\nFROM students s\nCROSS JOIN courses c;\n</code></pre> <ul> <li>Each student is paired with every course.</li> </ul>"},{"location":"database/postgreSQL/#self-join","title":"\u2705 SELF JOIN","text":"<p>Join a table to itself using aliases.</p> <pre><code>SELECT a.name AS student1, b.name AS student2\nFROM students a, students b\nWHERE a.age = b.age AND a.id &lt;&gt; b.id;\n</code></pre> <ul> <li>Finds pairs of students who have the same age.</li> </ul>"},{"location":"database/postgreSQL/#visual-summary-join-types","title":"\ud83d\udcca Visual Summary (Join Types)","text":"Join Type Includes Unmatched Left Includes Unmatched Right Only Matches INNER JOIN \u274c \u274c \u2705 LEFT JOIN \u2705 \u274c \u2705 RIGHT JOIN \u274c \u2705 \u2705 FULL JOIN \u2705 \u2705 \u2705 CROSS JOIN \u2705 All combinations \u2705 All combinations \u274c <p>\ud83d\udcd8 Use <code>JOIN</code> wisely based on how much data you need and whether missing matches matter.</p>"},{"location":"database/postgreSQL/#views-detailed","title":"\ud83d\udccc Views (Detailed)","text":""},{"location":"database/postgreSQL/#where-why-to-use-views","title":"\ud83d\udcd8 Where &amp; Why to Use Views","text":"<ul> <li>Purpose: To encapsulate complex queries into reusable, secure, and simplified structures.</li> <li> <p>When to Use:</p> </li> <li> <p>Hiding complexity from end users</p> </li> <li>Restricting access to specific columns (security)</li> <li>Abstracting data for reporting</li> <li>Why: Views act like read-only tables but reduce redundancy and improve maintainability.</li> </ul>"},{"location":"database/postgreSQL/#what-is-a-view","title":"\u2705 What is a View?","text":"<p>A view is a virtual table based on the result of a SQL query.</p> <pre><code>CREATE VIEW student_course_view AS\nSELECT s.name, e.course_id\nFROM students s\nJOIN enrollments e ON s.id = e.student_id;\n</code></pre> <ul> <li>Acts like a table but does not store data itself.</li> <li>Useful for abstraction, security, and simplifying complex queries.</li> </ul> <pre><code>SELECT * FROM student_course_view;\n</code></pre>"},{"location":"database/postgreSQL/#updating-views","title":"\u2705 Updating Views","text":"<p>Some views are updatable:</p> <pre><code>UPDATE student_course_view SET course_id = 2 WHERE name = 'Alice';\n</code></pre> <p>\u26a0\ufe0f Works only if the view has a direct 1:1 mapping to the base table without aggregates or joins.</p>"},{"location":"database/postgreSQL/#functions-detailed","title":"\ud83d\udee0\ufe0f Functions (Detailed)","text":""},{"location":"database/postgreSQL/#where-why-to-use-functions","title":"\ud83d\udcd8 Where &amp; Why to Use Functions","text":"<ul> <li>Purpose: Encapsulate logic for reuse, consistency, and encapsulation.</li> <li> <p>When to Use:</p> </li> <li> <p>When logic is repeated in multiple queries</p> </li> <li>For custom calculations or transformations</li> <li>Why: They reduce code duplication, and can be called inside SQL queries or triggers.</li> </ul>"},{"location":"database/postgreSQL/#sql-function","title":"\u2705 SQL Function","text":"<pre><code>CREATE FUNCTION get_year(age INT) RETURNS INT AS $$\nBEGIN\n  RETURN EXTRACT(YEAR FROM CURRENT_DATE) - age;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre> <ul> <li>Accepts input and returns calculated output.</li> <li><code>EXTRACT(YEAR FROM CURRENT_DATE)</code> gets current year.</li> </ul>"},{"location":"database/postgreSQL/#calling-a-function","title":"\u2705 Calling a Function","text":"<pre><code>SELECT get_year(30); -- Output: e.g., 1993\n</code></pre>"},{"location":"database/postgreSQL/#triggers-detailed","title":"\u2699\ufe0f Triggers (Detailed)","text":""},{"location":"database/postgreSQL/#where-why-to-use-triggers","title":"\ud83d\udcd8 Where &amp; Why to Use Triggers","text":"<ul> <li>Purpose: Automatically execute logic when a database event (INSERT, UPDATE, DELETE) occurs.</li> <li> <p>When to Use:</p> </li> <li> <p>Logging changes automatically</p> </li> <li>Enforcing business rules at DB level</li> <li>Preventing invalid transactions</li> <li>Why: Helps enforce data integrity and system behavior without relying on app logic.</li> </ul>"},{"location":"database/postgreSQL/#what-is-a-trigger","title":"\u2705 What is a Trigger?","text":"<ul> <li>A trigger automatically executes a function in response to events on a table (INSERT, UPDATE, DELETE).</li> </ul> <pre><code>CREATE TABLE logs (\n  id SERIAL PRIMARY KEY,\n  message TEXT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE FUNCTION log_student_insert() RETURNS trigger AS $$\nBEGIN\n  INSERT INTO logs(message) VALUES ('New student added');\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER trg_student_add\nAFTER INSERT ON students\nFOR EACH ROW EXECUTE FUNCTION log_student_insert();\n</code></pre> <ul> <li>Automatically logs each student insert.</li> </ul>"},{"location":"database/postgreSQL/#indexes-detailed","title":"\u26a1 Indexes (Detailed)","text":""},{"location":"database/postgreSQL/#where-why-to-use-indexes","title":"\ud83d\udcd8 Where &amp; Why to Use Indexes","text":"<ul> <li>Purpose: Speed up data retrieval operations.</li> <li> <p>When to Use:</p> </li> <li> <p>Columns used in WHERE, JOIN, or ORDER BY clauses</p> </li> <li>Large datasets with frequent read operations</li> <li>Why: Without indexes, PostgreSQL must scan entire tables (slow for big data). Indexes improve performance at the cost of slower writes.</li> </ul>"},{"location":"database/postgreSQL/#what-is-an-index","title":"\u2705 What is an Index?","text":"<ul> <li>Improves the speed of data retrieval.</li> </ul> <pre><code>CREATE INDEX idx_students_name ON students(name);\n</code></pre>"},{"location":"database/postgreSQL/#unique-index","title":"\u2705 Unique Index","text":"<pre><code>CREATE UNIQUE INDEX idx_unique_email ON students(email);\n</code></pre> <p>\ud83d\udccc Use <code>EXPLAIN ANALYZE</code> to see index effectiveness.</p>"},{"location":"database/postgreSQL/#partitioning-detailed","title":"\ud83d\udce6 Partitioning (Detailed)","text":""},{"location":"database/postgreSQL/#where-why-to-use-partitioning","title":"\ud83d\udcd8 Where &amp; Why to Use Partitioning","text":"<ul> <li>Purpose: Split large tables into smaller, manageable chunks based on key fields (e.g., date, ID).</li> <li> <p>When to Use:</p> </li> <li> <p>When working with very large tables (millions+ rows)</p> </li> <li>When older data is queried less frequently</li> <li>Why: Improves query performance and management. PostgreSQL can scan only relevant partitions instead of whole tables.</li> </ul>"},{"location":"database/postgreSQL/#what-is-partitioning","title":"\u2705 What is Partitioning?","text":"<ul> <li>Splitting a large table into smaller pieces for performance.</li> </ul> <pre><code>CREATE TABLE measurements (\n  id SERIAL,\n  log_date DATE NOT NULL,\n  temperature NUMERIC\n) PARTITION BY RANGE (log_date);\n\nCREATE TABLE measurements_2024 PARTITION OF measurements\n  FOR VALUES FROM ('2024-01-01') TO ('2025-01-01');\n</code></pre> <ul> <li>Queries on 2024 data hit only <code>measurements_2024</code>.</li> </ul>"},{"location":"database/postgreSQL/#jsonb-detailed","title":"\ud83e\uddfe JSONB (Detailed)","text":""},{"location":"database/postgreSQL/#where-why-to-use-jsonb","title":"\ud83d\udcd8 Where &amp; Why to Use JSONB","text":"<ul> <li>Purpose: Store semi-structured data (like JSON documents) inside relational tables.</li> <li> <p>When to Use:</p> </li> <li> <p>When you need flexible schema (e.g., metadata, logs)</p> </li> <li>When values vary between rows</li> <li>Why: JSONB offers better performance and indexing than plain JSON and supports powerful querying via operators.</li> </ul>"},{"location":"database/postgreSQL/#what-is-jsonb","title":"\u2705 What is JSONB?","text":"<ul> <li>A binary-encoded JSON format (faster than JSON).</li> </ul> <pre><code>CREATE TABLE products (\n  id SERIAL,\n  details JSONB\n);\n\nINSERT INTO products(details)\nVALUES ('{\"name\": \"Laptop\", \"price\": 1500}');\n</code></pre>"},{"location":"database/postgreSQL/#jsonb-queries","title":"\u2705 JSONB Queries","text":"<pre><code>SELECT * FROM products WHERE details -&gt;&gt; 'name' = 'Laptop';\n</code></pre> <ul> <li><code>-&gt;&gt;</code> gets JSON field as text.</li> </ul>"},{"location":"database/postgreSQL/#ctes-window-functions-detailed","title":"\ud83d\udd04 CTEs &amp; \ud83e\ude9f Window Functions (Detailed)","text":""},{"location":"database/postgreSQL/#where-why-to-use-ctes","title":"\ud83d\udcd8 Where &amp; Why to Use CTEs","text":"<ul> <li>Purpose: Break down complex queries into readable, modular parts.</li> <li> <p>When to Use:</p> </li> <li> <p>With recursive queries</p> </li> <li>For debugging and better readability</li> <li>Why: CTEs simplify maintenance of complex SQL and support recursion.</li> </ul>"},{"location":"database/postgreSQL/#where-why-to-use-window-functions","title":"\ud83d\udcd8 Where &amp; Why to Use Window Functions","text":"<ul> <li>Purpose: Perform calculations across a window (subset) of rows related to the current row.</li> <li> <p>When to Use:</p> </li> <li> <p>Ranking, percentiles, moving averages</p> </li> <li>When you need row-wise operations without collapsing rows</li> <li>Why: Enables powerful analytics directly within SQL, no need for separate aggregation.</li> </ul>"},{"location":"database/postgreSQL/#what-is-a-cte","title":"\u2705 What is a CTE?","text":"<ul> <li>A temporary result set referenced in a query.</li> </ul> <pre><code>WITH underage AS (\n  SELECT * FROM students WHERE age &lt; 18\n)\nSELECT * FROM underage;\n</code></pre>"},{"location":"database/postgreSQL/#window-functions","title":"\ud83e\ude9f Window Functions","text":""},{"location":"database/postgreSQL/#what-is-a-window-function","title":"\u2705 What is a Window Function?","text":"<ul> <li>Performs calculation across a set of rows related to the current row.</li> </ul> <pre><code>SELECT name, age,\n  RANK() OVER (ORDER BY age DESC) AS age_rank\nFROM students;\n</code></pre> <ul> <li><code>RANK()</code> assigns ranking without collapsing rows.</li> </ul>"},{"location":"database/postgreSQL/#summary_1","title":"\ud83e\uddd1\u200d\ud83c\udfeb Summary","text":"<ul> <li>Views simplify queries</li> <li>Functions allow reusable business logic</li> <li>Triggers automate behavior</li> <li>Indexes boost speed</li> <li>Partitioning scales big data</li> <li>JSONB supports dynamic schemas</li> <li>CTEs improve query clarity</li> <li>Window functions power advanced analytics</li> </ul>"},{"location":"database/postgreSQL/#tooling-monitoring","title":"\ud83e\uddea Tooling &amp; Monitoring","text":"<ul> <li><code>pgAdmin</code>: Web GUI for managing PostgreSQL.</li> <li><code>DBeaver</code>: Universal SQL client.</li> <li><code>EXPLAIN ANALYZE</code>: View query plan and performance.</li> <li><code>pg_stat_statements</code>: Built-in extension for query analysis.</li> <li><code>pg_dump</code> / <code>pg_restore</code>: Tools for backups and recovery.</li> </ul>"},{"location":"docker/docker/","title":"\ud83d\udc33 Docker Notes","text":""},{"location":"docker/docker/#1-introduction-to-docker-and-containerization","title":"1. Introduction to Docker and Containerization","text":"<p>Docker is an open-source platform that enables developers to package applications and their dependencies into standardized units called containers.</p> <p>Containerization is a lightweight alternative to full machine virtualization that:</p> <ul> <li>Packages software in isolated environments</li> <li>Shares the host OS kernel</li> <li>Runs consistently across different infrastructures</li> </ul> <p>Key concepts:</p> <ul> <li>Images: Read-only templates for creating containers</li> <li>Containers: Runnable instances of images</li> <li>Docker Engine: The runtime that manages containers</li> </ul>"},{"location":"docker/docker/#2-benefits-of-using-docker","title":"2. Benefits of Using Docker","text":"Benefit Description Portability Runs identically on any system with Docker installed Efficiency Containers share the OS kernel, using fewer resources than VMs Isolation Applications run in separate, secure environments Scalability Easy to scale services horizontally Consistency Eliminates \"works on my machine\" problems Fast Deployment Containers start in seconds"},{"location":"docker/docker/#3-docker-vs-virtual-machines","title":"3. Docker vs Virtual Machines","text":"Feature Docker Containers Virtual Machines OS Shares host OS Requires full guest OS Startup Time Seconds Minutes Performance Near-native Slight overhead Disk Usage MBs (layered images) GBs (full OS) Isolation Process-level Hardware-level Use Case Microservices, CI/CD Legacy apps, full OS needs"},{"location":"docker/docker/#4-docker-architecture","title":"4. Docker Architecture","text":""},{"location":"docker/docker/#docker-system-components","title":"Docker System Components","text":"<ul> <li>Docker Client: CLI interface (<code>docker</code> command) to interact with the Docker daemon.</li> <li>Docker Host: Runs the Docker daemon and manages containers.</li> <li>Registry: Central repository to store and distribute Docker images (e.g., Docker Hub, private registries).</li> </ul>"},{"location":"docker/docker/#5-key-docker-components","title":"5. Key Docker Components","text":""},{"location":"docker/docker/#docker-core-components","title":"Docker Core Components","text":"Component Description Docker Engine Core runtime (<code>dockerd</code>) Images Immutable templates (e.g., <code>nginx:latest</code>) Containers Runnable instances of images Volumes Persistent data storage Networks Isolated communication channels Dockerfile Blueprint for building images Docker Hub Public image repository"},{"location":"docker/docker/#6-docker-cli-commands","title":"6. Docker CLI Commands","text":""},{"location":"docker/docker/#image-management","title":"\ud83d\udc33 Image Management","text":"<pre><code>docker pull nginx              # Download image\ndocker images                  # List images\ndocker rmi nginx               # Remove image\ndocker build -t myapp .        # Build from Dockerfile\n</code></pre>"},{"location":"docker/docker/#container-management","title":"Container Management","text":"<pre><code>docker run -d -p 80:80 nginx   # Run container\ndocker ps                     # List running containers\ndocker stop &lt;container_id&gt;    # Stop container\ndocker rm &lt;container_id&gt;      # Remove container\ndocker exec -it nginx bash    # Enter running container\n</code></pre>"},{"location":"docker/docker/#volume-management","title":"Volume Management","text":"<pre><code>docker volume create myvol    # Create volume\ndocker volume ls             # List volumes\ndocker volume inspect myvol  # View volume details\n</code></pre>"},{"location":"docker/docker/#network-management","title":"Network Management","text":"<pre><code>docker network create mynet   # Create network\ndocker network ls            # List networks\ndocker network inspect mynet # View network details\n</code></pre>"},{"location":"docker/docker/#7-dockerfile-syntax-and-example","title":"7. Dockerfile Syntax and Example","text":""},{"location":"docker/docker/#common-instructions","title":"Common Instructions","text":"Instruction Purpose FROM Base image WORKDIR Working directory COPY Add files RUN Execute commands EXPOSE Document ports CMD Default command"},{"location":"docker/docker/#example-dockerfile","title":"Example Dockerfile","text":"<pre><code># Multi-stage build for Java app\nFROM maven:3.8-jdk-11 AS build\nWORKDIR /app\nCOPY pom.xml .\nRUN mvn dependency:go-offline\nCOPY src/ ./src/\nRUN mvn package\n\nFROM openjdk:11-jre\nWORKDIR /app\nCOPY --from=build /app/target/myapp.jar .\nEXPOSE 8080\nCMD [\"java\", \"-jar\", \"myapp.jar\"]\n</code></pre>"},{"location":"docker/docker/#8-kubernetes-deployment","title":"8. Kubernetes Deployment","text":""},{"location":"docker/docker/#definition","title":"Definition","text":"<p>Kubernetes is a container orchestration system that automates deployment, scaling, and management of containerized applications.</p>"},{"location":"docker/docker/#full-stack-example","title":"Full-Stack Example","text":"<p>Backend Dockerfile (Spring Boot):</p> <pre><code>FROM maven:3.8-jdk-11 AS build\nWORKDIR /app\nCOPY pom.xml .\nRUN mvn dependency:go-offline\nCOPY src/ ./src/\nRUN mvn package -DskipTests\n\nFROM openjdk:11-jre\nWORKDIR /app\nCOPY --from=build /app/target/backend.jar .\nEXPOSE 8080\nCMD [\"java\", \"-jar\", \"backend.jar\"]\n</code></pre> <p>Frontend Dockerfile (Angular):</p> <pre><code>FROM node:16 AS build\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN npm run build\n\nFROM nginx:alpine\nCOPY --from=build /app/dist/frontend /usr/share/nginx/html\nEXPOSE 80\n</code></pre> <p>Kubernetes Deployment (k8s-deployment.yml):</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backend\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: backend\n  template:\n    metadata:\n      labels:\n        app: backend\n    spec:\n      containers:\n      - name: backend\n        image: myrepo/backend:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: DB_HOST\n          value: \"mysql-service\"\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: backend-service\nspec:\n  selector:\n    app: backend\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8080\n  type: LoadBalancer\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n      - name: frontend\n        image: myrepo/frontend:latest\n        ports:\n        - containerPort: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: frontend-service\nspec:\n  selector:\n    app: frontend\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: LoadBalancer\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mysql\nspec:\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n      - name: mysql\n        image: mysql:5.7\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          value: \"password\"\n        ports:\n        - containerPort: 3306\n        volumeMounts:\n        - name: mysql-persistent-storage\n          mountPath: /var/lib/mysql\n      volumes:\n      - name: mysql-persistent-storage\n        persistentVolumeClaim:\n          claimName: mysql-pv-claim\n\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mysql-pv-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi\n</code></pre>"},{"location":"docker/docker/#service-interaction","title":"Service Interaction","text":"<ul> <li>Frontend (Angular) makes API calls to <code>backend-service</code></li> <li>Backend (Spring Boot) connects to <code>mysql-service</code></li> <li>Kubernetes DNS resolves service names automatically</li> </ul>"},{"location":"docker/docker/#9-docker-networking-types","title":"9. Docker Networking Types","text":"Network Type Description Use Case Bridge Default network (NAT) Single-host communication Host Shares host's network High-performance needs Overlay Multi-host network Swarm/Kubernetes clusters Macvlan Assigns MAC addresses Legacy apps needing MAC access"},{"location":"docker/docker/#10-docker-volumes","title":"10. Docker Volumes","text":"Volume Type Description Use Case Named Managed by Docker Persistent data Anonymous Auto-removed Temporary data Bind Mount Host directory Development mounts tmpfs Memory-only Sensitive temp data ------------------ ------------------------ --------------------------"},{"location":"docker/docker/#11-docker-logs-and-inspection","title":"11. Docker Logs and Inspection","text":"<pre><code>docker logs &lt;container&gt;        # View logs\ndocker logs -f &lt;container&gt;     # Follow logs in real-time\ndocker exec -it &lt;container&gt; bash  # Enter container's shell\ndocker inspect &lt;container&gt;     # Detailed container info\ndocker stats                   # Show live resource usage\n</code></pre>"},{"location":"docker/docker/#12-docker-security-best-practices","title":"12. Docker Security Best Practices","text":"<ul> <li>Use official images from trusted sources</li> <li>Run containers as non-root user:</li> </ul> <pre><code>USER appuser\n</code></pre> <ul> <li>Scan images for vulnerabilities</li> <li>Limit container capabilities:</li> </ul> <pre><code>docker run --cap-drop=ALL --cap-add=NET_BIND_SERVICE\n</code></pre> <ul> <li>Use secrets for sensitive data</li> <li>Keep Docker Engine and images updated</li> </ul>"},{"location":"docker/docker/#13-docker-in-cicd","title":"13. Docker in CI/CD","text":"<p>Typical CI/CD Pipeline:</p> <ol> <li>Code commit triggers build</li> <li>Docker image is built and tested</li> <li>Image pushed to registry</li> <li>Kubernetes deploys new version</li> <li>Automated rollback if tests fail</li> </ol> <p>GitHub Actions snippet:</p> <pre><code>- name: Build and push\n  uses: docker/build-push-action@v2\n  with:\n    push: true\n    tags: user/app:latest\n</code></pre>"},{"location":"docker/docker/#14-dockerfile-best-practices","title":"14. Dockerfile Best Practices","text":"<ul> <li>Use <code>.dockerignore</code> to exclude unnecessary files</li> <li>Order instructions from least to most frequently changed</li> <li>Use multi-stage builds to reduce image size</li> <li>Pin versions for base images and dependencies</li> <li>Minimize layers by combining <code>RUN</code> commands</li> <li>Use smallest suitable base image (e.g., Alpine Linux)</li> </ul>"},{"location":"docker/docker/#15-cleanup-commands","title":"15. Cleanup Commands","text":"<pre><code>docker system prune           # Remove unused objects\ndocker system prune -a       # Remove all unused images\ndocker volume prune          # Remove unused volumes\ndocker network prune         # Remove unused networks\ndocker rm $(docker ps -aq)   # Remove all stopped containers\n</code></pre>"},{"location":"docker/docker/#16-conclusion-why-docker-is-essential","title":"16. Conclusion: Why Docker is Essential","text":"<p>Docker has become fundamental to modern DevOps because it:</p> <ul> <li>Standardizes application packaging and deployment</li> <li>Enables microservices architecture</li> <li>Facilitates CI/CD pipelines</li> <li>Improves development/production parity</li> <li>Optimizes resource utilization</li> <li>Simplifies scaling and orchestration (with Kubernetes)</li> </ul> <p>When combined with Kubernetes, Docker provides a complete solution for building, shipping, and running distributed applications at scale.</p>"},{"location":"java/AdvancedJava/","title":"\ud83d\udd35 Advanced Java - Collections Framework (With Detailed Examples &amp; Method Definitions)","text":"<p>The Java Collections Framework provides a well-structured set of interfaces and classes to manage groups of objects. It includes data structures such as lists, sets, maps, and associated algorithms.</p>"},{"location":"java/AdvancedJava/#12-collections-framework","title":"\u2705 12. Collections Framework","text":""},{"location":"java/AdvancedJava/#interfaces-list-set-map","title":"\ud83d\udd39 Interfaces: List, Set, Map","text":"<ul> <li>List: An ordered collection that allows duplicate elements.</li> <li>Set: A collection that does not allow duplicate elements.</li> <li>Map: A collection of key-value pairs, where keys are unique.</li> </ul>"},{"location":"java/AdvancedJava/#list-interface","title":"\ud83d\udd38 List Interface","text":""},{"location":"java/AdvancedJava/#arraylist-example","title":"\u27a4 ArrayList Example","text":"<pre><code>import java.util.*;\n\npublic class ArrayListDemo {\n    public static void main(String[] args) {\n        List&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        list.add(\"Java\"); // duplicate allowed\n\n        list.remove(\"Python\"); // Removes \"Python\"\n        System.out.println(list); // Output: [Java, Java]\n    }\n}\n</code></pre> <p>Important Methods of ArrayList:</p> <ul> <li><code>add(E e)</code>: Adds element to the list</li> <li><code>remove(Object o)</code>: Removes first occurrence of the specified element</li> <li><code>get(int index)</code>: Returns the element at the specified position</li> <li><code>set(int index, E element)</code>: Replaces element at the specified position</li> <li><code>size()</code>: Returns number of elements</li> <li><code>clear()</code>: Removes all elements</li> </ul>"},{"location":"java/AdvancedJava/#linkedlist-example","title":"\u27a4 LinkedList Example","text":"<pre><code>import java.util.*;\n\npublic class LinkedListDemo {\n    public static void main(String[] args) {\n        LinkedList&lt;Integer&gt; list = new LinkedList&lt;&gt;();\n        list.add(10);\n        list.addFirst(5);\n        list.addLast(20);\n\n        System.out.println(list); // Output: [5, 10, 20]\n    }\n}\n</code></pre> <p>Important Methods of LinkedList:</p> <ul> <li><code>addFirst(E e)</code>: Inserts at the beginning</li> <li><code>addLast(E e)</code>: Appends at the end</li> <li><code>removeFirst()</code>: Removes the first element</li> <li><code>removeLast()</code>: Removes the last element</li> <li><code>getFirst()</code>, <code>getLast()</code>: Fetches first/last elements</li> </ul>"},{"location":"java/AdvancedJava/#set-interface","title":"\ud83d\udd38 Set Interface","text":""},{"location":"java/AdvancedJava/#hashset-example","title":"\u27a4 HashSet Example","text":"<pre><code>import java.util.*;\n\npublic class HashSetDemo {\n    public static void main(String[] args) {\n        Set&lt;String&gt; set = new HashSet&lt;&gt;();\n        set.add(\"Apple\");\n        set.add(\"Banana\");\n        set.add(\"Apple\"); // duplicate ignored\n\n        System.out.println(set); // Output: [Apple, Banana] (unordered)\n    }\n}\n</code></pre> <p>Methods:</p> <ul> <li><code>add(E e)</code>: Adds element</li> <li><code>remove(Object o)</code>: Removes specified element</li> <li><code>contains(Object o)</code>: Returns true if element exists</li> <li><code>clear()</code>: Clears set</li> <li><code>size()</code>: Returns size</li> </ul>"},{"location":"java/AdvancedJava/#treeset-example","title":"\u27a4 TreeSet Example","text":"<pre><code>import java.util.*;\n\npublic class TreeSetDemo {\n    public static void main(String[] args) {\n        Set&lt;Integer&gt; tree = new TreeSet&lt;&gt;();\n        tree.add(30);\n        tree.add(10);\n        tree.add(20);\n\n        System.out.println(tree); // Output: [10, 20, 30] (sorted)\n    }\n}\n</code></pre> <p>TreeSet maintains elements in sorted order.</p>"},{"location":"java/AdvancedJava/#map-interface","title":"\ud83d\udd38 Map Interface","text":""},{"location":"java/AdvancedJava/#hashmap-example","title":"\u27a4 HashMap Example","text":"<pre><code>import java.util.*;\n\npublic class HashMapDemo {\n    public static void main(String[] args) {\n        Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\n        map.put(1, \"A\");\n        map.put(2, \"B\");\n        map.put(1, \"C\"); // Overwrites key 1\n\n        System.out.println(map); // Output: {1=C, 2=B}\n    }\n}\n</code></pre> <p>Important Methods:</p> <ul> <li><code>put(K key, V value)</code>: Adds entry</li> <li><code>get(Object key)</code>: Retrieves value</li> <li><code>remove(Object key)</code>: Removes key-value pair</li> <li><code>containsKey(Object key)</code>, <code>containsValue(Object value)</code></li> <li><code>keySet()</code>, <code>values()</code>, <code>entrySet()</code></li> </ul>"},{"location":"java/AdvancedJava/#treemap-example","title":"\u27a4 TreeMap Example","text":"<pre><code>import java.util.*;\n\npublic class TreeMapDemo {\n    public static void main(String[] args) {\n        TreeMap&lt;String, Integer&gt; map = new TreeMap&lt;&gt;();\n        map.put(\"C\", 3);\n        map.put(\"A\", 1);\n        map.put(\"B\", 2);\n\n        System.out.println(map); // Output: {A=1, B=2, C=3} (sorted by key)\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#linkedhashmap-example","title":"\u27a4 LinkedHashMap Example","text":"<pre><code>import java.util.*;\n\npublic class LinkedHashMapDemo {\n    public static void main(String[] args) {\n        Map&lt;String, String&gt; map = new LinkedHashMap&lt;&gt;();\n        map.put(\"one\", \"A\");\n        map.put(\"two\", \"B\");\n\n        System.out.println(map); // Output: {one=A, two=B} (insertion order)\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#iterator-and-listiterator","title":"\ud83d\udd38 Iterator and ListIterator","text":""},{"location":"java/AdvancedJava/#iterator","title":"\u27a4 Iterator","text":"<pre><code>import java.util.*;\n\npublic class IteratorDemo {\n    public static void main(String[] args) {\n        List&lt;String&gt; list = Arrays.asList(\"A\", \"B\", \"C\");\n        Iterator&lt;String&gt; it = list.iterator();\n\n        while(it.hasNext()) {\n            System.out.print(it.next() + \" \");\n        }\n        // Output: A B C\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#listiterator-bidirectional","title":"\u27a4 ListIterator (Bidirectional)","text":"<pre><code>import java.util.*;\n\npublic class ListIteratorDemo {\n    public static void main(String[] args) {\n        List&lt;String&gt; list = new ArrayList&lt;&gt;(List.of(\"X\", \"Y\", \"Z\"));\n        ListIterator&lt;String&gt; it = list.listIterator();\n\n        while (it.hasNext()) System.out.print(it.next() + \" \");\n        // Output: X Y Z\n\n        while (it.hasPrevious()) System.out.print(it.previous() + \" \");\n        // Output: Z Y X\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#comparator-vs-comparable","title":"\ud83d\udd38 Comparator vs Comparable","text":""},{"location":"java/AdvancedJava/#comparable-natural-order","title":"\u27a4 Comparable (Natural Order)","text":"<pre><code>class Student implements Comparable&lt;Student&gt; {\n    int id;\n    String name;\n\n    Student(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    public int compareTo(Student s) {\n        return this.id - s.id;\n    }\n\n    public String toString() {\n        return id + \"-\" + name;\n    }\n}\n\npublic class ComparableDemo {\n    public static void main(String[] args) {\n        List&lt;Student&gt; students = new ArrayList&lt;&gt;();\n        students.add(new Student(3, \"Ram\"));\n        students.add(new Student(1, \"Amit\"));\n        students.add(new Student(2, \"Zara\"));\n\n        Collections.sort(students);\n        System.out.println(students); // Output: [1-Amit, 2-Zara, 3-Ram]\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#comparator-custom-order","title":"\u27a4 Comparator (Custom Order)","text":"<pre><code>class Product {\n    String name;\n    int price;\n\n    Product(String name, int price) {\n        this.name = name;\n        this.price = price;\n    }\n\n    public String toString() {\n        return name + \":\" + price;\n    }\n}\n\npublic class ComparatorDemo {\n    public static void main(String[] args) {\n        List&lt;Product&gt; products = new ArrayList&lt;&gt;();\n        products.add(new Product(\"Laptop\", 800));\n        products.add(new Product(\"Mouse\", 50));\n        products.add(new Product(\"Keyboard\", 70));\n\n        products.sort((p1, p2) -&gt; p1.price - p2.price);\n        System.out.println(products); // Output: [Mouse:50, Keyboard:70, Laptop:800]\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#summary-table","title":"\ud83d\udd39 Summary Table","text":"Interface Implementation Ordered Duplicates Sorted Thread-Safe List ArrayList, LinkedList Yes Yes No No Set HashSet, TreeSet No No TreeSet: Yes No Map HashMap, TreeMap, LinkedHashMap No Keys: No TreeMap: Yes No <p>Use Collections Framework to write clean, reusable, and efficient Java code for managing data.</p>"},{"location":"java/AdvancedJava/#13-multithreading-concurrency","title":"\u2705 13. Multithreading &amp; Concurrency","text":""},{"location":"java/AdvancedJava/#thread-creation-extends-thread-vs-implements-runnable","title":"\ud83d\udd38 Thread Creation (extends Thread vs implements Runnable)","text":""},{"location":"java/AdvancedJava/#using-extends-thread","title":"\u27a4 Using <code>extends Thread</code>","text":"<pre><code>class MyThread extends Thread {\n    public void run() {\n        System.out.println(\"Thread running using Thread class\");\n    }\n\n    public static void main(String[] args) {\n        MyThread t = new MyThread();\n        t.start(); // starts the thread\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#using-implements-runnable","title":"\u27a4 Using <code>implements Runnable</code>","text":"<pre><code>class MyRunnable implements Runnable {\n    public void run() {\n        System.out.println(\"Thread running using Runnable\");\n    }\n\n    public static void main(String[] args) {\n        Thread t = new Thread(new MyRunnable());\n        t.start();\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#thread-lifecycle","title":"\ud83d\udd38 Thread Lifecycle","text":"<p>States:</p> <ul> <li>New \u2192 Runnable \u2192 Running \u2192 Waiting/Blocked \u2192 Dead</li> </ul>"},{"location":"java/AdvancedJava/#synchronized-wait-notify-notifyall","title":"\ud83d\udd38 synchronized, wait(), notify(), notifyAll()","text":"<pre><code>class Shared {\n    synchronized void printTable(int n) {\n        for (int i = 1; i &lt;= 5; i++) {\n            System.out.println(n * i);\n        }\n    }\n}\n\nclass MyThread1 extends Thread {\n    Shared s;\n    MyThread1(Shared s) { this.s = s; }\n    public void run() { s.printTable(5); }\n}\n\nclass MyThread2 extends Thread {\n    Shared s;\n    MyThread2(Shared s) { this.s = s; }\n    public void run() { s.printTable(10); }\n}\n</code></pre> <p>wait/notify Example:</p> <pre><code>class Data {\n    private String packet;\n    private boolean transfer = true;\n\n    public synchronized void send(String packet) {\n        while (!transfer) {\n            try { wait(); } catch (InterruptedException e) {}\n        }\n        transfer = false;\n        this.packet = packet;\n        notifyAll();\n    }\n\n    public synchronized String receive() {\n        while (transfer) {\n            try { wait(); } catch (InterruptedException e) {}\n        }\n        transfer = true;\n        notifyAll();\n        return packet;\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#executorservice-callable-future","title":"\ud83d\udd38 ExecutorService, Callable, Future","text":"<pre><code>import java.util.concurrent.*;\n\nclass Task implements Callable&lt;Integer&gt; {\n    public Integer call() throws Exception {\n        return 123;\n    }\n\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        Future&lt;Integer&gt; future = executor.submit(new Task());\n\n        System.out.println(future.get()); // Output: 123\n        executor.shutdown();\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#volatile-reentrantlock-threadlocal","title":"\ud83d\udd38 volatile, ReentrantLock, ThreadLocal","text":""},{"location":"java/AdvancedJava/#volatile","title":"\u27a4 volatile","text":"<pre><code>class VolatileDemo extends Thread {\n    volatile boolean running = true;\n\n    public void run() {\n        while (running) {\n            System.out.println(\"Running\");\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        VolatileDemo v = new VolatileDemo();\n        v.start();\n        Thread.sleep(1000);\n        v.running = false; // Safe visibility due to volatile\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#reentrantlock","title":"\u27a4 ReentrantLock","text":"<pre><code>import java.util.concurrent.locks.ReentrantLock;\n\nclass LockDemo {\n    public static void main(String[] args) {\n        ReentrantLock lock = new ReentrantLock();\n        lock.lock();\n        try {\n            System.out.println(\"Critical section\");\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#threadlocal","title":"\u27a4 ThreadLocal","text":"<pre><code>public class ThreadLocalDemo {\n    static ThreadLocal&lt;Integer&gt; threadLocal = ThreadLocal.withInitial(() -&gt; 1);\n\n    public static void main(String[] args) {\n        Runnable task = () -&gt; {\n            threadLocal.set((int) (Math.random() * 100));\n            System.out.println(Thread.currentThread().getName() + \" : \" + threadLocal.get());\n        };\n\n        new Thread(task).start();\n        new Thread(task).start();\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#14-file-io-and-serialization","title":"\u2705 14. File I/O and Serialization","text":""},{"location":"java/AdvancedJava/#readingwriting-files-filereader-bufferedreader-filewriter-bufferedwriter","title":"\ud83d\udd38 Reading/Writing Files (FileReader, BufferedReader, FileWriter, BufferedWriter)","text":"<pre><code>import java.io.*;\n\npublic class FileIODemo {\n    public static void main(String[] args) throws IOException {\n        // Writing to file\n        FileWriter writer = new FileWriter(\"example.txt\");\n        writer.write(\"Hello World\");\n        writer.close();\n\n        // Reading from file\n        FileReader reader = new FileReader(\"example.txt\");\n        BufferedReader br = new BufferedReader(reader);\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n        br.close();\n    }\n}\n</code></pre> <p>Key Methods:</p> <ul> <li><code>write(String)</code>, <code>close()</code> \u2013 FileWriter</li> <li><code>readLine()</code>, <code>close()</code> \u2013 BufferedReader</li> </ul>"},{"location":"java/AdvancedJava/#streams-and-byte-streams-fileinputstream-fileoutputstream","title":"\ud83d\udd38 Streams and Byte Streams (FileInputStream, FileOutputStream)","text":"<pre><code>import java.io.*;\n\npublic class ByteStreamDemo {\n    public static void main(String[] args) throws IOException {\n        String data = \"Byte stream example\";\n\n        FileOutputStream fos = new FileOutputStream(\"data.txt\");\n        fos.write(data.getBytes());\n        fos.close();\n\n        FileInputStream fis = new FileInputStream(\"data.txt\");\n        int ch;\n        while ((ch = fis.read()) != -1) {\n            System.out.print((char) ch);\n        }\n        fis.close();\n        // Output: Byte stream example\n    }\n}\n</code></pre> <p>Key Methods:</p> <ul> <li><code>write(byte[])</code>, <code>read()</code>, <code>close()</code></li> </ul>"},{"location":"java/AdvancedJava/#serialization-and-transient","title":"\ud83d\udd38 Serialization and <code>transient</code>","text":"<pre><code>import java.io.*;\n\nclass Student implements Serializable {\n    int id;\n    String name;\n    transient int age; // won't be serialized\n\n    Student(int id, String name, int age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;\n    }\n}\n\npublic class SerializationDemo {\n    public static void main(String[] args) throws Exception {\n        Student s = new Student(1, \"John\", 25);\n\n        // Serialize\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"student.ser\"));\n        oos.writeObject(s);\n        oos.close();\n\n        // Deserialize\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"student.ser\"));\n        Student deserialized = (Student) ois.readObject();\n        ois.close();\n\n        System.out.println(deserialized.id + \" \" + deserialized.name + \" \" + deserialized.age);\n        // Output: 1 John 0 (age is transient)\n    }\n}\n</code></pre> <p>Key Concepts:</p> <ul> <li><code>Serializable</code> interface</li> <li><code>transient</code> keyword: prevents field from being serialized</li> </ul>"},{"location":"java/AdvancedJava/#nio-path-files-channel-buffer","title":"\ud83d\udd38 NIO (<code>Path</code>, <code>Files</code>, <code>Channel</code>, <code>Buffer</code>)","text":"<pre><code>import java.nio.file.*;\nimport java.io.IOException;\n\npublic class NioDemo {\n    public static void main(String[] args) throws IOException {\n        Path path = Paths.get(\"nio-example.txt\");\n\n        // Write to file\n        Files.write(path, \"NIO File Content\".getBytes());\n\n        // Read from file\n        String content = Files.readString(path);\n        System.out.println(content);\n        // Output: NIO File Content\n    }\n}\n</code></pre> <p>NIO Classes and Methods:</p> <ul> <li><code>Paths.get(String)</code> \u2013 to create a Path</li> <li><code>Files.readString(Path)</code> \u2013 read content</li> <li><code>Files.write(Path, byte[])</code> \u2013 write content</li> </ul>"},{"location":"java/AdvancedJava/#15-java-memory-model-jvm","title":"\u2705 15. Java Memory Model &amp; JVM","text":""},{"location":"java/AdvancedJava/#jvm-architecture-heap-stack-metaspace","title":"\ud83d\udd38 JVM Architecture (Heap, Stack, Metaspace)","text":"<ul> <li>Heap: Stores objects and class instances (shared).</li> <li>Stack: Stores method calls, local variables (per thread).</li> <li>Metaspace: Replaces PermGen; stores class metadata (shared).</li> </ul> <pre><code>// No direct code demo, but behavior is reflected in memory usage of objects and methods.\nclass Sample {\n    public static void main(String[] args) {\n        int x = 10; // Stored in stack\n        String str = new String(\"Hello\"); // Object in heap\n        System.out.println(str);\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#classloader","title":"\ud83d\udd38 ClassLoader","text":"<p>Responsible for loading classes into memory. Follows 3 main steps:</p> <ul> <li>Bootstrap ClassLoader \u2013 loads core Java classes</li> <li>Extension ClassLoader \u2013 loads JDK extension libraries</li> <li>Application ClassLoader \u2013 loads classes from classpath</li> </ul> <pre><code>public class ClassLoaderDemo {\n    public static void main(String[] args) {\n        System.out.println(String.class.getClassLoader()); // null (bootstrap)\n        System.out.println(ClassLoaderDemo.class.getClassLoader()); // Application classloader\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#garbage-collection-gc-types-serial-g1-zgc","title":"\ud83d\udd38 Garbage Collection (GC Types: Serial, G1, ZGC)","text":"<p>Garbage Collector automatically removes unused objects from memory:</p> <ul> <li>Serial GC \u2013 single-threaded; best for small apps</li> <li>Parallel GC \u2013 multi-threaded; good throughput</li> <li>G1 GC \u2013 low pause time, regionalized heap</li> <li>ZGC / Shenandoah \u2013 very low pause time, scalable</li> </ul> <p>Trigger GC manually:</p> <pre><code>public class GCDemo {\n    public static void main(String[] args) {\n        GCDemo obj = new GCDemo();\n        obj = null;\n        System.gc();\n        // Calls finalize before GC (not guaranteed)\n    }\n\n    protected void finalize() {\n        System.out.println(\"Object is being garbage collected\");\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#finalize-and-object-lifecycle","title":"\ud83d\udd38 finalize() and Object Lifecycle","text":"<ul> <li><code>finalize()</code> is called by GC before object is removed.</li> <li>Not recommended anymore; replaced by Cleaner/PhantomReference in modern Java.</li> </ul> <pre><code>class FinalizeDemo {\n    protected void finalize() {\n        System.out.println(\"finalize() called\");\n    }\n\n    public static void main(String[] args) {\n        FinalizeDemo f = new FinalizeDemo();\n        f = null;\n        System.gc();\n        // Output: finalize() called (maybe)\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#16-inner-classes","title":"\u2705 16. Inner Classes","text":"<p>Java allows you to define classes within classes. These are called inner classes, and they help logically group classes that are only used in one place.</p>"},{"location":"java/AdvancedJava/#member-inner-class","title":"\ud83d\udd38 Member Inner Class","text":"<pre><code>class Outer {\n    class Inner {\n        void display() {\n            System.out.println(\"Member inner class\");\n        }\n    }\n\n    public static void main(String[] args) {\n        Outer.Inner obj = new Outer().new Inner();\n        obj.display(); // Output: Member inner class\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#static-nested-class","title":"\ud83d\udd38 Static Nested Class","text":"<pre><code>class Outer {\n    static class StaticInner {\n        void display() {\n            System.out.println(\"Static nested class\");\n        }\n    }\n\n    public static void main(String[] args) {\n        Outer.StaticInner obj = new Outer.StaticInner();\n        obj.display(); // Output: Static nested class\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#local-inner-class-inside-method","title":"\ud83d\udd38 Local Inner Class (inside method)","text":"<pre><code>class Outer {\n    void outerMethod() {\n        class LocalInner {\n            void display() {\n                System.out.println(\"Local inner class\");\n            }\n        }\n        LocalInner inner = new LocalInner();\n        inner.display();\n    }\n\n    public static void main(String[] args) {\n        new Outer().outerMethod();\n        // Output: Local inner class\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#anonymous-inner-class","title":"\ud83d\udd38 Anonymous Inner Class","text":"<pre><code>abstract class Animal {\n    abstract void sound();\n}\n\npublic class AnonymousInnerDemo {\n    public static void main(String[] args) {\n        Animal a = new Animal() {\n            void sound() {\n                System.out.println(\"Roar\");\n            }\n        };\n        a.sound(); // Output: Roar\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#lambda-expressions-and-functional-interfaces","title":"\ud83d\udd38 Lambda Expressions and Functional Interfaces","text":"<p>A functional interface has exactly one abstract method. Lambdas provide a concise way to represent that method.</p> <pre><code>@FunctionalInterface\ninterface MyFunctional {\n    void show();\n}\n\npublic class LambdaDemo {\n    public static void main(String[] args) {\n        MyFunctional f = () -&gt; System.out.println(\"Lambda Expression\");\n        f.show(); // Output: Lambda Expression\n    }\n}\n</code></pre> <p>Common Functional Interfaces (java.util.function):</p> <ul> <li><code>Consumer&lt;T&gt;</code> \u2013 takes input, returns nothing</li> <li><code>Supplier&lt;T&gt;</code> \u2013 takes nothing, returns output</li> <li><code>Predicate&lt;T&gt;</code> \u2013 boolean test</li> <li><code>Function&lt;T, R&gt;</code> \u2013 takes input, returns output</li> </ul> <pre><code>import java.util.function.*;\n\npublic class BuiltInFunctionalInterfaces {\n    public static void main(String[] args) {\n        Predicate&lt;Integer&gt; isEven = x -&gt; x % 2 == 0;\n        System.out.println(isEven.test(4)); // true\n\n        Consumer&lt;String&gt; printer = s -&gt; System.out.println(s);\n        printer.accept(\"Hello from Consumer\"); // Hello from Consumer\n\n        Supplier&lt;Double&gt; random = () -&gt; Math.random();\n        System.out.println(random.get());\n\n        Function&lt;String, Integer&gt; length = str -&gt; str.length();\n        System.out.println(length.apply(\"Java\")); // 4\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#17-java-8-features","title":"\u2705 17. Java 8+ Features","text":""},{"location":"java/AdvancedJava/#streams-api","title":"\ud83d\udd38 Streams API","text":"<pre><code>import java.util.*;\nimport java.util.stream.*;\n\npublic class StreamDemo {\n    public static void main(String[] args) {\n        List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5);\n\n        list.stream().filter(i -&gt; i % 2 == 0).forEach(System.out::println);\n        // Output: 2 4\n    }\n}\n</code></pre> <p>Key Methods:</p> <ul> <li><code>stream()</code>, <code>filter()</code>, <code>map()</code>, <code>collect()</code>, <code>forEach()</code></li> </ul>"},{"location":"java/AdvancedJava/#optional-class","title":"\ud83d\udd38 Optional Class","text":"<pre><code>import java.util.Optional;\n\npublic class OptionalDemo {\n    public static void main(String[] args) {\n        Optional&lt;String&gt; name = Optional.ofNullable(null);\n        System.out.println(name.orElse(\"No Name\")); // Output: No Name\n    }\n}\n</code></pre> <p>Key Methods:</p> <ul> <li><code>of()</code>, <code>ofNullable()</code>, <code>isPresent()</code>, <code>orElse()</code>, <code>ifPresent()</code></li> </ul>"},{"location":"java/AdvancedJava/#foreach-map-filter-reduce","title":"\ud83d\udd38 forEach, map, filter, reduce","text":"<pre><code>import java.util.*;\nimport java.util.stream.*;\n\npublic class StreamOps {\n    public static void main(String[] args) {\n        List&lt;Integer&gt; nums = Arrays.asList(1, 2, 3, 4);\n\n        nums.forEach(System.out::println); // forEach\n\n        List&lt;Integer&gt; doubled = nums.stream().map(n -&gt; n * 2).collect(Collectors.toList());\n        System.out.println(doubled); // [2, 4, 6, 8]\n\n        int sum = nums.stream().reduce(0, Integer::sum);\n        System.out.println(sum); // 10\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#date-and-time-api-javatime","title":"\ud83d\udd38 Date and Time API (<code>java.time</code>)","text":"<pre><code>import java.time.*;\n\npublic class DateTimeDemo {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.now();\n        LocalTime time = LocalTime.now();\n        LocalDateTime dateTime = LocalDateTime.now();\n\n        System.out.println(date);\n        System.out.println(time);\n        System.out.println(dateTime);\n    }\n}\n</code></pre> <p>Key Classes:</p> <ul> <li><code>LocalDate</code>, <code>LocalTime</code>, <code>LocalDateTime</code>, <code>Period</code>, <code>Duration</code></li> </ul>"},{"location":"java/AdvancedJava/#method-references-and-lambda-expressions","title":"\ud83d\udd38 Method References and Lambda Expressions","text":"<pre><code>import java.util.*;\n\npublic class MethodRefDemo {\n    public static void print(String s) {\n        System.out.println(s);\n    }\n\n    public static void main(String[] args) {\n        List&lt;String&gt; list = Arrays.asList(\"Java\", \"Python\", \"C++\");\n        list.forEach(MethodRefDemo::print); // Method Reference\n\n        list.forEach(s -&gt; System.out.println(s)); // Lambda Expression\n    }\n}\n</code></pre>"},{"location":"java/AdvancedJava/#default-and-static-methods-in-interfaces","title":"\ud83d\udd38 default and static methods in interfaces","text":"<pre><code>interface MyInterface {\n    default void show() {\n        System.out.println(\"Default method\");\n    }\n\n    static void display() {\n        System.out.println(\"Static method in interface\");\n    }\n}\n\npublic class InterfaceDemo implements MyInterface {\n    public static void main(String[] args) {\n        new InterfaceDemo().show(); // Output: Default method\n        MyInterface.display(); // Output: Static method in interface\n    }\n}\n</code></pre>"},{"location":"java/JavaBasics/","title":"\ud83e\udde9 Java Basics","text":""},{"location":"java/JavaBasics/#1-java-basics-explained-simply","title":"\u2705 1. Java Basics (Explained Simply)","text":""},{"location":"java/JavaBasics/#what-is-java-features","title":"\ud83d\udd38 What is Java? (Features)","text":"<p>Java is a programming language used to build applications (websites, mobile apps, games, etc.). It's also a platform because it runs on the Java Virtual Machine (JVM).</p>"},{"location":"java/JavaBasics/#key-features","title":"Key Features:","text":"<ul> <li>\ud83e\udde0 Simple \u2013 Easy to learn and use.</li> <li>\ud83d\udd04 Object-Oriented \u2013 Uses objects and classes to organize code.</li> <li>\ud83d\udcbb Platform Independent \u2013 Runs on any device with a JVM (<code>Write Once, Run Anywhere</code>).</li> <li>\ud83d\udee1\ufe0f Secure \u2013 Protects against viruses and memory access issues.</li> <li>\u2699\ufe0f Robust \u2013 Handles errors and manages memory well.</li> <li>\ud83d\udd00 Multithreaded \u2013 Can perform multiple tasks at once.</li> </ul>"},{"location":"java/JavaBasics/#installing-jdk-jvm-jre","title":"\ud83d\udd38 Installing JDK, JVM, JRE","text":"<ul> <li>JDK (Java Development Kit): Tools needed to write and run Java programs (includes compiler, debugger, etc.).</li> <li>JRE (Java Runtime Environment): Allows you to run Java programs (includes JVM + libraries).</li> <li>JVM (Java Virtual Machine): Executes Java bytecode on your computer.</li> </ul> <p>\u2705 To code in Java, install the JDK (which includes both JRE and JVM).</p>"},{"location":"java/JavaBasics/#java-program-structure","title":"\ud83d\udd38 Java Program Structure","text":"<p>A typical Java program looks like this:</p> <pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}\n\n</code></pre> <ul> <li>class HelloWorld \u2192 Every program is inside a class.</li> <li>main() method \u2192 Entry point; program starts here.</li> <li>System.out.println() \u2192 Prints to the console.</li> </ul>"},{"location":"java/JavaBasics/#writing-your-first-program-helloworld","title":"\ud83d\udd38 Writing Your First Program (HelloWorld)","text":"<p>Steps:</p> <ol> <li>Open a text editor or IDE (like VS Code or IntelliJ).</li> <li>Write the <code>HelloWorld</code> code shown above.</li> <li>Save the file as <code>HelloWorld.java</code>.</li> </ol>"},{"location":"java/JavaBasics/#compilation-and-execution-flow","title":"\ud83d\udd38 Compilation and Execution Flow","text":"<p>\u2705 Compile: Run the following command:  </p> <pre><code>javac HelloWorld.java\n</code></pre> <p>\u27a1\ufe0f Converts source code into bytecode (HelloWorld.class)</p> <p>\u25b6\ufe0f Run: Run the following command:</p> <pre><code>java HelloWorld\n</code></pre> <p>\u27a1\ufe0f JVM executes the program and prints:</p> <pre><code>Hello, world!\n</code></pre> Step Output Source Code <code>.java</code> file Compilation <code>.class</code> bytecode Execution (JVM) Program runs ---"},{"location":"java/JavaBasics/#2-data-types-and-variables-explained-simply","title":"\u2705 2. Data Types and Variables (Explained Simply)","text":""},{"location":"java/JavaBasics/#primitive-data-types-int-float-char-etc","title":"\ud83d\udd38 Primitive Data Types (<code>int</code>, <code>float</code>, <code>char</code>, etc.)","text":"<p>These are basic types built into Java. They store single values and are not objects.</p> Type Example Description <code>int</code> <code>int age = 25;</code> Stores whole numbers <code>float</code> <code>float pi = 3.14f;</code> Stores decimal numbers (use <code>f</code>) <code>double</code> <code>double d = 10.56;</code> Stores large decimal numbers <code>char</code> <code>char grade = 'A';</code> Stores a single character <code>boolean</code> <code>boolean isOn = true;</code> Stores true or false <code>byte</code> <code>byte b = 100;</code> Very small integer (1 byte) <code>short</code> <code>short s = 20000;</code> Small integer (2 bytes) <code>long</code> <code>long l = 100000L;</code> Large integer (add <code>L</code> at the end)"},{"location":"java/JavaBasics/#reference-data-types","title":"\ud83d\udd38 Reference Data Types","text":"<p>Reference types store the memory address of an object.</p> <p>Examples:</p> <pre><code>String name = \"John\";\nint[] numbers = {1, 2, 3};\n</code></pre> <p>They are used for objects like:</p>"},{"location":"java/JavaBasics/#type-casting-implicit-and-explicit","title":"\ud83d\udd38 Type Casting (Implicit and Explicit)","text":"<p>Type Casting means converting one data type into another.</p> <p>\u2705 Implicit Casting (Widening Conversion) Automatically converts a smaller type to a larger type. No data is lost.</p> <pre><code>int a = 10;\ndouble b = a;  // int is automatically converted to double\n</code></pre> <p>\u2705 Explicit Casting (Narrowing Conversion) Manually converts a larger type to a smaller type. May lose data.</p> <pre><code>double x = 10.5;\nint y = (int) x; // double is cast to int, decimal part is lost\n</code></pre> <p>\ud83d\udd12 <code>final</code> \u2013 Used to create constants. Once assigned, the value cannot be changed.</p> <p>\u2705 Example:</p> <pre><code>final int MAX_USERS = 100;// MAX_USERS = 200; // \u274c Error: cannot assign a value to final variable\n</code></pre> <p>\ud83c\udf10 <code>static</code> \u2013 Belongs to the class, not to individual objects. It is shared among all instances of the class.</p> <p>\u2705 Example:</p> <pre><code>class Counter {\n    static int count = 0;  // static variable shared by all instances\n\n    Counter() {\n        count++;           // increment count whenever an object is created\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Counter c1 = new Counter();\n        Counter c2 = new Counter();\n        Counter c3 = new Counter();\n\n        System.out.println(Counter.count); // Output: 3\n    }\n}\n</code></pre> <p>\ud83d\udcdd Explanation:</p> <ul> <li>The count variable is marked as static, so it's not tied to a specific object.</li> <li>No matter how many objects (c1, c2, c3) are created, they share the same static variable.</li> <li>This is why Counter.count gives 3 \u2014 the total number of objects created.</li> </ul> <p>\u2728 <code>var</code> (Java 10+) \u2013 Automatically detects the data type based on the assigned value.</p> <p>\u2705 Example:</p> <pre><code>var name = \"Alice\";   // treated as String\nvar age = 30;         // treated as int\nvar price = 99.99;    // treated as double\n</code></pre> <p>\u2705Note: var can only be used inside methods, not for class-level variables or fields. \u274cInvalid Usage:</p> <pre><code>class Test {\n    var a = 10;  // \u274c Error: 'var' is not allowed at class level\n}\n</code></pre> <p>\u2705Valid Usage:</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        var message = \"Hello Java\";  // \u2705 OK inside method\n    }\n}\n</code></pre>"},{"location":"java/JavaBasics/#3-operators-explained-simply","title":"\u2705 3. Operators (Explained Simply)","text":"<p>Java operators are special symbols that perform operations on variables and values.</p>"},{"location":"java/JavaBasics/#arithmetic-operators","title":"\ud83d\udd38 Arithmetic Operators","text":"<p>Used for basic math operations.</p> Operator Description Example Result <code>+</code> Addition <code>5 + 3</code> <code>8</code> <code>-</code> Subtraction <code>5 - 3</code> <code>2</code> <code>*</code> Multiplication <code>5 * 3</code> <code>15</code> <code>/</code> Division <code>10 / 2</code> <code>5</code> <code>%</code> Modulus (remainder) <code>10 % 3</code> <code>1</code>"},{"location":"java/JavaBasics/#relational-comparison-operators","title":"\ud83d\udd38 Relational (Comparison) Operators","text":"<p>Used to compare two values. Returns <code>true</code> or <code>false</code>.</p> Operator Description Example Result <code>==</code> Equal to <code>5 == 5</code> <code>true</code> <code>!=</code> Not equal to <code>5 != 3</code> <code>true</code> <code>&gt;</code> Greater than <code>5 &gt; 3</code> <code>true</code> <code>&lt;</code> Less than <code>5 &lt; 3</code> <code>false</code> <code>&gt;=</code> Greater than or equal <code>5 &gt;= 5</code> <code>true</code> <code>&lt;=</code> Less than or equal <code>4 &lt;= 3</code> <code>false</code>"},{"location":"java/JavaBasics/#logical-operators","title":"\ud83d\udd38 Logical Operators","text":"<p>Used to combine multiple boolean expressions.</p> Operator Description Example Result <code>&amp;&amp;</code> Logical AND <code>true &amp;&amp; false</code> <code>false</code> <code>||</code> Logical OR <code>true || false</code> <code>true</code> <code>!</code> Logical NOT <code>!true</code> <code>false</code>"},{"location":"java/JavaBasics/#assignment-and-unary-operators","title":"\ud83d\udd38 Assignment and Unary Operators","text":"<p>Assignment Operators: Used to assign values to variables.</p> <pre><code>int x = 10;\nx += 5;  // same as x = x + 5;\n</code></pre> Operator Meaning <code>=</code> Assign <code>+=</code> Add and assign <code>-=</code> Subtract and assign <code>*=</code> Multiply and assign <code>/=</code> Divide and assign <code>%=</code> Modulus and assign --- ### \ud83d\udd38 Unary Operators <p>Used with a single operand to perform operations like increment, decrement, or negation.</p> Operator Description Example Result <code>+</code> Unary plus <code>+x</code> <code>+10</code> <code>-</code> Unary minus <code>-x</code> <code>-10</code> <code>++</code> Increment <code>x++</code> <code>x + 1</code> <code>--</code> Decrement <code>x--</code> <code>x - 1</code> <code>!</code> Logical NOT <code>!true</code> <code>false</code>"},{"location":"java/JavaBasics/#ternary-operator","title":"\ud83d\udd38 Ternary Operator","text":"<p>Used as a shorthand for if-else statements.</p> <p>\u2705 Example:</p> <pre><code>int age = 18;\nString result = (age &gt;= 18) ? \"Adult\" : \"Minor\";\n</code></pre> <p>\u2705 If the condition is true, it returns <code>\"Adult\"</code>, else <code>\"Minor\"</code>.</p> <p>\ud83d\udccc Syntax:</p> <pre><code>(condition) ? value_if_true : value_if_false;\n\n</code></pre>"},{"location":"java/JavaBasics/#bitwise-operators","title":"\ud83d\udd38 Bitwise Operators","text":"<p>Used for operations on bits (binary values).</p> Operator Description Example <code>&amp;</code> Bitwise AND <code>a &amp; b</code> <code>|</code> Bitwise OR <code>a | b</code> <code>^</code> Bitwise XOR <code>a ^ b</code> <code>~</code> Bitwise Complement <code>~a</code> <code>&lt;&lt;</code> Left shift <code>a &lt;&lt; 2</code> <code>&gt;&gt;</code> Right shift <code>a &gt;&gt; 2</code> <p>\ud83d\udcdd Explanation: - <code>a &amp; b</code>: Bit is 1 only if both bits are 1. - <code>a | b</code>: Bit is 1 if either bit is 1. - <code>a ^ b</code>: Bit is 1 if bits are different. - <code>~a</code>: Inverts (flips) all bits. - <code>a &lt;&lt; n</code>: Shifts bits left by <code>n</code> (multiplies by 2\u207f). - <code>a &gt;&gt; n</code>: Shifts bits right by <code>n</code> (divides by 2\u207f).</p>"},{"location":"java/JavaBasics/#precedence-and-associativity","title":"\ud83d\udd38 Precedence and Associativity","text":"<p>Operator precedence defines the order in which operators are evaluated.</p> <p>\u2705 Higher precedence operators are evaluated before lower precedence ones.</p> <p>\ud83d\udccc Example:</p> <pre><code>int result = 10 + 2 * 5;  // result = 10 + (2 * 5) = 20\n</code></pre>"},{"location":"java/JavaBasics/#4-control-statements","title":"\u2705 4. Control Statements","text":"<p>Control statements allow the program to make decisions and repeat actions.</p>"},{"location":"java/JavaBasics/#if-else-if-else","title":"\ud83d\udd38 <code>if</code>, <code>else if</code>, <code>else</code>","text":"<p>Used for decision-making based on conditions.</p> <pre><code>int age = 18;\n\nif (age &lt; 18) {\n    System.out.println(\"Minor\");\n} else if (age == 18) {\n    System.out.println(\"Just became adult\");\n} else {\n    System.out.println(\"Adult\");\n}\n</code></pre> <p>\u2705 The first matching condition is executed, others are skipped.</p>"},{"location":"java/JavaBasics/#switch-statement","title":"\ud83d\udd38 <code>switch</code> Statement","text":"<p>Used to select one of many code blocks to be executed.</p> <pre><code>int day = 2;\n\nswitch (day) {\n    case 1: System.out.println(\"Sunday\"); break;\n    case 2: System.out.println(\"Monday\"); break;\n    default: System.out.println(\"Invalid day\");\n}\n</code></pre> <p>\u2705 <code>break</code> prevents fall-through to next cases.</p>"},{"location":"java/JavaBasics/#loops-while-do-while-for","title":"\ud83d\udd38 Loops (<code>while</code>, <code>do-while</code>, <code>for</code>)","text":"<p>Used to repeat a block of code.</p> <p>\ud83d\udd39 <code>while</code> loop \u2013 checks condition before execution:</p> <pre><code>int i = 0;\nwhile (i &lt; 5) {\n    System.out.println(i);\n    i++;\n}\n</code></pre> <p>\ud83d\udd39 <code>do-while</code> loop \u2013 runs the code at least once, checks condition after:</p> <pre><code>int i = 0;\ndo {\n    System.out.println(i);\n    i++;\n} while (i &lt; 5);\n</code></pre> <p>\ud83d\udd39 <code>for</code> loop \u2013 most common, compact form:</p> <pre><code>for (int i = 0; i &lt; 5; i++) {\n    System.out.println(i);\n}\n</code></pre>"},{"location":"java/JavaBasics/#break-continue-return","title":"\ud83d\udd38 <code>break</code>, <code>continue</code>, <code>return</code>","text":"<p>\ud83d\udd39 <code>break</code> \u2013 exits the current loop or switch:</p> <pre><code>for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) break;\n    System.out.println(i);\n}\n// Output: 1 2\n</code></pre> <p>\ud83d\udd39 <code>continue</code> \u2013 skips the current iteration:</p> <pre><code>for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) continue;\n    System.out.println(i);\n}\n// Output: 1 2 4 5\n</code></pre> <p>\ud83d\udd39 <code>return</code> \u2013 exits from the method completely:</p> <pre><code>public void greet() {\n    System.out.println(\"Hello\");\n    return;\n    // Code here won\u2019t execute\n}\n</code></pre>"},{"location":"java/JavaBasics/#5-arrays","title":"\u2705 5. Arrays","text":"<p>Arrays store multiple values of the same type in a single variable.</p>"},{"location":"java/JavaBasics/#1d-arrays","title":"\ud83d\udd38 1D Arrays","text":"<p>A linear collection of elements.</p> <pre><code>int[] numbers = {10, 20, 30, 40};\nSystem.out.println(numbers[0]); // Output: 10\n</code></pre> <p>You can also initialize with size:</p> <pre><code>int[] arr = new int[5];  // default values = 0\narr[0] = 100;\n</code></pre>"},{"location":"java/JavaBasics/#2d-arrays","title":"\ud83d\udd38 2D Arrays","text":"<p>An array of arrays (like a matrix or table):</p> <pre><code>int[][] matrix = {\n    {1, 2, 3},\n    {4, 5, 6}\n};\n\nSystem.out.println(matrix[1][2]);  // Output: 6\n</code></pre>"},{"location":"java/JavaBasics/#array-traversal","title":"\ud83d\udd38 Array Traversal","text":"<p>Use for or for-each loop:</p> <pre><code>int[] arr = {10, 20, 30};\nfor (int i = 0; i &lt; arr.length; i++) {\n    System.out.println(arr[i]);\n}\n\n// For-each loop\nfor (int num : arr) {\n    System.out.println(num);\n}\n\n</code></pre>"},{"location":"java/JavaBasics/#array-vs-arraylist","title":"\ud83d\udd38 Array vs ArrayList","text":"Feature Array ArrayList Fixed Size Yes No (can grow/shrink) Type Can store primitives Stores objects only (e.g. <code>Integer</code>) Performance Faster Slightly slower (dynamic resizing) Syntax <code>int[] arr = new int[5];</code> <code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</code> --- ### \u2705 6. Methods Methods are blocks of code that perform specific tasks. They improve code reusability. ___ #### \ud83d\udd38 Defining and Calling Methods <pre><code>public class Main {\n    static void greet() {\n        System.out.println(\"Hello!\");\n    }\n\n    public static void main(String[] args) {\n        greet();  // calling the method\n    }\n}\n</code></pre>"},{"location":"java/JavaBasics/#method-overloading","title":"\ud83d\udd38 Method Overloading","text":"<p>Multiple methods with same name but different parameters:</p> <pre><code>void greet() {\n    System.out.println(\"Hello\");\n}\n\nvoid greet(String name) {\n    System.out.println(\"Hello \" + name);\n}\n</code></pre>"},{"location":"java/JavaBasics/#return-keyword","title":"\ud83d\udd38 return Keyword","text":"<p>Used to return a value from a method:</p> <pre><code>int add(int a, int b) {\n    return a + b;\n}\n</code></pre>"},{"location":"java/JavaBasics/#pass-by-value","title":"\ud83d\udd38 Pass-by-Value","text":"<p>Java uses pass-by-value, meaning copies of variables are passed to methods:</p> <pre><code>void changeValue(int x) {\n    x = 50;\n}\n\nint a = 10;\nchangeValue(a);\n// a is still 10 (not changed)\n</code></pre> <p>For objects, the reference is passed by value, so internal fields can still be changed.</p> <pre><code>void updateName(Person p) {\n    p.name = \"Alice\";\n}\n</code></pre>"},{"location":"java/JavaOOps/","title":"\ud83d\udfe1 Intermediate Java Concepts \u2013 Full Detailed Notes with Examples","text":""},{"location":"java/JavaOOps/#7-object-oriented-programming-oop","title":"\u2705 7. Object-Oriented Programming (OOP)","text":""},{"location":"java/JavaOOps/#classes-and-objects","title":"\ud83d\udd39 Classes and Objects","text":"<p>Class: - A class is a blueprint or template that defines the structure and behavior (fields and methods) of objects. - It does not hold any real data itself until instantiated.</p> <p>Object: - An object is a real instance of a class. - It has its own memory space and contains real values for the properties defined in the class.</p>"},{"location":"java/JavaOOps/#why-use-classes-and-objects","title":"\ud83e\udde0 Why use Classes and Objects?","text":"<ul> <li>To model real-world entities in code.</li> <li>Promote reusability and scalability by defining a structure that can be reused to create multiple objects.</li> </ul>"},{"location":"java/JavaOOps/#example-in-java","title":"\ud83e\uddfe Example in Java:","text":"<pre><code>// Defining a class\nclass Car {\n    String brand;\n    int speed;\n\n    void drive() {\n        System.out.println(\"Driving...\");\n    }\n}\n\n// Using the class to create objects\npublic class Main {\n    public static void main(String[] args) {\n        Car myCar = new Car();     // Creating an object of Car\n        myCar.brand = \"Toyota\";    // Assigning values\n        myCar.speed = 120;\n\n        myCar.drive();             // Calling a method\n        System.out.println(\"Brand: \" + myCar.brand);\n        System.out.println(\"Speed: \" + myCar.speed + \" km/h\");\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#constructors-default-parameterized","title":"\ud83d\udd39 Constructors (default, parameterized)","text":"<p>What is a Constructor? - A constructor is a special method used to initialize objects. - It is called automatically when an object is created. - Constructor name must match the class name. - It does not have a return type (not even <code>void</code>).</p>"},{"location":"java/JavaOOps/#types-of-constructors","title":"\ud83e\udde9 Types of Constructors","text":"<ol> <li>Default Constructor</li> <li>Takes no parameters.</li> <li>If you don\u2019t write any constructor, Java automatically provides one.</li> </ol> <pre><code>class Student {\n    String name;\n\n    // Default constructor\n    Student() {\n        name = \"Unknown\";\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        Student s = new Student();      // Calls default constructor\n        System.out.println(s.name);     // Output: Unknown\n    }\n}\n</code></pre> <ol> <li>Parameterized  Constructor</li> <li>Accepts parameters to initialize object with specific values.</li> </ol> <pre><code>class Student {\n    String name;\n\n    // Parameterized constructor\n    Student(String name) {\n        this.name = name;\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        Student s = new Student(\"Alice\");\n        System.out.println(s.name);     // Output: Alice\n    }\n}\n</code></pre> <p>#### Key Points: - A class can have multiple constructors (overloaded constructors). - If any constructor is defined explicitly, Java does not provide a default one automatically. - You can use constructor overloading to initialize objects in different ways.</p> <pre><code>class Student {\n    String name;\n    int age;\n\n    // Overloaded constructors\n    Student() {\n        name = \"Unknown\";\n        age = 0;\n    }\n\n    Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#7-object-oriented-programming-oop_1","title":"\u2705 7. Object-Oriented Programming (OOP)","text":""},{"location":"java/JavaOOps/#this-keyword","title":"\ud83d\udd39 <code>this</code> Keyword","text":"<p>What is <code>this</code>? - <code>this</code> is a reference variable in Java that refers to the current object. - It is used inside instance methods or constructors to refer to the current object's fields or methods.</p>"},{"location":"java/JavaOOps/#why-use-this","title":"\ud83e\udde9 Why use <code>this</code>?","text":"<ol> <li>To differentiate between instance variables and parameters with the same name</li> </ol> <pre><code>class Student {\n    String name;\n\n    // Constructor with parameter same as instance variable\n    Student(String name) {\n        this.name = name;  // 'this.name' refers to instance variable\n    }\n}\n</code></pre> <ol> <li>To call one constructor from another (constructor chaining)</li> </ol> <pre><code>class Student {\n    String name;\n    int age;\n\n    // Constructor 1\n    Student(String name) {\n        this(name, 18);  // calls Constructor 2\n    }\n\n    // Constructor 2\n    Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n</code></pre> <ol> <li>To pass the current object as an argument</li> </ol> <pre><code>class Student {\n    void display(Student s) {\n        System.out.println(\"Method received object: \" + s);\n    }\n\n    void callDisplay() {\n        display(this);  // passing current object\n    }\n}\n</code></pre> <ol> <li>To return the current object</li> </ol> <pre><code>class Student {\n    String name;\n\n    Student setName(String name) {\n        this.name = name;\n        return this;\n    }\n\n    void print() {\n        System.out.println(\"Name: \" + name);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Student s = new Student();\n        s.setName(\"Rahul\").print();  // method chaining\n    }\n}\n</code></pre> <p>#### Key Points: - this is only used within non-static context (inside instance methods or constructors). - It improves readability, prevents confusion, and enables constructor chaining. - You cannot use this in a static method since static methods belong to the class, not the object.</p>"},{"location":"java/JavaOOps/#encapsulation-getterssetters","title":"\ud83d\udd39 Encapsulation (getters/setters)","text":"<p>Definition: Encapsulation is the process of binding data (fields) and code (methods) together and restricting access to some components. This is achieved using access modifiers like <code>private</code>, <code>public</code>, and getter/setter methods.</p> <p>Purpose: - Protect data from unauthorized access. - Control how data is accessed/modified.</p> <p>Example:</p> <pre><code>class Person {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#inheritance-extends-super","title":"\ud83d\udd39 Inheritance (extends, super)","text":"<p>Definition: Inheritance allows a class (subclass) to inherit fields and methods from another class (superclass).</p>"},{"location":"java/JavaOOps/#keywords","title":"Keywords:","text":"<p>extends: Inherits from a class.</p> <p>super: Refers to parent class.</p> <pre><code>class Animal {\n    void sound() {\n        System.out.println(\"Animal sound\");\n    }\n}\n\nclass Dog extends Animal {\n    void sound() {\n        super.sound();\n        System.out.println(\"Dog barks\");\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#polymorphism-overloading-overriding","title":"\ud83d\udd39 Polymorphism (Overloading &amp; Overriding)","text":"<p>Definition: Polymorphism means many forms. It allows the same method name to behave differently based on context.</p> <ol> <li>Method Overloading (Compile-time)</li> </ol> <pre><code>class Calculator {\n    int add(int a, int b) { return a + b; }\n    double add(double a, double b) { return a + b; }\n}\n</code></pre> <ol> <li>Method Overriding (Runtime)</li> </ol> <pre><code>class Animal {\n    void makeSound() {\n        System.out.println(\"Generic sound\");\n    }\n}\n\nclass Cat extends Animal {\n    void makeSound() {\n        System.out.println(\"Meow\");\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#abstraction-abstract-class-interfaces","title":"\ud83d\udd39 Abstraction (abstract class, interfaces)","text":"<p>Definition: Abstraction means hiding internal implementation and showing only essential details.</p> <ol> <li>Abstract Class:</li> </ol> <pre><code>abstract class Shape {\n    abstract void draw();\n    void display() {\n        System.out.println(\"Shape displayed\");\n    }\n}\n\nclass Circle extends Shape {\n    void draw() {\n        System.out.println(\"Drawing circle\");\n    }\n}\n</code></pre> <ol> <li>interface</li> </ol> <pre><code>interface Vehicle {\n    void start();\n}\n\nclass Bike implements Vehicle {\n    public void start() {\n        System.out.println(\"Bike started\");\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#access-modifiers-public-vs-private-vs-protected-vs-default","title":"\ud83d\udd39 Access Modifiers: public vs private vs protected vs default","text":"Modifier Class Package Subclass World <code>private</code> \u2705 \u274c \u274c \u274c (default) \u2705 \u2705 \u274c \u274c <code>protected</code> \u2705 \u2705 \u2705 \u274c <code>public</code> \u2705 \u2705 \u2705 \u2705 ___ \u2705 = Accessible \u274c = Not Accessible <p>private: Accessible only within the same class.</p> <p>default (no modifier): Accessible within the same package.</p> <p>protected: Accessible in same package and in subclasses.</p> <p>public: Accessible from anywhere.</p>"},{"location":"java/JavaOOps/#2-super-vs-this","title":"\ud83d\udd39 2. super vs this","text":"Feature <code>this</code> <code>super</code> Refers to Current object Immediate parent class Used in Instance methods &amp; constructors Subclass constructors &amp; overridden methods Constructor Calls current class constructor Calls parent class constructor Field access Access current class fields Access parent class fields <pre><code>this.name = name;         // Refers to current class field\nsuper.name = name;        // Refers to parent class field\n</code></pre>"},{"location":"java/JavaOOps/#3-overloading-vs-overriding","title":"\ud83d\udd39 3. Overloading vs Overriding","text":"Feature Overloading Overriding Definition Same method name, different parameters Subclass provides specific implementation of parent method Compile-time/Runtime Compile-time Runtime Inheritance Not required Required Access Modifier Can be anything Cannot be more restrictive than parent Static Methods Can be overloaded Cannot be overridden (only hidden) ___ <p>Example Overloading:</p> <pre><code>void display() {}\nvoid display(int a) {}\n</code></pre> <p>Example Overriding:</p> <pre><code>class A { void display() {} }\nclass B extends A { void display() {} }\n</code></pre>"},{"location":"java/JavaOOps/#4-abstract-class-vs-interface","title":"\ud83d\udd39 4. Abstract Class vs Interface","text":"Feature Abstract Class Interface Type Partial abstraction Full abstraction (Java 7) Keywords <code>abstract class</code> <code>interface</code> Constructors Allowed Not allowed Variables Can be final, static, non-static <code>public static final</code> only Methods Can have method body Cannot (Java 7), default/static allowed in Java 8+ Multiple Inheritance Not supported Supported Use-case Common base class with shared code Common contract for unrelated classes ___ Abstract Class Example: <pre><code>abstract class Shape {\n    abstract void draw();\n    void info() { System.out.println(\"Shape\"); }\n}\n</code></pre> <p>Interface Example:</p> <pre><code>interface Drawable {\n    void draw();\n}\n</code></pre>"},{"location":"java/JavaOOps/#5-static-vs-non-static","title":"\ud83d\udd39 5. Static vs Non-static","text":"Feature <code>static</code> Non-static (instance) Belongs to Class Object Accessed by ClassName or object Only by object Memory Allocated once in class area Allocated with each object Can access Only static members Static + instance members Used for Utilities, constants, shared logic Object-specific logic ___ <pre><code>class Example {\n    static int count = 0;           // Shared among all instances\n    int id;                         // Separate for each object\n\n    static void printCount() {\n        System.out.println(count);\n    }\n\n    void printId() {\n        System.out.println(id);\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#8-access-modifiers","title":"\u2705 8. Access Modifiers","text":"<p>Java provides four types of access modifiers to set the visibility or accessibility of classes, methods, and variables.</p>"},{"location":"java/JavaOOps/#types-of-access-modifiers","title":"\ud83d\udd39 Types of Access Modifiers","text":"Modifier Class Package Subclass (different package) World <code>private</code> \u2705 \u274c \u274c \u274c default \u2705 \u2705 \u274c \u274c <code>protected</code> \u2705 \u2705 \u2705 \u274c <code>public</code> \u2705 \u2705 \u2705 \u2705 <p>\u2705 = Accessible | \u274c = Not Accessible</p>"},{"location":"java/JavaOOps/#1-private","title":"\ud83d\udd39 1. <code>private</code>","text":"<ul> <li>Accessible only within the same class.</li> <li>Not accessible from outside the class, even in the same package.</li> </ul> <p>Example:</p> <pre><code>class A {\n    private int data = 40;\n\n    private void msg() {\n        System.out.println(\"Hello private\");\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#2-default-no-modifier","title":"\ud83d\udd39 2. <code>default</code> (no modifier)","text":"<ul> <li>Accessible only within the same package.</li> <li>Not accessible from outside the package. Example:</li> </ul> <pre><code>class A {  // default class\n    int data = 50;  // default field\n\n    void msg() {    // default method\n        System.out.println(\"Default access\");\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#3protected","title":"3.<code>protected</code>","text":"<ul> <li>Accessible within the same package.</li> <li>Accessible outside the package only via inheritance. Example:</li> </ul> <pre><code>package package1;\npublic class A {\n    protected void msg() {\n        System.out.println(\"Hello protected\");\n    }\n}\n\npackage package2;\nimport package1.A;\n\nclass B extends A {\n    public static void main(String args[]) {\n        B obj = new B();\n        obj.msg();  // Accessible because B extends A\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#4-public","title":"\ud83d\udd39 4. <code>public</code>","text":"<ul> <li>Accessible from anywhere in the program.</li> <li>No restriction on access. Example:</li> </ul> <pre><code>public class A {\n    public int data = 100;\n\n    public void msg() {\n        System.out.println(\"Hello public\");\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#key-notes","title":"Key Notes","text":"<ul> <li>Use <code>private</code> for data hiding (encapsulation).</li> <li>Use <code>public</code> for APIs or global access.</li> <li>Use <code>protected</code> for access in child classes across packages.</li> <li><code>default</code> is package-private and should be used for package-level scope.</li> </ul>"},{"location":"java/JavaOOps/#9-string-handling","title":"\u2705 9. String Handling","text":"<p>String handling is a crucial part of Java. Java provides various classes like <code>String</code>, <code>StringBuilder</code>, and <code>StringBuffer</code> to work with strings efficiently.</p>"},{"location":"java/JavaOOps/#string-class-and-common-methods","title":"\ud83d\udd39 String Class and Common Methods","text":"<p>String in Java is an object that represents a sequence of characters. It is immutable, meaning once created, its value cannot be changed.</p> <p>Common Methods:</p> <pre><code>String s = \"Hello, World!\";\n\ns.length();              // Returns length of string\ns.charAt(0);             // Returns character at index 0 =&gt; 'H'\ns.substring(0, 5);       // Returns \"Hello\"\ns.toUpperCase();         // Converts to \"HELLO, WORLD!\"\ns.toLowerCase();         // Converts to \"hello, world!\"\ns.replace(\"World\", \"Java\"); // \"Hello, Java!\"\ns.contains(\"Hello\");     // true\ns.equals(\"hello\");       // false (case-sensitive)\ns.equalsIgnoreCase(\"hello, world!\"); // true\n</code></pre> <p>*Example:</p> <pre><code>public class StringExample {\n    public static void main(String[] args) {\n        String name = \"Java\";\n        System.out.println(name.toUpperCase()); // JAVA\n        System.out.println(name.substring(1));  // ava\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#stringbuilder-vs-stringbuffer","title":"\ud83d\udd39 StringBuilder vs StringBuffer","text":"<p>Both are mutable classes used to manipulate strings, but they differ in synchronization.</p> Feature <code>StringBuilder</code> <code>StringBuffer</code> Mutability Mutable Mutable Thread-safe \u274c Not thread-safe \u2705 Thread-safe Performance Faster (single-threaded) Slower (due to synchronization) Introduced in Java 5 Java 1.0 <p>Example (StringBuilder):</p> <pre><code>public class BuilderExample {\n    public static void main(String[] args) {\n        StringBuilder sb = new StringBuilder(\"Hello\");\n        sb.append(\" World\");\n        System.out.println(sb);  // Hello World\n    }\n}\n</code></pre> <p>Example (StringBuffer):</p> <pre><code>public class BufferExample {\n    public static void main(String[] args) {\n        StringBuffer sb = new StringBuffer(\"Hello\");\n        sb.append(\" Java\");\n        System.out.println(sb);  // Hello Java\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#immutability","title":"\ud83d\udd39 Immutability","text":"<ul> <li>String objects are <code>immutable</code> \u2014 you cannot change the value after creation.</li> <li>Any modification results in a new object being created.</li> <li>Use s = s.concat(\" World\"); to modify.</li> </ul> <pre><code>String s = \"Hello\";\ns.concat(\" World\"); \nSystem.out.println(s); // Output: Hello (unchanged)\n</code></pre>"},{"location":"java/JavaOOps/#interning","title":"\ud83d\udd39  Interning:","text":"<ul> <li>Java uses a String pool to store string literals.</li> <li>When you create a string literal, Java checks if it already exists in the pool.</li> <li>Use intern() to get pooled reference:</li> </ul> <p>Example :</p> <pre><code>String a = \"Java\";\nString b = \"Java\";\nSystem.out.println(a == b);  // true (same reference)\n\nString c = new String(\"Java\");\nSystem.out.println(a == c);  // false (different object)\n\n// Use intern() to get pooled reference:\nSystem.out.println(a == c.intern()); // true\n</code></pre>"},{"location":"java/JavaOOps/#summary-notes","title":"\ud83d\udcdd Summary Notes:","text":"<ul> <li>String is immutable; use StringBuilder or StringBuffer for mutable strings.</li> <li>Use StringBuilder for better performance when not working with threads.</li> <li>StringBuffer is safer for multi-threaded environments.</li> <li>Interning helps Java optimize memory for repeated string literals.</li> </ul> <p>\u2705 StringExample.java</p> <pre><code>public class StringExample {\n    public static void main(String[] args) {\n        String s = \"  Hello World  \";\n\n        System.out.println(\"Original: '\" + s + \"'\");                  // '  Hello World  '\n        System.out.println(\"Trimmed: '\" + s.trim() + \"'\");           // 'Hello World'\n        System.out.println(\"Length: \" + s.length());                 // 15\n        System.out.println(\"Uppercase: \" + s.toUpperCase());         // '  HELLO WORLD  '\n        System.out.println(\"Lowercase: \" + s.toLowerCase());         // '  hello world  '\n        System.out.println(\"Char at 1: \" + s.charAt(1));             // ' '\n        System.out.println(\"Substring(2, 7): \" + s.substring(2, 7)); // 'Hello'\n        System.out.println(\"Replace 'World' with 'Java': \" + s.replace(\"World\", \"Java\")); // '  Hello Java  '\n        System.out.println(\"Contains 'Hello': \" + s.contains(\"Hello\")); // true\n        System.out.println(\"Starts with 'He': \" + s.startsWith(\"He\"));   // false (starts with space)\n        System.out.println(\"Ends with 'ld': \" + s.endsWith(\"ld\"));       // false (ends with space)\n        System.out.println(\"Equals 'hello world': \" + s.equals(\"hello world\")); // false\n        System.out.println(\"Equals Ignore Case: \" + s.equalsIgnoreCase(\"  hello world  \")); // true\n        System.out.println(\"Index of 'o': \" + s.indexOf('o'));         // 6\n        System.out.println(\"Last Index of 'l': \" + s.lastIndexOf('l')); // 9\n\n        String[] parts = s.trim().split(\" \"); // Splits \"Hello World\"\n        System.out.println(\"Split by space:\");\n        for (String part : parts) {\n            System.out.println(part); // Hello \\n World\n        }\n\n        System.out.println(\"Join: \" + String.join(\"-\", \"Java\", \"Python\", \"C++\")); // Java-Python-C++\n        System.out.println(\"To Char Array:\");\n        for (char ch : s.toCharArray()) {\n            System.out.print(ch + \" \"); // prints characters with space\n        }\n\n        String s2 = new String(\"Hello\");\n        String s3 = \"Hello\";\n        System.out.println(\"\\nInterned equals: \" + (s2.intern() == s3)); // true\n    }\n}\n</code></pre> <p>\u2705 StringBuilderExample.java</p> <pre><code>public class StringBuilderExample {\n    public static void main(String[] args) {\n        StringBuilder sb = new StringBuilder(\"Java\");\n\n        sb.append(\" Programming\"); // \"Java Programming\"\n        System.out.println(\"Append: \" + sb);\n\n        sb.insert(5, \"Language \"); // \"Java Language Programming\"\n        System.out.println(\"Insert: \" + sb);\n\n        sb.replace(5, 13, \"Core \"); // \"Java Core Programming\"\n        System.out.println(\"Replace: \" + sb);\n\n        sb.delete(5, 10); // \"JavaProgramming\"\n        System.out.println(\"Delete: \" + sb);\n\n        sb.setCharAt(0, 'j'); // \"javaProgramming\"\n        System.out.println(\"Set Char At: \" + sb);\n\n        System.out.println(\"Reverse: \" + sb.reverse()); // \"gnimmargorPavaj\"\n        sb.reverse(); // restore to \"javaProgramming\"\n\n        System.out.println(\"Length: \" + sb.length()); // 16\n        System.out.println(\"Capacity: \" + sb.capacity()); // default 16 + initial string length\n\n        sb.ensureCapacity(100); // no visible output\n        System.out.println(\"Capacity after ensure: \" + sb.capacity()); // &gt;= 100\n\n        System.out.println(\"To String: \" + sb.toString()); // \"javaProgramming\"\n    }\n}\n</code></pre> <p>\u2705 StringBufferExample.java</p> <pre><code>public class StringBufferExample {\n    public static void main(String[] args) {\n        StringBuffer sb = new StringBuffer(\"Thread\");\n\n        sb.append(\" Safe\"); // \"Thread Safe\"\n        System.out.println(\"Append: \" + sb);\n\n        sb.insert(7, \"Java \"); // \"Thread Java Safe\"\n        System.out.println(\"Insert: \" + sb);\n\n        sb.replace(7, 12, \"Multi-Threaded \"); // \"Thread Multi-Threaded Safe\"\n        System.out.println(\"Replace: \" + sb);\n\n        sb.delete(7, 22); // \"Thread Safe\"\n        System.out.println(\"Delete: \" + sb);\n\n        sb.setCharAt(0, 't'); // \"thread Safe\"\n        System.out.println(\"Set Char At: \" + sb);\n\n        System.out.println(\"Reverse: \" + sb.reverse()); // \"efaS daerht\"\n        sb.reverse(); // restore\n\n        System.out.println(\"Length: \" + sb.length()); // 11\n        System.out.println(\"Capacity: \" + sb.capacity()); // default 16 + initial string length\n\n        System.out.println(\"To String: \" + sb.toString()); // \"thread Safe\"\n    }\n}\n\n</code></pre>"},{"location":"java/JavaOOps/#10-exception-handling-in-java","title":"\u2705 10. Exception Handling in Java","text":"<p>Java provides a powerful exception-handling mechanism to gracefully manage runtime errors and maintain the normal flow of the application.</p>"},{"location":"java/JavaOOps/#try-catch-finally-throw-throws","title":"\ud83d\udd39 <code>try</code>, <code>catch</code>, <code>finally</code>, <code>throw</code>, <code>throws</code>","text":""},{"location":"java/JavaOOps/#try-catch-finally-block","title":"\u2705 <code>try-catch-finally</code> Block","text":"<p>The <code>try</code> block contains code that might throw exceptions. The <code>catch</code> block handles the exception. The <code>finally</code> block is always executed regardless of exception occurrence.</p> <pre><code>public class TryCatchFinallyExample {\n    public static void main(String[] args) {\n        try {\n            int a = 5 / 0;\n        } catch (ArithmeticException e) {\n            System.out.println(\"Caught exception: \" + e.getMessage());\n        } finally {\n            System.out.println(\"Finally block always executes.\");\n        }\n    }\n}\n// Output:\n// Caught exception: / by zero\n// Finally block always executes.\n</code></pre>"},{"location":"java/JavaOOps/#throw-keyword","title":"\u2705 <code>throw</code> Keyword","text":"<ul> <li>Used to explicitly throw an exception from a method or block.</li> </ul> <pre><code>public class ThrowExample {\n    public static void main(String[] args) {\n        int age = 16;\n        if (age &lt; 18) {\n            throw new ArithmeticException(\"Age must be at least 18.\");\n        }\n        System.out.println(\"Eligible for voting.\");\n    }\n}\n// Output: Exception in thread \"main\" java.lang.ArithmeticException: Age must be at least 18.\n</code></pre>"},{"location":"java/JavaOOps/#throws-keyword","title":"\u2705 <code>throws</code> Keyword","text":"<p>Used in method signature to declare checked exceptions that the method might throw.</p> <pre><code>public class ThrowsExample {\n    static void checkFile() throws java.io.IOException {\n        throw new java.io.IOException(\"File error occurred.\");\n    }\n\n    public static void main(String[] args) {\n        try {\n            checkFile();\n        } catch (java.io.IOException e) {\n            System.out.println(\"Handled Exception: \" + e.getMessage());\n        }\n    }\n}\n// Output: Handled Exception: File error occurred.\n</code></pre>"},{"location":"java/JavaOOps/#checked-vs-unchecked-exceptions","title":"\ud83d\udd39 Checked vs Unchecked Exceptions","text":"Type Description Example Classes Checked Exception Must be handled or declared using <code>throws</code> IOException, SQLException Unchecked Exception Runtime exceptions, not required to handle NullPointerException, ArithmeticException <p>Checked Exception</p> <pre><code>import java.io.FileReader;\nimport java.io.FileNotFoundException;\n\npublic class CheckedExample {\n    public static void main(String[] args) {\n        try {\n            FileReader fr = new FileReader(\"file.txt\");\n        } catch (FileNotFoundException e) {\n            System.out.println(\"File not found: \" + e.getMessage());\n        }\n    }\n}\n</code></pre> <p>Unchecked Exception</p> <pre><code>public class UncheckedExample {\n    public static void main(String[] args) {\n        int[] arr = new int[3];\n        System.out.println(arr[5]); // ArrayIndexOutOfBoundsException\n    }\n}\n</code></pre> <p>Custem Exception - You can create your own exception class by extending Exception or RuntimeException.</p> <pre><code>class InvalidAgeException extends Exception {\n    public InvalidAgeException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionDemo {\n    static void validate(int age) throws InvalidAgeException {\n        if (age &lt; 18)\n            throw new InvalidAgeException(\"Not eligible for vote\");\n    }\n\n    public static void main(String[] args) {\n        try {\n            validate(16);\n        } catch (InvalidAgeException e) {\n            System.out.println(\"Caught: \" + e.getMessage());\n        }\n    }\n}\n// Output: Caught: Not eligible for vote\n</code></pre>"},{"location":"java/JavaOOps/#summary-notes_1","title":"\ud83d\udcdd Summary Notes","text":"<ul> <li>Always handle checked exceptions using <code>try-catch</code> or <code>throws</code>.</li> <li>Unchecked exceptions are optional to handle.</li> <li>Use <code>finally</code> for cleanup (e.g., closing resources).</li> <li>Create <code>custom exceptions</code> for domain-specific validations.</li> </ul>"},{"location":"java/JavaOOps/#11-packages-imports-in-java","title":"\u2705 11. Packages &amp; Imports in Java","text":""},{"location":"java/JavaOOps/#what-is-a-package","title":"\ud83d\udd39 What is a Package?","text":"<p>A package is a namespace that organizes classes and interfaces. Think of it as a folder in your system where related Java files are grouped.</p> <ul> <li>Helps avoid class name conflicts</li> <li>Makes code easier to maintain</li> </ul>"},{"location":"java/JavaOOps/#types-of-packages","title":"\ud83d\udd39 Types of Packages","text":"Type Example Built-in <code>java.lang</code>, <code>java.util</code>, <code>java.io</code> User-defined <code>com.myapp.utils</code>, <code>tech.vismo.service</code>"},{"location":"java/JavaOOps/#creating-and-using-user-defined-packages","title":"\ud83d\udd39 Creating and Using User-defined Packages","text":"<p>Step 1: Create a class inside a package \ud83d\udcc1 File: <code>mypack/MessagePrinter.java</code></p> <pre><code>package mypack;\n\npublic class MessagePrinter {\n    public void print() {\n        System.out.println(\"Hello from mypack!\");\n    }\n}\n</code></pre> <p>Step 2: Use it in another class \ud83d\udcc1 File: TestPackage.java</p> <pre><code>import mypack.MessagePrinter;\n\npublic class TestPackage {\n    public static void main(String[] args) {\n        MessagePrinter mp = new MessagePrinter();\n        mp.print(); // Output: Hello from mypack!\n    }\n}\n</code></pre> <ul> <li>\ud83e\udde0 Make sure to place the mypack folder correctly in your source directory.</li> </ul> <p>\ud83d\udd39 <code>import</code> Keyword - Used to access classes from other packages. - Makes code cleaner by avoiding fully qualified names.</p> <pre><code>import java.util.Scanner; // import specific class\nimport java.util.*; // import entire util package\n</code></pre> <pre><code>java.util.Scanner sc = new java.util.Scanner(System.in);\n// Without import, you'd have to write:\n</code></pre> <p>\ud83d\udd39 <code>Default</code> Package If no package is defined, the class is in the default package (not recommended for real projects). | Package     | Description                           | Example Classes                      | | ----------- | ------------------------------------- | ------------------------------------ | | <code>java.lang</code> | Default basic classes (auto-imported) | <code>String</code>, <code>Math</code>, <code>System</code>, <code>Object</code> | | <code>java.util</code> | Utility classes                       | <code>ArrayList</code>, <code>HashMap</code>, <code>Scanner</code>    | | <code>java.io</code>   | Input/Output classes                  | <code>File</code>, <code>BufferedReader</code>             | | <code>java.net</code>  | Networking                            | <code>Socket</code>, <code>URL</code>                      | | <code>java.sql</code>  | Database connectivity                 | <code>Connection</code>, <code>DriverManager</code>        |</p>"},{"location":"java/JavaOOps/#example-with-built-in-packages","title":"Example with built in packages","text":"<pre><code>import java.util.Scanner;\n\npublic class ScannerExample {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter name: \");\n        String name = sc.nextLine();\n        System.out.println(\"Hello, \" + name); // Output depends on input\n        sc.close();\n    }\n}\n</code></pre>"},{"location":"java/JavaOOps/#summary","title":"\ud83d\udcdd Summary","text":"<ul> <li>Packages help organize and reuse code.</li> <li>Use <code>package</code> to declare a package.</li> <li>Use <code>import</code>to access classes from other packages.</li> <li><code>java.lang</code> is automatically imported.</li> <li>Always close resources like Scanner or FileReader.</li> </ul>"},{"location":"java/expertJava/","title":"\ud83d\udd0d Java8+","text":""},{"location":"java/expertJava/#expert-level","title":"\ud83d\udd34 Expert Level","text":""},{"location":"java/expertJava/#java-generics-detailed-guide","title":"\u2705 Java Generics \u2013 Detailed Guide","text":"<p>Generics in Java allow you to write code that works with different data types while providing type safety and code reusability.</p>"},{"location":"java/expertJava/#1-type-parameters-t","title":"\ud83d\udd38 1. Type Parameters <code>&lt;T&gt;</code>","text":"<p>A type parameter allows a class, interface, or method to operate on objects of various types while providing compile-time type safety.</p> <pre><code>// \u2705 Generic Class\nclass Box&lt;T&gt; {\n    private T item;\n\n    public void setItem(T item) {\n        this.item = item;\n    }\n\n    public T getItem() {\n        return item;\n    }\n}\n\npublic class TypeParameterExample {\n    public static void main(String[] args) {\n        Box&lt;String&gt; stringBox = new Box&lt;&gt;();\n        stringBox.setItem(\"Hello Generics\");\n        System.out.println(stringBox.getItem()); // Output: Hello Generics\n\n        Box&lt;Integer&gt; intBox = new Box&lt;&gt;();\n        intBox.setItem(42);\n        System.out.println(intBox.getItem()); // Output: 42\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#2-wildcards-extends-super","title":"\ud83d\udd38 2. Wildcards <code>?</code>, <code>? extends</code>, <code>? super</code>","text":"<p>Wildcards allow flexibility when working with generic types.</p>"},{"location":"java/expertJava/#a-unbounded-wildcard","title":"\u2705 a. <code>&lt;?&gt;</code> - Unbounded Wildcard","text":"<p>Accepts any type, but you cannot safely add items.</p> <pre><code>public static void printList(List&lt;?&gt; list) {\n    for (Object item : list) {\n        System.out.println(item);\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#b-extends-t-upper-bounded-wildcard","title":"\u2705 b. <code>&lt;? extends T&gt;</code> - Upper Bounded Wildcard","text":"<p>Accepts T or any subclass of T (Read only, can't add new items).</p> <pre><code>public static void printNumbers(List&lt;? extends Number&gt; numbers) {\n    for (Number num : numbers) {\n        System.out.println(num);\n    }\n}\n</code></pre> <pre><code>List&lt;Integer&gt; intList = Arrays.asList(1, 2, 3);\nprintNumbers(intList); // Output: 1 2 3\n</code></pre>"},{"location":"java/expertJava/#c-super-t-lower-bounded-wildcard","title":"\u2705 c. <code>&lt;? super T&gt;</code> - Lower Bounded Wildcard","text":"<p>Accepts T or any superclass of T (Can add T and its subclasses).</p> <pre><code>public static void addIntegers(List&lt;? super Integer&gt; list) {\n    list.add(100);\n    list.add(200);\n}\n</code></pre> <pre><code>List&lt;Number&gt; numList = new ArrayList&lt;&gt;();\naddIntegers(numList);\nSystem.out.println(numList); // Output: [100, 200]\n</code></pre>"},{"location":"java/expertJava/#3-bounded-types","title":"\ud83d\udd38 3. Bounded Types","text":"<p>Restrict the types that can be used as type arguments.</p> <pre><code>class Calculator&lt;T extends Number&gt; {\n    private T num1, num2;\n\n    public Calculator(T num1, T num2) {\n        this.num1 = num1;\n        this.num2 = num2;\n    }\n\n    public double add() {\n        return num1.doubleValue() + num2.doubleValue();\n    }\n}\n\npublic class BoundedTypeExample {\n    public static void main(String[] args) {\n        Calculator&lt;Integer&gt; calc = new Calculator&lt;&gt;(10, 20);\n        System.out.println(calc.add()); // Output: 30.0\n\n        Calculator&lt;Double&gt; dcalc = new Calculator&lt;&gt;(10.5, 4.5);\n        System.out.println(dcalc.add()); // Output: 15.0\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#4-generic-methods","title":"\ud83d\udd38 4. Generic Methods","text":"<p>A method that defines its own type parameter(s).</p> <pre><code>public class GenericMethods {\n    // Generic method to print any array\n    public static &lt;T&gt; void printArray(T[] array) {\n        for (T item : array) {\n            System.out.print(item + \" \");\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        Integer[] intArr = {1, 2, 3};\n        String[] strArr = {\"A\", \"B\", \"C\"};\n\n        printArray(intArr); // Output: 1 2 3\n        printArray(strArr); // Output: A B C\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#5-generic-interface","title":"\ud83d\udd38 5. Generic Interface","text":"<pre><code>interface Operation&lt;T&gt; {\n    T execute(T a, T b);\n}\n\nclass AddOperation implements Operation&lt;Integer&gt; {\n    public Integer execute(Integer a, Integer b) {\n        return a + b;\n    }\n}\n\npublic class GenericInterfaceDemo {\n    public static void main(String[] args) {\n        Operation&lt;Integer&gt; op = new AddOperation();\n        System.out.println(op.execute(5, 3)); // Output: 8\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#6-multiple-type-parameters","title":"\ud83d\udd38 6. Multiple Type Parameters","text":"<p>You can define multiple type parameters.</p> <pre><code>class Pair&lt;K, V&gt; {\n    private K key;\n    private V value;\n\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    public K getKey() { return key; }\n    public V getValue() { return value; }\n}\n\npublic class MultiTypeParam {\n    public static void main(String[] args) {\n        Pair&lt;String, Integer&gt; pair = new Pair&lt;&gt;(\"Age\", 25);\n        System.out.println(pair.getKey() + \": \" + pair.getValue()); // Output: Age: 25\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#7-raw-types-not-recommended","title":"\ud83d\udd38 7. Raw Types (Not Recommended)","text":"<p>Using a generic class without specifying type is called raw type.</p> <pre><code>Box rawBox = new Box();  // Warning: unchecked\nrawBox.setItem(\"Unsafe\");\nString s = (String) rawBox.getItem();\nSystem.out.println(s); // Output: Unsafe\n</code></pre> <p>\u26a0\ufe0f Use of raw types is discouraged because it bypasses type checks.</p>"},{"location":"java/expertJava/#summary","title":"\u2705 Summary","text":"Concept Keyword / Syntax Usage Example Type Parameter <code>&lt;T&gt;</code> <code>class Box&lt;T&gt; { ... }</code> Generic Method <code>&lt;T&gt; returnType method(T t)</code> <code>public &lt;T&gt; void print(T t)</code> Wildcard <code>?</code> <code>List&lt;?&gt;</code>, <code>List&lt;? extends T&gt;</code> Bounded Type <code>&lt;T extends Number&gt;</code> Only accept subclasses of <code>Number</code> Lower Bound <code>&lt;? super T&gt;</code> Accept <code>T</code> or its superclasses"},{"location":"java/expertJava/#java-generics-detailed-guide_1","title":"\u2705 Java Generics \u2013 Detailed Guide","text":"<p>Generics in Java allow you to write code that works with different data types while providing type safety and code reusability.</p>"},{"location":"java/expertJava/#1-type-parameters-t_1","title":"\ud83d\udd38 1. Type Parameters <code>&lt;T&gt;</code>","text":"<p>A type parameter allows a class, interface, or method to operate on objects of various types while providing compile-time type safety.</p> <pre><code>// \u2705 Generic Class\nclass Box&lt;T&gt; {\n    private T item;\n\n    public void setItem(T item) {\n        this.item = item;\n    }\n\n    public T getItem() {\n        return item;\n    }\n}\n\npublic class TypeParameterExample {\n    public static void main(String[] args) {\n        Box&lt;String&gt; stringBox = new Box&lt;&gt;();\n        stringBox.setItem(\"Hello Generics\");\n        System.out.println(stringBox.getItem()); // Output: Hello Generics\n\n        Box&lt;Integer&gt; intBox = new Box&lt;&gt;();\n        intBox.setItem(42);\n        System.out.println(intBox.getItem()); // Output: 42\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#2-wildcards-extends-super_1","title":"\ud83d\udd38 2. Wildcards <code>?</code>, <code>? extends</code>, <code>? super</code>","text":"<p>Wildcards allow flexibility when working with generic types.</p>"},{"location":"java/expertJava/#a-unbounded-wildcard_1","title":"\u2705 a. <code>&lt;?&gt;</code> - Unbounded Wildcard","text":"<p>Accepts any type, but you cannot safely add items.</p> <pre><code>public static void printList(List&lt;?&gt; list) {\n    for (Object item : list) {\n        System.out.println(item);\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#b-extends-t-upper-bounded-wildcard_1","title":"\u2705 b. <code>&lt;? extends T&gt;</code> - Upper Bounded Wildcard","text":"<p>Accepts T or any subclass of T (Read only, can't add new items).</p> <pre><code>public static void printNumbers(List&lt;? extends Number&gt; numbers) {\n    for (Number num : numbers) {\n        System.out.println(num);\n    }\n}\n</code></pre> <pre><code>List&lt;Integer&gt; intList = Arrays.asList(1, 2, 3);\nprintNumbers(intList); // Output: 1 2 3\n</code></pre>"},{"location":"java/expertJava/#c-super-t-lower-bounded-wildcard_1","title":"\u2705 c. <code>&lt;? super T&gt;</code> - Lower Bounded Wildcard","text":"<p>Accepts T or any superclass of T (Can add T and its subclasses).</p> <pre><code>public static void addIntegers(List&lt;? super Integer&gt; list) {\n    list.add(100);\n    list.add(200);\n}\n</code></pre> <pre><code>List&lt;Number&gt; numList = new ArrayList&lt;&gt;();\naddIntegers(numList);\nSystem.out.println(numList); // Output: [100, 200]\n</code></pre>"},{"location":"java/expertJava/#3-bounded-types_1","title":"\ud83d\udd38 3. Bounded Types","text":"<p>Restrict the types that can be used as type arguments.</p> <pre><code>class Calculator&lt;T extends Number&gt; {\n    private T num1, num2;\n\n    public Calculator(T num1, T num2) {\n        this.num1 = num1;\n        this.num2 = num2;\n    }\n\n    public double add() {\n        return num1.doubleValue() + num2.doubleValue();\n    }\n}\n\npublic class BoundedTypeExample {\n    public static void main(String[] args) {\n        Calculator&lt;Integer&gt; calc = new Calculator&lt;&gt;(10, 20);\n        System.out.println(calc.add()); // Output: 30.0\n\n        Calculator&lt;Double&gt; dcalc = new Calculator&lt;&gt;(10.5, 4.5);\n        System.out.println(dcalc.add()); // Output: 15.0\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#4-generic-methods_1","title":"\ud83d\udd38 4. Generic Methods","text":"<p>A method that defines its own type parameter(s).</p> <pre><code>public class GenericMethods {\n    // Generic method to print any array\n    public static &lt;T&gt; void printArray(T[] array) {\n        for (T item : array) {\n            System.out.print(item + \" \");\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        Integer[] intArr = {1, 2, 3};\n        String[] strArr = {\"A\", \"B\", \"C\"};\n\n        printArray(intArr); // Output: 1 2 3\n        printArray(strArr); // Output: A B C\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#5-generic-interface_1","title":"\ud83d\udd38 5. Generic Interface","text":"<pre><code>interface Operation&lt;T&gt; {\n    T execute(T a, T b);\n}\n\nclass AddOperation implements Operation&lt;Integer&gt; {\n    public Integer execute(Integer a, Integer b) {\n        return a + b;\n    }\n}\n\npublic class GenericInterfaceDemo {\n    public static void main(String[] args) {\n        Operation&lt;Integer&gt; op = new AddOperation();\n        System.out.println(op.execute(5, 3)); // Output: 8\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#6-multiple-type-parameters_1","title":"\ud83d\udd38 6. Multiple Type Parameters","text":"<p>You can define multiple type parameters.</p> <pre><code>class Pair&lt;K, V&gt; {\n    private K key;\n    private V value;\n\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    public K getKey() { return key; }\n    public V getValue() { return value; }\n}\n\npublic class MultiTypeParam {\n    public static void main(String[] args) {\n        Pair&lt;String, Integer&gt; pair = new Pair&lt;&gt;(\"Age\", 25);\n        System.out.println(pair.getKey() + \": \" + pair.getValue()); // Output: Age: 25\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#7-raw-types-not-recommended_1","title":"\ud83d\udd38 7. Raw Types (Not Recommended)","text":"<p>Using a generic class without specifying type is called raw type.</p> <pre><code>Box rawBox = new Box();  // Warning: unchecked\nrawBox.setItem(\"Unsafe\");\nString s = (String) rawBox.getItem();\nSystem.out.println(s); // Output: Unsafe\n</code></pre> <p>\u26a0\ufe0f Use of raw types is discouraged because it bypasses type checks.</p>"},{"location":"java/expertJava/#summary_1","title":"\u2705 Summary","text":"Concept Keyword / Syntax Usage Example Type Parameter <code>&lt;T&gt;</code> <code>class Box&lt;T&gt; { ... }</code> Generic Method <code>&lt;T&gt; returnType method(T t)</code> <code>public &lt;T&gt; void print(T t)</code> Wildcard <code>?</code> <code>List&lt;?&gt;</code>, <code>List&lt;? extends T&gt;</code> Bounded Type <code>&lt;T extends Number&gt;</code> Only accept subclasses of <code>Number</code> Lower Bound <code>&lt;? super T&gt;</code> Accept <code>T</code> or its superclasses"},{"location":"java/expertJava/#java-annotations-and-reflection-detailed-guide","title":"\u2705 Java Annotations and Reflection \u2013 Detailed Guide","text":""},{"location":"java/expertJava/#1-built-in-annotations","title":"\ud83d\udd38 1. Built-in Annotations","text":""},{"location":"java/expertJava/#override","title":"\u2705 <code>@Override</code>","text":"<p>Indicates that a method is overridden from a superclass.</p> <pre><code>class Animal {\n    void sound() {\n        System.out.println(\"Animal sound\");\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    void sound() {\n        System.out.println(\"Bark\");\n    }\n}\n\npublic class OverrideExample {\n    public static void main(String[] args) {\n        Animal a = new Dog();\n        a.sound(); // Output: Bark\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#deprecated","title":"\u2705 <code>@Deprecated</code>","text":"<p>Marks a method or class as deprecated.</p> <pre><code>class LegacyCode {\n    @Deprecated\n    void oldMethod() {\n        System.out.println(\"This method is deprecated\");\n    }\n}\n\npublic class DeprecatedExample {\n    public static void main(String[] args) {\n        new LegacyCode().oldMethod(); // Output: This method is deprecated\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#2-custom-annotations","title":"\ud83d\udd38 2. Custom Annotations","text":""},{"location":"java/expertJava/#defining-an-annotation","title":"\u2705 Defining an annotation","text":"<pre><code>import java.lang.annotation.*;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\n@interface Info {\n    String author();\n    int version();\n}\n</code></pre>"},{"location":"java/expertJava/#using-the-annotation","title":"\u2705 Using the annotation","text":"<pre><code>class Book {\n    @Info(author = \"Darshan\", version = 1)\n    public void display() {\n        System.out.println(\"Book display\");\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#3-reflection-api","title":"\ud83d\udd38 3. Reflection API","text":"<p>Used to inspect classes, methods, fields at runtime.</p> <pre><code>import java.lang.reflect.*;\n\nclass Student {\n    public int id;\n    private String name = \"John\";\n\n    public void greet() {\n        System.out.println(\"Hello\");\n    }\n}\n\npublic class ReflectionExample {\n    public static void main(String[] args) throws Exception {\n        Class&lt;?&gt; clazz = Class.forName(\"Student\");\n\n        // Class name\n        System.out.println(\"Class Name: \" + clazz.getName());\n\n        // Fields\n        Field[] fields = clazz.getDeclaredFields();\n        for (Field f : fields) {\n            System.out.println(\"Field: \" + f.getName());\n        }\n\n        // Methods\n        Method[] methods = clazz.getDeclaredMethods();\n        for (Method m : methods) {\n            System.out.println(\"Method: \" + m.getName());\n        }\n\n        // Access private field\n        Object obj = clazz.getDeclaredConstructor().newInstance();\n        Field privateField = clazz.getDeclaredField(\"name\");\n        privateField.setAccessible(true);\n        System.out.println(\"Private field value: \" + privateField.get(obj));\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#output","title":"\u2705 Output:","text":"<pre><code>Class Name: Student\nField: id\nField: name\nMethod: greet\nPrivate field value: John\n</code></pre>"},{"location":"java/expertJava/#summary_2","title":"\u2705 Summary","text":"Concept Description <code>@Override</code> Indicates method overrides superclass method <code>@Deprecated</code> Marks method as deprecated Custom Annotation User-defined annotations <code>Class</code>, <code>Method</code> Part of reflection API <code>Field</code> Access object fields dynamically"},{"location":"java/expertJava/#java-generics-detailed-guide_2","title":"\u2705 Java Generics \u2013 Detailed Guide","text":"<p>Generics in Java allow you to write code that works with different data types while providing type safety and code reusability.</p> <p>...[Previous content preserved]...</p>"},{"location":"java/expertJava/#summary_3","title":"\u2705 Summary","text":"Concept Description <code>@Override</code> Indicates method overrides superclass method <code>@Deprecated</code> Marks method as deprecated Custom Annotation User-defined annotations <code>Class</code>, <code>Method</code> Part of reflection API <code>Field</code> Access object fields dynamically"},{"location":"java/expertJava/#java-modules-jpms-detailed-guide","title":"\u2705 Java Modules (JPMS) \u2013 Detailed Guide","text":"<p>The Java Platform Module System (JPMS) introduced in Java 9 allows modularization of code for better scalability, maintainability, and encapsulation.</p>"},{"location":"java/expertJava/#1-module-infojava","title":"\ud83d\udd38 1. <code>module-info.java</code>","text":"<p>Every module contains a <code>module-info.java</code> file that defines dependencies and exports.</p>"},{"location":"java/expertJava/#example","title":"\u2705 Example","text":"<pre><code>// module-info.java\nmodule com.example.app {\n    requires com.example.utils;\n    exports com.example.app.api;\n}\n</code></pre> <ul> <li><code>requires</code> \u2014 declares dependencies on other modules.</li> <li><code>exports</code> \u2014 makes specific packages accessible to other modules.</li> </ul>"},{"location":"java/expertJava/#2-requires-exports-opens","title":"\ud83d\udd38 2. <code>requires</code>, <code>exports</code>, <code>opens</code>","text":""},{"location":"java/expertJava/#requires","title":"\u2705 <code>requires</code>","text":"<p>Declares that this module depends on another.</p> <pre><code>module my.module {\n    requires java.sql;\n}\n</code></pre>"},{"location":"java/expertJava/#exports","title":"\u2705 <code>exports</code>","text":"<p>Makes a package visible to other modules.</p> <pre><code>module my.module {\n    exports com.my.package;\n}\n</code></pre>"},{"location":"java/expertJava/#opens","title":"\u2705 <code>opens</code>","text":"<p>Used for deep reflection (e.g., by frameworks like Spring).</p> <pre><code>module my.module {\n    opens com.my.secret to some.framework;\n}\n</code></pre>"},{"location":"java/expertJava/#3-automatic-and-unnamed-modules","title":"\ud83d\udd38 3. Automatic and Unnamed Modules","text":""},{"location":"java/expertJava/#automatic-modules","title":"\u2705 Automatic Modules","text":"<p>JARs placed on the module path without <code>module-info.java</code> are treated as automatic modules.</p> <pre><code># Automatic module: name inferred from jar\nlib/log4j-api-2.14.1.jar \u2192 module name: log4j.api\n</code></pre>"},{"location":"java/expertJava/#unnamed-module","title":"\u2705 Unnamed Module","text":"<p>JARs on the classpath are treated as part of the unnamed module and can access any exported package.</p> <pre><code>// Any code in classpath (unnamed module)\n// can access public types in exported modules\n</code></pre>"},{"location":"java/expertJava/#complete-example","title":"\ud83d\udd38 Complete Example","text":""},{"location":"java/expertJava/#folder-structure","title":"\u2705 Folder Structure","text":"<pre><code>project-root/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 module-info.java\n\u2502   \u2514\u2500\u2500 com/example/app/MainApp.java\n\u251c\u2500\u2500 util/\n\u2502   \u251c\u2500\u2500 module-info.java\n\u2502   \u2514\u2500\u2500 com/example/util/Helper.java\n</code></pre>"},{"location":"java/expertJava/#utilmodule-infojava","title":"\u2705 util/module-info.java","text":"<pre><code>module com.example.util {\n    exports com.example.util;\n}\n</code></pre>"},{"location":"java/expertJava/#appmodule-infojava","title":"\u2705 app/module-info.java","text":"<pre><code>module com.example.app {\n    requires com.example.util;\n}\n</code></pre>"},{"location":"java/expertJava/#main-class","title":"\u2705 Main Class","text":"<pre><code>package com.example.app;\n\nimport com.example.util.Helper;\n\npublic class MainApp {\n    public static void main(String[] args) {\n        Helper.greet(); // Output: Hello from util module!\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#helper-class","title":"\u2705 Helper Class","text":"<pre><code>package com.example.util;\n\npublic class Helper {\n    public static void greet() {\n        System.out.println(\"Hello from util module!\");\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#summary_4","title":"\u2705 Summary","text":"Concept Description <code>module-info.java</code> Describes the module's dependencies and exports <code>requires</code> Specifies dependent modules <code>exports</code> Makes packages visible to other modules <code>opens</code> Allows runtime reflection access Automatic Module JARs on module path without <code>module-info.java</code> Unnamed Module Traditional classpath-based code"},{"location":"java/expertJava/#java-generics-detailed-guide_3","title":"\u2705 Java Generics \u2013 Detailed Guide","text":"<p>Generics in Java allow you to write code that works with different data types while providing type safety and code reusability.</p> <p>...[Previous content preserved]...</p>"},{"location":"java/expertJava/#summary_5","title":"\u2705 Summary","text":"Concept Description <code>@Override</code> Indicates method overrides superclass method <code>@Deprecated</code> Marks method as deprecated Custom Annotation User-defined annotations <code>Class</code>, <code>Method</code> Part of reflection API <code>Field</code> Access object fields dynamically"},{"location":"java/expertJava/#design-patterns-in-java-detailed-guide","title":"\u2705 Design Patterns in Java \u2013 Detailed Guide","text":"<p>Design patterns provide reusable solutions to common software design problems. Below are key structural, creational, and behavioral patterns.</p>"},{"location":"java/expertJava/#1-singleton-pattern","title":"\ud83d\udd38 1. Singleton Pattern","text":"<p>Ensures a class has only one instance and provides a global point of access.</p> <pre><code>class Singleton {\n    private static Singleton instance;\n\n    private Singleton() {}\n\n    public static Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n\npublic class SingletonDemo {\n    public static void main(String[] args) {\n        Singleton s1 = Singleton.getInstance();\n        Singleton s2 = Singleton.getInstance();\n        System.out.println(s1 == s2); // Output: true\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#2-factory-pattern","title":"\ud83d\udd38 2. Factory Pattern","text":"<p>Creates objects without exposing the instantiation logic.</p> <pre><code>interface Shape {\n    void draw();\n}\n\nclass Circle implements Shape {\n    public void draw() {\n        System.out.println(\"Drawing Circle\");\n    }\n}\n\nclass Square implements Shape {\n    public void draw() {\n        System.out.println(\"Drawing Square\");\n    }\n}\n\nclass ShapeFactory {\n    public Shape getShape(String type) {\n        if (type.equalsIgnoreCase(\"circle\")) return new Circle();\n        if (type.equalsIgnoreCase(\"square\")) return new Square();\n        return null;\n    }\n}\n\npublic class FactoryDemo {\n    public static void main(String[] args) {\n        ShapeFactory factory = new ShapeFactory();\n        Shape shape = factory.getShape(\"circle\");\n        shape.draw(); // Output: Drawing Circle\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#3-builder-pattern","title":"\ud83d\udd38 3. Builder Pattern","text":"<p>Used to construct complex objects step by step.</p> <pre><code>class Computer {\n    private String CPU, RAM, storage;\n\n    public static class Builder {\n        private String CPU, RAM, storage;\n\n        public Builder setCPU(String CPU) {\n            this.CPU = CPU; return this;\n        }\n\n        public Builder setRAM(String RAM) {\n            this.RAM = RAM; return this;\n        }\n\n        public Builder setStorage(String storage) {\n            this.storage = storage; return this;\n        }\n\n        public Computer build() {\n            Computer c = new Computer();\n            c.CPU = this.CPU;\n            c.RAM = this.RAM;\n            c.storage = this.storage;\n            return c;\n        }\n    }\n\n    public void specs() {\n        System.out.println(\"CPU: \" + CPU + \", RAM: \" + RAM + \", Storage: \" + storage);\n    }\n}\n\npublic class BuilderDemo {\n    public static void main(String[] args) {\n        Computer comp = new Computer.Builder()\n            .setCPU(\"i7\").setRAM(\"16GB\").setStorage(\"512GB SSD\").build();\n        comp.specs(); // Output: CPU: i7, RAM: 16GB, Storage: 512GB SSD\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#4-observer-pattern","title":"\ud83d\udd38 4. Observer Pattern","text":"<p>Defines a one-to-many dependency between objects.</p> <pre><code>import java.util.*;\n\ninterface Observer {\n    void update(String message);\n}\n\nclass Subscriber implements Observer {\n    private String name;\n    public Subscriber(String name) { this.name = name; }\n    public void update(String message) {\n        System.out.println(name + \" received: \" + message);\n    }\n}\n\nclass Publisher {\n    private List&lt;Observer&gt; observers = new ArrayList&lt;&gt;();\n\n    public void subscribe(Observer o) { observers.add(o); }\n    public void notifyAllObservers(String message) {\n        for (Observer o : observers) o.update(message);\n    }\n}\n\npublic class ObserverDemo {\n    public static void main(String[] args) {\n        Publisher pub = new Publisher();\n        pub.subscribe(new Subscriber(\"A\"));\n        pub.subscribe(new Subscriber(\"B\"));\n        pub.notifyAllObservers(\"New Post Available!\");\n        // Output: A received: New Post Available!\n        //         B received: New Post Available!\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#5-strategy-pattern","title":"\ud83d\udd38 5. Strategy Pattern","text":"<p>Encapsulates a family of algorithms.</p> <pre><code>interface PaymentStrategy {\n    void pay(int amount);\n}\n\nclass CreditCardPayment implements PaymentStrategy {\n    public void pay(int amount) {\n        System.out.println(\"Paid \" + amount + \" using Credit Card\");\n    }\n}\n\nclass PayPalPayment implements PaymentStrategy {\n    public void pay(int amount) {\n        System.out.println(\"Paid \" + amount + \" using PayPal\");\n    }\n}\n\nclass ShoppingCart {\n    private PaymentStrategy strategy;\n\n    public void setPaymentStrategy(PaymentStrategy strategy) {\n        this.strategy = strategy;\n    }\n\n    public void checkout(int amount) {\n        strategy.pay(amount);\n    }\n}\n\npublic class StrategyDemo {\n    public static void main(String[] args) {\n        ShoppingCart cart = new ShoppingCart();\n        cart.setPaymentStrategy(new CreditCardPayment());\n        cart.checkout(500); // Output: Paid 500 using Credit Card\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#6-decorator-pattern","title":"\ud83d\udd38 6. Decorator Pattern","text":"<p>Adds new behavior to objects dynamically.</p> <pre><code>interface Coffee {\n    String getDescription();\n    int cost();\n}\n\nclass SimpleCoffee implements Coffee {\n    public String getDescription() { return \"Simple Coffee\"; }\n    public int cost() { return 5; }\n}\n\nabstract class CoffeeDecorator implements Coffee {\n    protected Coffee decorated;\n    public CoffeeDecorator(Coffee c) { this.decorated = c; }\n}\n\nclass MilkDecorator extends CoffeeDecorator {\n    public MilkDecorator(Coffee c) { super(c); }\n    public String getDescription() { return decorated.getDescription() + \", Milk\"; }\n    public int cost() { return decorated.cost() + 2; }\n}\n\npublic class DecoratorDemo {\n    public static void main(String[] args) {\n        Coffee coffee = new MilkDecorator(new SimpleCoffee());\n        System.out.println(coffee.getDescription()); // Output: Simple Coffee, Milk\n        System.out.println(coffee.cost());           // Output: 7\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#7-adapter-pattern","title":"\ud83d\udd38 7. Adapter Pattern","text":"<p>Converts interface of a class into another interface expected by the client.</p> <pre><code>interface MediaPlayer {\n    void play(String fileName);\n}\n\nclass VLCPlayer {\n    public void playVLC(String file) {\n        System.out.println(\"Playing VLC: \" + file);\n    }\n}\n\nclass MediaAdapter implements MediaPlayer {\n    VLCPlayer vlcPlayer = new VLCPlayer();\n    public void play(String fileName) {\n        vlcPlayer.playVLC(fileName);\n    }\n}\n\npublic class AdapterDemo {\n    public static void main(String[] args) {\n        MediaPlayer player = new MediaAdapter();\n        player.play(\"movie.vlc\"); // Output: Playing VLC: movie.vlc\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#8-proxy-pattern","title":"\ud83d\udd38 8. Proxy Pattern","text":"<p>Provides a surrogate or placeholder for another object.</p> <pre><code>interface Image {\n    void display();\n}\n\nclass RealImage implements Image {\n    private String filename;\n    public RealImage(String filename) {\n        this.filename = filename;\n        loadFromDisk();\n    }\n    private void loadFromDisk() {\n        System.out.println(\"Loading \" + filename);\n    }\n    public void display() {\n        System.out.println(\"Displaying \" + filename);\n    }\n}\n\nclass ProxyImage implements Image {\n    private RealImage realImage;\n    private String filename;\n\n    public ProxyImage(String filename) {\n        this.filename = filename;\n    }\n\n    public void display() {\n        if (realImage == null) realImage = new RealImage(filename);\n        realImage.display();\n    }\n}\n\npublic class ProxyDemo {\n    public static void main(String[] args) {\n        Image img = new ProxyImage(\"photo.jpg\");\n        img.display(); // Output: Loading photo.jpg \\n Displaying photo.jpg\n        img.display(); // Output: Displaying photo.jpg\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#9-template-method-pattern","title":"\ud83d\udd38 9. Template Method Pattern","text":"<p>Defines the program skeleton and allows subclasses to override specific steps.</p> <pre><code>abstract class Game {\n    abstract void initialize();\n    abstract void startPlay();\n    abstract void endPlay();\n\n    public final void play() {\n        initialize();\n        startPlay();\n        endPlay();\n    }\n}\n\nclass Football extends Game {\n    void initialize() { System.out.println(\"Football Game Initialized\"); }\n    void startPlay() { System.out.println(\"Football Game Started\"); }\n    void endPlay()   { System.out.println(\"Football Game Finished\"); }\n}\n\npublic class TemplateDemo {\n    public static void main(String[] args) {\n        Game game = new Football();\n        game.play();\n        // Output:\n        // Football Game Initialized\n        // Football Game Started\n        // Football Game Finished\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#summary_6","title":"\u2705 Summary","text":"Pattern Purpose Singleton One instance globally accessible Factory Creates object without exposing instantiation Builder Constructs complex objects step by step Observer One-to-many dependency notification Strategy Encapsulates interchangeable behaviors Decorator Adds behavior to object dynamically Adapter Converts one interface to another Proxy Controls access to the original object Template Defines algorithm skeleton in superclass"},{"location":"java/expertJava/#advanced-stream-operations-detailed-guide","title":"\u2705 Advanced Stream Operations \u2013 Detailed Guide","text":"<p>Java Streams offer powerful ways to work with collections of data. Below are advanced operations like parallelism, grouping, and flattening nested structures.</p>"},{"location":"java/expertJava/#1-parallel-streams","title":"\ud83d\udd38 1. Parallel Streams","text":"<p>Parallel streams divide tasks across multiple threads to increase performance for large data sets.</p> <pre><code>import java.util.*;\nimport java.util.stream.*;\n\npublic class ParallelStreamDemo {\n    public static void main(String[] args) {\n        List&lt;Integer&gt; list = IntStream.rangeClosed(1, 10).boxed().collect(Collectors.toList());\n\n        list.parallelStream()\n            .forEach(n -&gt; System.out.println(Thread.currentThread().getName() + \" -&gt; \" + n));\n        // Output: Order may vary, processed by different threads\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#2-collectors-and-grouping","title":"\ud83d\udd38 2. Collectors and Grouping","text":"<p>Collectors help in transforming streams into lists, sets, maps, or performing grouping operations.</p>"},{"location":"java/expertJava/#grouping-by-property","title":"\u2705 Grouping by property","text":"<pre><code>import java.util.*;\nimport java.util.stream.*;\n\nclass Person {\n    String name;\n    String city;\n    public Person(String name, String city) {\n        this.name = name;\n        this.city = city;\n    }\n    public String getCity() { return city; }\n    public String getName() { return name; }\n}\n\npublic class GroupingDemo {\n    public static void main(String[] args) {\n        List&lt;Person&gt; people = Arrays.asList(\n            new Person(\"Alice\", \"Delhi\"),\n            new Person(\"Bob\", \"Mumbai\"),\n            new Person(\"Charlie\", \"Delhi\")\n        );\n\n        Map&lt;String, List&lt;Person&gt;&gt; grouped = people.stream()\n            .collect(Collectors.groupingBy(Person::getCity));\n\n        grouped.forEach((city, group) -&gt; {\n            System.out.println(city + \":\");\n            group.forEach(p -&gt; System.out.println(\" - \" + p.getName()));\n        });\n        // Output:\n        // Delhi:\n        //  - Alice\n        //  - Charlie\n        // Mumbai:\n        //  - Bob\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#3-flattening-structures-flatmap","title":"\ud83d\udd38 3. Flattening Structures (<code>flatMap</code>)","text":"<p><code>flatMap</code> is used to flatten nested collections.</p> <pre><code>import java.util.*;\nimport java.util.stream.*;\n\npublic class FlatMapDemo {\n    public static void main(String[] args) {\n        List&lt;List&lt;String&gt;&gt; nested = Arrays.asList(\n            Arrays.asList(\"A\", \"B\"),\n            Arrays.asList(\"C\", \"D\"),\n            Arrays.asList(\"E\")\n        );\n\n        List&lt;String&gt; flat = nested.stream()\n            .flatMap(Collection::stream)\n            .collect(Collectors.toList());\n\n        System.out.println(flat); // Output: [A, B, C, D, E]\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#flatmap-with-string-split","title":"\u2705 FlatMap with String Split","text":"<pre><code>List&lt;String&gt; lines = Arrays.asList(\"Java Stream\", \"Flat Map\", \"Grouping Example\");\n\nList&lt;String&gt; words = lines.stream()\n    .flatMap(line -&gt; Arrays.stream(line.split(\" \")))\n    .collect(Collectors.toList());\n\nSystem.out.println(words); // Output: [Java, Stream, Flat, Map, Grouping, Example]\n</code></pre>"},{"location":"java/expertJava/#summary_7","title":"\u2705 Summary","text":"Concept Description Parallel Stream Processes elements concurrently Collectors Terminal ops to collect data into other forms Grouping Group elements based on a key <code>flatMap</code> Flattens nested structures into a single stream <p>...[Previous content preserved]...</p>"},{"location":"java/expertJava/#1-just-in-time-jit-compiler","title":"\ud83d\udd38 1. Just-In-Time (JIT) Compiler","text":"<p>JIT compiles bytecode into native machine code at runtime, optimizing performance.</p>"},{"location":"java/expertJava/#example-conceptual","title":"\u2705 Example (Conceptual)","text":"<ul> <li>Java source code \u279d compiled to bytecode \u279d interpreted by JVM \u279d JIT compiles hot code paths to native code.</li> <li>Improves speed after warm-up phase.</li> </ul> <pre><code>public class JITExample {\n    public static void main(String[] args) {\n        long start = System.nanoTime();\n        int sum = 0;\n        for (int i = 0; i &lt; 1_000_000; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum: \" + sum);\n    }\n}\n// After several runs, JIT optimizes loop execution for better performance.\n</code></pre>"},{"location":"java/expertJava/#2-tlab-thread-local-allocation-buffer-escape-analysis","title":"\ud83d\udd38 2. TLAB (Thread-Local Allocation Buffer) &amp; Escape Analysis","text":""},{"location":"java/expertJava/#tlab","title":"\u2705 TLAB:","text":"<ul> <li>Each thread gets a small region of heap (TLAB) to allocate objects without contention.</li> <li>Improves multithreaded performance.</li> </ul>"},{"location":"java/expertJava/#escape-analysis","title":"\u2705 Escape Analysis:","text":"<ul> <li>Analyzes if an object escapes a method.</li> <li>If not, JVM may allocate it on the stack instead of heap.</li> </ul> <pre><code>class EscapeAnalysisDemo {\n    public static void allocate() {\n        Point p = new Point(10, 20); // May be allocated on stack due to escape analysis\n        System.out.println(p);\n    }\n}\n\nclass Point {\n    int x, y;\n    Point(int x, int y) { this.x = x; this.y = y; }\n    public String toString() { return \"(\" + x + \", \" + y + \")\"; }\n}\n</code></pre>"},{"location":"java/expertJava/#3-heap-dump-thread-dump","title":"\ud83d\udd38 3. Heap Dump &amp; Thread Dump","text":""},{"location":"java/expertJava/#heap-dump","title":"\u2705 Heap Dump","text":"<ul> <li>A snapshot of memory (heap) showing all objects.</li> <li>Used for memory leak analysis.</li> </ul> <p>How to generate:</p> <pre><code>jmap -dump:format=b,file=heapdump.hprof &lt;pid&gt;\n</code></pre>"},{"location":"java/expertJava/#thread-dump","title":"\u2705 Thread Dump","text":"<ul> <li>Shows all thread states, useful for deadlock detection.</li> </ul> <p>How to generate:</p> <pre><code>jstack &lt;pid&gt;\n</code></pre>"},{"location":"java/expertJava/#4-profiling-tools","title":"\ud83d\udd38 4. Profiling Tools","text":""},{"location":"java/expertJava/#visualvm","title":"\u2705 VisualVM","text":"<ul> <li>Monitors CPU, memory, threads, GC.</li> <li>Load heap dumps and perform profiling.</li> </ul>"},{"location":"java/expertJava/#jfr-java-flight-recorder","title":"\u2705 JFR (Java Flight Recorder)","text":"<ul> <li>Built-in low-overhead profiler.</li> <li>Use with JDK Mission Control.</li> </ul> <p>Enable with:</p> <pre><code>java -XX:StartFlightRecording=duration=60s,filename=recording.jfr -jar MyApp.jar\n</code></pre>"},{"location":"java/expertJava/#jconsole","title":"\u2705 JConsole","text":"<ul> <li>Monitors JVM performance (memory, threads, classes).</li> </ul> <pre><code>jconsole\n</code></pre>"},{"location":"java/expertJava/#summary_8","title":"\u2705 Summary","text":"Concept Description JIT Compiler Compiles bytecode to native machine code at runtime TLAB Thread-local memory allocation for faster object creation Escape Analysis JVM optimization to stack-allocate short-lived objects Heap Dump Snapshot of heap memory Thread Dump Snapshot of thread states VisualVM, JFR, JConsole Profiling and monitoring tools"},{"location":"java/expertJava/#1-encryption-jce-jca","title":"\ud83d\udd38 1. Encryption (JCE, JCA)","text":"<p>Java provides two main APIs:</p> <ul> <li>JCE (Java Cryptography Extension) \u2013 for encryption, key generation, ciphers.</li> <li>JCA (Java Cryptography Architecture) \u2013 a wider API including signing, digest, encryption.</li> </ul>"},{"location":"java/expertJava/#symmetric-encryption-using-aes","title":"\u2705 Symmetric Encryption using AES","text":"<pre><code>import javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport java.util.Base64;\n\npublic class EncryptionDemo {\n    public static void main(String[] args) throws Exception {\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        keyGen.init(128);\n        SecretKey secretKey = keyGen.generateKey();\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        // Encrypt\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] encrypted = cipher.doFinal(\"Hello World\".getBytes());\n        String encText = Base64.getEncoder().encodeToString(encrypted);\n        System.out.println(\"Encrypted: \" + encText);\n\n        // Decrypt\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        System.out.println(\"Decrypted: \" + new String(decrypted));\n    }\n}\n// Output:\n// Encrypted: (some base64 encoded text)\n// Decrypted: Hello World\n</code></pre>"},{"location":"java/expertJava/#2-secure-password-handling","title":"\ud83d\udd38 2. Secure Password Handling","text":"<p>Use hashing + salt. Do NOT store plaintext passwords.</p>"},{"location":"java/expertJava/#using-pbkdf2withhmacsha1","title":"\u2705 Using PBKDF2WithHmacSHA1","text":"<pre><code>import javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport java.security.SecureRandom;\nimport java.util.Base64;\n\npublic class PasswordHashing {\n    public static void main(String[] args) throws Exception {\n        String password = \"mySecret123\";\n        byte[] salt = new byte[16];\n        SecureRandom sr = new SecureRandom();\n        sr.nextBytes(salt);\n\n        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 65536, 128);\n        SecretKeyFactory skf = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n        byte[] hash = skf.generateSecret(spec).getEncoded();\n\n        System.out.println(\"Salt: \" + Base64.getEncoder().encodeToString(salt));\n        System.out.println(\"Hash: \" + Base64.getEncoder().encodeToString(hash));\n    }\n}\n// Output:\n// Salt: random base64 value\n// Hash: hashed password\n</code></pre>"},{"location":"java/expertJava/#3-keystores-and-ssl","title":"\ud83d\udd38 3. Keystores and SSL","text":"<p>A keystore holds private keys and certificates.</p>"},{"location":"java/expertJava/#creating-a-keystore-with-keytool","title":"\u2705 Creating a keystore with keytool","text":"<pre><code>keytool -genkeypair -alias mykey -keyalg RSA -keystore mykeystore.jks -storepass changeit\n</code></pre>"},{"location":"java/expertJava/#loading-a-keystore-in-java","title":"\u2705 Loading a keystore in Java","text":"<pre><code>import java.io.FileInputStream;\nimport java.security.KeyStore;\n\npublic class LoadKeystore {\n    public static void main(String[] args) throws Exception {\n        KeyStore ks = KeyStore.getInstance(\"JKS\");\n        FileInputStream fis = new FileInputStream(\"mykeystore.jks\");\n        ks.load(fis, \"changeit\".toCharArray());\n        System.out.println(\"Keystore loaded with aliases: \" + ks.aliases().hasMoreElements());\n    }\n}\n</code></pre>"},{"location":"java/expertJava/#enabling-ssl-in-a-java-application","title":"\u2705 Enabling SSL in a Java application","text":"<p>Use <code>javax.net.ssl</code> package with custom trust managers or configure server libraries (like Tomcat, Jetty).</p>"},{"location":"java/expertJava/#summary_9","title":"\u2705 Summary","text":"Concept Description JCE/JCA Cryptographic libraries for encryption/signing Symmetric Encryption Encrypt using one secret key (e.g., AES) Password Hashing Securely store passwords using salt + hash Keystore Repository of keys and certificates SSL/TLS Secures communication channels"},{"location":"java/junit/","title":"\ud83e\uddec JUnit","text":"<p>...[Previous content preserved]...</p>"},{"location":"java/junit/#testing-tooling-detailed-guide-beginner-to-expert","title":"\ud83e\uddea Testing &amp; Tooling \u2013 Detailed Guide (Beginner to Expert)","text":"<p>Testing ensures code correctness, maintainability, and confidence during development. Tooling enables automation, logging, and easier collaboration.</p>"},{"location":"java/junit/#1-junit-5-basics-and-assertions-unit-testing-framework","title":"\ud83d\udd38 1. JUnit 5 Basics and Assertions (Unit Testing Framework)","text":"<p>JUnit 5 is the de facto standard testing framework in Java.</p>"},{"location":"java/junit/#key-features","title":"\u2705 Key Features:","text":"<ul> <li>Annotation-based (<code>@Test</code>, <code>@BeforeEach</code>, etc.)</li> <li>Assertions for validating expected results</li> <li>Works with Maven/Gradle</li> </ul>"},{"location":"java/junit/#example","title":"\u2705 Example","text":"<pre><code>import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CalculatorTest {\n\n    @BeforeEach\n    void setup() {\n        // Code before each test\n        System.out.println(\"Test setup\");\n    }\n\n    @Test\n    void testAddition() {\n        int result = 2 + 3;\n        assertEquals(5, result); // Output: true if 2+3==5\n    }\n\n    @Test\n    void testBoolean() {\n        assertTrue(10 &gt; 5); // Output: true\n    }\n\n    @Test\n    void testException() {\n        assertThrows(ArithmeticException.class, () -&gt; {\n            int res = 1 / 0;\n        });\n    }\n}\n</code></pre>"},{"location":"java/junit/#assertions-summary","title":"\u2705 Assertions Summary","text":"<ul> <li><code>assertEquals(expected, actual)</code></li> <li><code>assertTrue(condition)</code></li> <li><code>assertFalse(condition)</code></li> <li><code>assertThrows(Exception.class, ...)</code></li> </ul>"},{"location":"java/junit/#2-mockito-for-mocking-dependency-isolation","title":"\ud83d\udd38 2. Mockito for Mocking (Dependency Isolation)","text":"<p>Mockito is used to create dummy (mock) objects for testing code that depends on external systems.</p>"},{"location":"java/junit/#example-mocking-a-list","title":"\u2705 Example: Mocking a List","text":"<pre><code>import static org.mockito.Mockito.*;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\n\npublic class MockDemo {\n    @Test\n    void testMockList() {\n        List&lt;String&gt; mockList = mock(List.class);\n\n        when(mockList.get(0)).thenReturn(\"Mocked Item\");\n        assertEquals(\"Mocked Item\", mockList.get(0)); // Output: Mocked Item\n\n        verify(mockList).get(0); // Check if method was called\n    }\n}\n</code></pre>"},{"location":"java/junit/#why-mockito","title":"\u2705 Why Mockito?","text":"<ul> <li>Isolate dependencies</li> <li>Test logic independently</li> <li>Avoid hitting DB, network, etc.</li> </ul>"},{"location":"java/junit/#3-test-driven-development-tdd","title":"\ud83d\udd38 3. Test-Driven Development (TDD)","text":""},{"location":"java/junit/#tdd-cycle","title":"\u2705 TDD Cycle:","text":"<ol> <li>Write a failing test</li> <li>Write minimal code to pass</li> <li>Refactor the code</li> </ol>"},{"location":"java/junit/#example_1","title":"\u2705 Example","text":"<pre><code>// Test First\n@Test\nvoid greetTest() {\n    Greeter g = new Greeter();\n    assertEquals(\"Hello, Alice\", g.greet(\"Alice\"));\n}\n\n// Implement Greeter\nclass Greeter {\n    public String greet(String name) {\n        return \"Hello, \" + name;\n    }\n}\n</code></pre> <p>TDD improves:</p> <ul> <li>Design</li> <li>Test coverage</li> <li>Confidence</li> </ul>"},{"location":"java/junit/#4-maven-gradle-build-tools","title":"\ud83d\udd38 4. Maven &amp; Gradle (Build Tools)","text":"<p>Both tools manage dependencies, build lifecycle, testing, packaging, etc.</p>"},{"location":"java/junit/#maven-xml-based","title":"\u2705 Maven (XML-based)","text":"<pre><code>&lt;!-- pom.xml --&gt;\n&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n    &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;\n    &lt;version&gt;5.9.0&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>Commands:</p> <pre><code>mvn test      # Runs test\nmvn package   # Builds JAR/WAR\n</code></pre>"},{"location":"java/junit/#gradle-groovykotlin-dsl","title":"\u2705 Gradle (Groovy/Kotlin DSL)","text":"<pre><code>// build.gradle\ndependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'\n}\n</code></pre> <p>Commands:</p> <pre><code>gradle test     # Run tests\ngradle build    # Build project\n</code></pre>"},{"location":"java/junit/#5-logging-debugging-monitoring","title":"\ud83d\udd38 5. Logging (Debugging &amp; Monitoring)","text":"<p>Logging records events or messages during execution. Logging levels:</p> <ul> <li><code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>FATAL</code></li> </ul>"},{"location":"java/junit/#slf4j-with-logback","title":"\u2705 SLF4J with Logback","text":"<pre><code>import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class LoggerDemo {\n    private static final Logger log = LoggerFactory.getLogger(LoggerDemo.class);\n\n    public static void main(String[] args) {\n        log.info(\"Starting app...\");\n        log.error(\"Something failed!\");\n    }\n}\n</code></pre>"},{"location":"java/junit/#log4j2-custom-configuration","title":"\u2705 Log4j2 (Custom Configuration)","text":"<pre><code>&lt;!-- log4j2.xml --&gt;\n&lt;Configuration&gt;\n  &lt;Appenders&gt;\n    &lt;Console name=\"Console\" target=\"SYSTEM_OUT\"&gt;\n      &lt;PatternLayout pattern=\"%d{HH:mm:ss} [%t] %-5level %logger - %msg%n\"/&gt;\n    &lt;/Console&gt;\n  &lt;/Appenders&gt;\n  &lt;Loggers&gt;\n    &lt;Root level=\"info\"&gt;\n      &lt;AppenderRef ref=\"Console\"/&gt;\n    &lt;/Root&gt;\n  &lt;/Loggers&gt;\n&lt;/Configuration&gt;\n</code></pre>"},{"location":"java/junit/#java-util-logging","title":"\u2705 Java Util Logging","text":"<pre><code>import java.util.logging.Logger;\n\npublic class BuiltInLoggerDemo {\n    private static final Logger logger = Logger.getLogger(\"AppLogger\");\n\n    public static void main(String[] args) {\n        logger.info(\"This is info\");\n    }\n}\n</code></pre>"},{"location":"java/junit/#summary","title":"\u2705 Summary","text":"Concept Description JUnit 5 Unit testing with annotations and assertions Mockito Mocking framework for isolating dependencies TDD Write tests before code to guide implementation Maven/Gradle Build automation and dependency management Logging Track runtime behavior using SLF4J, Log4j, or JUL"},{"location":"java/junit/#full-crud-kafka-integration-with-spring-boot-postgresql-kafka","title":"\ud83e\uddea Full CRUD + Kafka Integration with Spring Boot, PostgreSQL, Kafka","text":""},{"location":"java/junit/#tech-stack","title":"\u2705 Tech Stack:","text":"<ul> <li>Spring Boot</li> <li>PostgreSQL</li> <li>Apache Kafka</li> <li>JUnit 5</li> <li>Mockito</li> <li>Maven</li> </ul>"},{"location":"java/junit/#1-entity-user","title":"\ud83d\udd38 1. Entity: User","text":"<pre><code>@Entity\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n    private String email;\n\n    // Getters and Setters\n}\n</code></pre>"},{"location":"java/junit/#2-repository","title":"\ud83d\udd38 2. Repository","text":"<pre><code>public interface UserRepository extends JpaRepository&lt;User, Long&gt; {}\n</code></pre>"},{"location":"java/junit/#3-service-with-kafka-producer","title":"\ud83d\udd38 3. Service with Kafka Producer","text":"<pre><code>@Service\npublic class UserService {\n    @Autowired\n    private UserRepository userRepository;\n    @Autowired\n    private KafkaTemplate&lt;String, String&gt; kafkaTemplate;\n\n    private static final String TOPIC = \"user-topic\";\n\n    public User createUser(User user) {\n        User saved = userRepository.save(user);\n        kafkaTemplate.send(TOPIC, \"User created: \" + saved.getId());\n        return saved;\n    }\n\n    public Optional&lt;User&gt; getUser(Long id) {\n        return userRepository.findById(id);\n    }\n\n    public List&lt;User&gt; getAllUsers() {\n        return userRepository.findAll();\n    }\n\n    public void deleteUser(Long id) {\n        userRepository.deleteById(id);\n        kafkaTemplate.send(TOPIC, \"User deleted: \" + id);\n    }\n}\n</code></pre>"},{"location":"java/junit/#4-kafka-consumer","title":"\ud83d\udd38 4. Kafka Consumer","text":"<pre><code>@Component\npublic class UserConsumer {\n    @KafkaListener(topics = \"user-topic\", groupId = \"group_id\")\n    public void consume(String message) {\n        System.out.println(\"Consumed message: \" + message);\n    }\n}\n</code></pre>"},{"location":"java/junit/#5-controller","title":"\ud83d\udd38 5. Controller","text":"<pre><code>@RestController\n@RequestMapping(\"/users\")\npublic class UserController {\n    @Autowired\n    private UserService userService;\n\n    @PostMapping\n    public ResponseEntity&lt;User&gt; create(@RequestBody User user) {\n        return ResponseEntity.ok(userService.createUser(user));\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;User&gt; get(@PathVariable Long id) {\n        return userService.getUser(id).map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n    }\n\n    @GetMapping\n    public List&lt;User&gt; list() {\n        return userService.getAllUsers();\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {\n        userService.deleteUser(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n</code></pre>"},{"location":"java/junit/#6-junit-mockito-test","title":"\ud83d\udd38 6. JUnit + Mockito Test","text":"<pre><code>@SpringBootTest\n@ExtendWith(MockitoExtension.class)\nclass UserServiceTest {\n\n    @InjectMocks\n    private UserService userService;\n\n    @Mock\n    private UserRepository userRepository;\n\n    @Mock\n    private KafkaTemplate&lt;String, String&gt; kafkaTemplate;\n\n    @Test\n    void testCreateUser() {\n        User user = new User();\n        user.setName(\"Test User\");\n        user.setEmail(\"test@example.com\");\n\n        when(userRepository.save(any(User.class))).thenReturn(user);\n\n        User saved = userService.createUser(user);\n\n        assertEquals(\"Test User\", saved.getName());\n        verify(kafkaTemplate).send(anyString(), contains(\"User created\"));\n    }\n\n    @Test\n    void testDeleteUser() {\n        doNothing().when(userRepository).deleteById(1L);\n        userService.deleteUser(1L);\n        verify(userRepository).deleteById(1L);\n        verify(kafkaTemplate).send(anyString(), contains(\"User deleted\"));\n    }\n}\n</code></pre>"},{"location":"java/junit/#summary_1","title":"\u2705 Summary","text":"Layer Component Entity User Repository UserRepository extends JpaRepository Service UserService + KafkaProducer Consumer KafkaListener for user-topic Controller REST endpoints <code>/users</code>, <code>/users/{id}</code> Test JUnit5 + Mockito"},{"location":"java/junit/#7-full-test-suite-junit-mockito","title":"\ud83d\udd38 7. Full Test Suite (JUnit + Mockito)","text":""},{"location":"java/junit/#71-usercontrollertest","title":"\u2705 7.1 UserControllerTest","text":"<pre><code>@WebMvcTest(UserController.class)\nclass UserControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private UserService userService;\n\n    @Test\n    void testCreateUser() throws Exception {\n        User user = new User();\n        user.setId(1L);\n        user.setName(\"Test\");\n        user.setEmail(\"test@mail.com\");\n\n        when(userService.createUser(any(User.class))).thenReturn(user);\n\n        mockMvc.perform(post(\"/users\")\n            .contentType(MediaType.APPLICATION_JSON)\n            .content(\"{\"name\":\"Test\",\"email\":\"test@mail.com\"}\"))\n            .andExpect(status().isOk())\n            .andExpect(jsonPath(\"$.id\").value(1));\n    }\n\n    @Test\n    void testGetUser() throws Exception {\n        User user = new User();\n        user.setId(1L);\n        user.setName(\"Test\");\n\n        when(userService.getUser(1L)).thenReturn(Optional.of(user));\n\n        mockMvc.perform(get(\"/users/1\"))\n            .andExpect(status().isOk())\n            .andExpect(jsonPath(\"$.name\").value(\"Test\"));\n    }\n}\n</code></pre>"},{"location":"java/junit/#72-userrepositorytest-integration","title":"\u2705 7.2 UserRepositoryTest (Integration)","text":"<pre><code>@DataJpaTest\nclass UserRepositoryTest {\n\n    @Autowired\n    private TestEntityManager entityManager;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Test\n    void testFindById() {\n        User user = new User();\n        user.setName(\"RepoTest\");\n        user.setEmail(\"repo@test.com\");\n        entityManager.persist(user);\n\n        Optional&lt;User&gt; found = userRepository.findById(user.getId());\n        assertTrue(found.isPresent());\n        assertEquals(\"RepoTest\", found.get().getName());\n    }\n}\n</code></pre>"},{"location":"java/junit/#73-usermodeltest","title":"\u2705 7.3 UserModelTest","text":"<pre><code>class UserModelTest {\n    @Test\n    void testGettersSetters() {\n        User user = new User();\n        user.setId(10L);\n        user.setName(\"John\");\n        user.setEmail(\"john@mail.com\");\n\n        assertEquals(10L, user.getId());\n        assertEquals(\"John\", user.getName());\n        assertEquals(\"john@mail.com\", user.getEmail());\n    }\n}\n</code></pre>"},{"location":"java/junit/#74-kafka-producer-within-service-already-tested","title":"\u2705 7.4 Kafka Producer (within Service already tested)","text":"<p>Tested through <code>UserServiceTest</code>:</p> <ul> <li>Verifies that <code>kafkaTemplate.send()</code> is called on create/delete.</li> </ul> <p>For full Kafka integration test, a Kafka Testcontainer setup is recommended.</p>"},{"location":"k8s/k8s/","title":"\u2638\ufe0f Kubernetes Notes","text":""},{"location":"k8s/k8s/#1-what-is-kubernetes","title":"1. What is Kubernetes?","text":"<ul> <li>Kubernetes, often abbreviated as K8s.</li> <li>It is an open-source platform designed to automate the deployment, scaling, and management of containerized applications. </li> <li>It groups containers that make up an application into logical units for easy management and discovery.</li> </ul>"},{"location":"k8s/k8s/#purpose-of-container-orchestration","title":"Purpose of Container Orchestration","text":"<p>In modern software development, applications are increasingly built using containers (like Docker). While containers solve the works on my machine problem and provide isolation, managing many containers across multiple servers (a cluster) becomes complex. This is where container orchestration comes in:</p> <ul> <li> <p>Deployment Automation: Automates the process of getting your application containers running on a cluster.</p> </li> <li> <p>Scaling: Automatically adjusts the number of container instances based on demand, ensuring performance and availability.</p> </li> <li> <p>Self-Healing: Automatically restarts failed containers, replaces unhealthy ones, and reschedules containers on healthy nodes.</p> </li> <li> <p>Load Balancing: Distributes incoming traffic across multiple container instances to ensure even load.</p> </li> <li> <p>Resource Management: Efficiently allocates compute resources (CPU, memory) to containers across the cluster.</p> </li> <li> <p>Service Discovery: Allows containers to find and communicate with each other easily.</p> </li> <li> <p>Configuration Management: Manages application configurations and sensitive data securely.</p> </li> </ul>"},{"location":"k8s/k8s/#comparison-docker-vs-kubernetes","title":"Comparison: Docker vs Kubernetes","text":"<p>It's a common misconception that Docker and Kubernetes are competing technologies. In reality, they often complement each other.</p> Feature Docker (Engine/CLI) Kubernetes Primary Role Containerization platform (build, run, share containers) Container Orchestration (manage, scale, deploy containers) Scope Single host (primarily) Cluster of hosts (distributed systems) Focus Packaging applications into portable units Managing the lifecycle of many containers at scale Deployment <code>docker run</code> on a single machine Automated deployment across a cluster Scaling Manual scaling (e.g., <code>docker run</code> multiple times) Automatic scaling based on policies Self-Healing Limited (e.g., restart policy) Robust (restarts, reschedules, replaces failed containers) Networking Basic networking for containers on a single host Advanced networking for inter-container communication across cluster Load Balancing Manual or requires external tools Built-in load balancing and service discovery Configuration Environment variables, bind mounts ConfigMaps, Secrets, Volumes Complexity Relatively simple for single-container apps Higher initial learning curve, powerful for complex apps Typical Usage Local development, running single services Production deployments of microservices, distributed apps"},{"location":"k8s/k8s/#analogy","title":"\ud83e\udde0 Analogy:","text":"<p>If Docker is the engine for your car (application), then Kubernetes is the traffic management system that ensures all cars on the road (applications) reach their destination efficiently and safely.</p>"},{"location":"k8s/k8s/#2-kubernetes-architecture","title":"2. Kubernetes Architecture","text":"<p>Kubernetes operates on a master-worker architecture. A Kubernetes cluster consists of at least one Master Node and multiple Worker Nodes.</p> <p>Diagram:</p> <p></p>"},{"location":"k8s/k8s/#master-node-components","title":"Master Node Components","text":"<p>The Master Node (also called Control Plane) manages the cluster and ensures that it remains in the desired state. It includes the following components:</p>"},{"location":"k8s/k8s/#kube-apiserver","title":"kube-apiserver","text":"<ul> <li>Purpose: The front-end for the Kubernetes control plane. All communication with the cluster (from <code>kubectl</code> or other components) goes through the API server.</li> <li>Role: Exposes the Kubernetes API, handles REST operations, validates requests, and updates <code>etcd</code>.</li> <li>Interaction: It's the only component that directly talks to <code>etcd</code>.</li> </ul>"},{"location":"k8s/k8s/#etcd","title":"etcd","text":"<ul> <li>Purpose: A consistent and highly available key-value store that holds all cluster data (cluster state, configuration, metadata).</li> <li>Role: The single source of truth for the Kubernetes cluster.</li> <li>Interaction: Only the <code>kube-apiserver</code> accesses <code>etcd</code>.</li> </ul>"},{"location":"k8s/k8s/#kube-scheduler","title":"kube-scheduler","text":"<ul> <li>Purpose: Watches for newly created Pods that do not have an assigned node and selects a node for them to run on.</li> <li>Role: Considers resource requirements, hardware/software/policy constraints, affinity/anti-affinity rules, and data locality.</li> </ul>"},{"location":"k8s/k8s/#kube-controller-manager","title":"kube-controller-manager","text":"<ul> <li>Purpose: Runs controller processes. Controllers are control loops that watch the shared state of the cluster via the API server and make changes to drive the current state towards the desired state.</li> <li>Role: Manages various controllers:</li> <li>Node Controller: Detects and responds when nodes go down.</li> <li>Replication Controller: Ensures the correct number of Pods are maintained for each ReplicaSet or ReplicationController.</li> <li>Endpoints Controller: Populates the Endpoints object (connecting Services and Pods).</li> <li>Service Account &amp; Token Controllers: Creates default service accounts and API access tokens for new namespaces.</li> </ul>"},{"location":"k8s/k8s/#worker-node-components","title":"Worker Node Components","text":"<p>Worker Nodes (also called Minions or just Nodes) run the actual containerized applications.</p>"},{"location":"k8s/k8s/#kubelet","title":"Kubelet","text":"<ul> <li>Purpose: An agent that runs on</li> </ul>"},{"location":"k8s/k8s/#3-kubernetes-core-concepts","title":"3. Kubernetes Core Concepts","text":"<p>Understanding these fundamental building blocks is crucial for working with Kubernetes.</p>"},{"location":"k8s/k8s/#pod","title":"Pod","text":"<ul> <li>Definition: The smallest deployable unit in Kubernetes. A Pod represents a single instance of a running process in your cluster.</li> </ul>"},{"location":"k8s/k8s/#characteristics","title":"Characteristics:","text":"<ul> <li>Atomic Unit: Can contain one or more tightly coupled containers that share the same network namespace, IP address, and storage.</li> <li>Ephemeral: Pods are designed to be short-lived. If a Pod dies, Kubernetes creates a new one.</li> <li>Shared Resources: Containers share localhost, networking stack (IP, ports), and volumes.</li> </ul> <p>Analogy: A Pod is like a small logical machine that hosts your app\u2019s components.</p> <p>When to use multiple containers in a Pod? Use for sidecar containers (e.g., logging agent, data syncer, proxy) that support the main container.</p>"},{"location":"k8s/k8s/#replicaset","title":"ReplicaSet","text":"<ul> <li>Definition: Ensures a specified number of Pod replicas are running at all times.</li> <li>Purpose: Maintains availability and scaling. Replaces failed Pods, removes excess.</li> <li>Usage: Typically managed through Deployments, not directly created.</li> </ul>"},{"location":"k8s/k8s/#deployment","title":"Deployment","text":"<ul> <li>Definition: A higher-level abstraction for managing ReplicaSets and Pods declaratively.</li> <li>Purpose: Manages the desired state (e.g., number of replicas, Pod version).</li> </ul>"},{"location":"k8s/k8s/#key-features","title":"Key Features:","text":"<ul> <li>Rolling Updates: Update with zero downtime.</li> <li>Rollbacks: Revert to previous versions if needed.</li> <li>Scaling: Scale the number of replicas up or down.</li> </ul> <p>Analogy: Deployment is like a project manager for your app, ensuring correct versioning and scaling.</p>"},{"location":"k8s/k8s/#service","title":"Service","text":"<ul> <li>Definition: An abstraction that exposes a set of Pods as a network service.</li> <li>Purpose: Provides a stable IP/DNS name and acts as a load balancer.</li> </ul>"},{"location":"k8s/k8s/#types-of-services","title":"Types of Services:","text":"<ul> <li>ClusterIP (default) </li> <li>Internal-only access.  </li> <li> <p>Use for backend/internal services.</p> </li> <li> <p>NodePort </p> </li> <li>Exposes service on each node\u2019s static port.  </li> <li>Access via <code>NodeIP:NodePort</code>.  </li> <li> <p>Use for testing/dev environments.</p> </li> <li> <p>LoadBalancer </p> </li> <li>Externally accessible via a cloud load balancer (e.g., AWS ELB).  </li> <li> <p>Use for production-grade public apps.</p> </li> <li> <p>ExternalName </p> </li> <li>Maps service to an external DNS name (e.g., <code>my.db.example.com</code>).  </li> <li>No proxying \u2014 returns a CNAME record.</li> </ul> <p>Analogy: A Service is like a stable phone number \u2014 callers reach your app even if Pods change.</p>"},{"location":"k8s/k8s/#namespace","title":"Namespace","text":"<ul> <li>Definition: Provides a scope for resource names. Useful for isolating resources between teams or environments.</li> <li>Purpose: Logical partitioning of resources.</li> </ul>"},{"location":"k8s/k8s/#default-namespaces","title":"Default Namespaces:","text":"<ul> <li><code>default</code>: For general workloads.</li> <li><code>kube-system</code>: Kubernetes system resources.</li> <li><code>kube-public</code>: Public resources.</li> <li><code>kube-node-lease</code>: Node heartbeat tracking.</li> </ul> <p>Best Practice: Use separate Namespaces for dev, staging, production, and teams.</p>"},{"location":"k8s/k8s/#configmap-secret","title":"ConfigMap &amp; Secret","text":""},{"location":"k8s/k8s/#configmap","title":"ConfigMap:","text":"<ul> <li>Definition: Stores non-confidential config data as key-value pairs.</li> <li>Purpose: Decouple configuration from code.</li> <li>Usage: As environment variables, command args, or mounted files.</li> </ul>"},{"location":"k8s/k8s/#secret","title":"Secret:","text":"<ul> <li>Definition: Stores sensitive data like passwords, tokens, keys.</li> <li>Purpose: Securely handle confidential information.</li> <li>Security: Base64 encoded by default. Enable encryption for production.</li> <li>Usage: Similar to ConfigMaps, but for secret data.</li> </ul> <p>Best Practice: Never store secrets in ConfigMaps.</p>"},{"location":"k8s/k8s/#volume-persistentvolumeclaim-pvc","title":"Volume &amp; PersistentVolumeClaim (PVC)","text":""},{"location":"k8s/k8s/#volume","title":"Volume:","text":"<ul> <li>Definition: A directory accessible to containers in a Pod.</li> <li>Purpose: Shares data between containers or persists data beyond container lifespan.</li> </ul>"},{"location":"k8s/k8s/#basic-volume-types","title":"Basic Volume Types:","text":"<ul> <li><code>emptyDir</code>: Temporary storage, tied to Pod life.</li> <li><code>hostPath</code>: Mounts node\u2019s file path (not recommended in production).</li> </ul>"},{"location":"k8s/k8s/#persistentvolume-pv","title":"PersistentVolume (PV):","text":"<ul> <li>Definition: Pre-provisioned storage in the cluster.</li> <li>Purpose: Durable, cluster-level storage.</li> </ul>"},{"location":"k8s/k8s/#persistentvolumeclaim-pvc","title":"PersistentVolumeClaim (PVC):","text":"<ul> <li>Definition: User request for PV.</li> <li>Purpose: Abstracts storage request from underlying storage.</li> </ul> <p>Analogy: PV is like a raw hard drive, PVC is the user\u2019s storage request, and Volume is the Pod\u2019s access point.</p>"},{"location":"k8s/k8s/#other-workload-resources","title":"Other Workload Resources","text":""},{"location":"k8s/k8s/#daemonset","title":"DaemonSet","text":"<ul> <li>Purpose: Ensures a Pod runs on all (or some) nodes.</li> <li>Use Case: Cluster-wide agents (e.g., log collectors, metrics exporters).</li> </ul>"},{"location":"k8s/k8s/#statefulset","title":"StatefulSet","text":"<ul> <li>Purpose: Manages stateful applications.</li> <li>Use Case: Databases (e.g., MySQL, Kafka) needing stable identities and storage.</li> </ul>"},{"location":"k8s/k8s/#job","title":"Job","text":"<ul> <li>Purpose: Creates Pods that run to completion.</li> <li>Use Case: One-off or batch tasks (e.g., report generation).</li> </ul>"},{"location":"k8s/k8s/#cronjob","title":"CronJob","text":"<ul> <li>Purpose: Runs Jobs on a schedule (like Unix cron).</li> <li>Use Case: Periodic backups, scheduled reports.</li> </ul>"},{"location":"k8s/k8s/#4-kubernetes-objects-and-yaml-syntax","title":"4. Kubernetes Objects and YAML Syntax","text":"<p>Kubernetes resources are defined using YAML (<code>YAML Ain't Markup Language</code>) files. These files describe the desired state of objects in your cluster.</p>"},{"location":"k8s/k8s/#anatomy-of-a-kubernetes-manifest","title":"Anatomy of a Kubernetes Manifest","text":"<p>Every Kubernetes YAML manifest generally contains four top-level fields:</p>"},{"location":"k8s/k8s/#1-apiversion","title":"1. <code>apiVersion</code>","text":"<ul> <li>What it is: Specifies which version of the Kubernetes API you're using.</li> <li>Examples:</li> <li><code>v1</code> (for core resources like Pod, Service)</li> <li><code>apps/v1</code> (for Deployments, StatefulSets)</li> <li><code>batch/v1</code> (for Jobs, CronJobs)</li> </ul>"},{"location":"k8s/k8s/#2-kind","title":"2. <code>kind</code>","text":"<ul> <li>What it is: The type of Kubernetes object being created.</li> <li>Examples: <code>Pod</code>, <code>Deployment</code>, <code>Service</code>, <code>ConfigMap</code>, <code>PersistentVolumeClaim</code></li> </ul>"},{"location":"k8s/k8s/#3-metadata","title":"3. <code>metadata</code>","text":"<ul> <li>What it contains:</li> <li><code>name</code>: Unique name of the object within a Namespace.</li> <li><code>namespace</code>: (Optional) Scope of the resource. Defaults to <code>default</code> if not specified.</li> <li><code>labels</code>: Key-value pairs used for organization and selection.</li> <li><code>annotations</code>: Additional metadata (non-identifying, like build version or tool info).</li> </ul>"},{"location":"k8s/k8s/#4-spec","title":"4. <code>spec</code>","text":"<ul> <li>What it is: Defines the desired state of the object.</li> <li>Note: The structure under <code>spec</code> depends on the object's <code>kind</code>.</li> </ul>"},{"location":"k8s/k8s/#example-basic-yaml-structure","title":"Example Basic YAML Structure","text":"<pre><code>apiVersion: &lt;api-version&gt;\nkind: &lt;kind-of-object&gt;\nmetadata:\n  name: &lt;object-name&gt;\n  namespace: &lt;optional-namespace&gt;\n  labels:\n    app: &lt;application-name&gt;\n    tier: &lt;tier-name&gt;\nspec:\n  # Desired state of the object (varies by kind)\n</code></pre>"},{"location":"k8s/k8s/#example-yaml-files","title":"Example YAML Files","text":"<p>These YAML files define various Kubernetes resources like Pods, Deployments, Services, ConfigMaps, and PVCs.</p>"},{"location":"k8s/k8s/#pod-example","title":"\ud83e\uddf1 Pod Example","text":"<pre><code># my-pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-nginx-pod\n  labels:\n    app: web\n    tier: frontend\nspec:\n  containers:\n    - name: nginx-container\n      image: nginx:latest\n      ports:\n        - containerPort: 80\n</code></pre> <p>Deployment Example</p> <pre><code># my-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-web-deployment\n  labels:\n    app: web\nspec:\n  replicas: 3 # Desired number of Pod replicas\n  selector:\n    matchLabels:\n      app: web # Selects Pods with label app: web\n  template: # Pod template\n    metadata:\n      labels:\n        app: web\n        version: v1.0.0\n    spec:\n      containers:\n      - name: nginx-container\n        image: nginx:1.21.6\n        ports:\n        - containerPort: 80\n        resources: # Optional: Define resource requests and limits\n          requests:\n            memory: \"64Mi\"\n            cpu: \"250m\" # 0.25 CPU core\n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\" # 0.5 CPU core\n</code></pre> <p>Service Example (NodePort)</p> <pre><code># my-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-web-service\n  labels:\n    app: web\nspec:\n  selector:\n    app: web # Selects Pods with label app: web\n  type: NodePort # Exposes service on a static port on each node\n  ports:\n    - protocol: TCP\n      port: 80 # Service port (internal)\n      targetPort: 80 # Container port\n      nodePort: 30007 # Optional: Specific node port (range 30000-32767)\n</code></pre> <p>ConfigMap Example</p> <pre><code># my-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-config\ndata:\n  # Key-value pairs for configuration\n  APP_COLOR: blue\n  APP_ENV: development\n  database.url: jdbc:mysql://localhost:3306/mydb\n\n</code></pre> <p>PersistentVolumeClaim (PVC) Example</p> <pre><code># my-pvc.yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: my-data-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce # Can be mounted as read-write by a single node\n  resources:\n    requests:\n      storage: 5Gi # Request 5 Gigabytes of storage\n  # storageClassName: standard # Optional: If you have a specific StorageClass\n</code></pre>"},{"location":"k8s/k8s/#5-kubernetes-cli-kubectl","title":"5. Kubernetes CLI (kubectl)","text":"<ul> <li><code>kubectl</code> is the command-line tool for interacting with Kubernetes clusters.</li> </ul>"},{"location":"k8s/k8s/#cluster-interaction","title":"\ud83d\udd0c Cluster Interaction","text":"<ul> <li><code>kubectl</code> communicates with the kube-apiserver on the Control Plane (Master Node).</li> </ul>"},{"location":"k8s/k8s/#common-kubectl-commands-grouped-by-function","title":"\ud83d\udee0\ufe0f Common <code>kubectl</code> Commands (Grouped by Function)","text":""},{"location":"k8s/k8s/#creation-application","title":"\u2705 Creation &amp; Application","text":"<p>Apply a configuration (create or update):</p> <pre><code>kubectl apply -f &lt;filename.yaml&gt;\nkubectl apply -f &lt;directory_containing_yamls&gt;/\n# Example:\nkubectl apply -f my-deployment.yaml\n</code></pre> <p>Best Practice:  Always use kubectl apply for managing resources, as it's idempotent (can be run multiple times safely).</p> <p>Create a resource (if it doesn't exist):</p> <pre><code>\nkubectl create -f &lt;filename.yaml&gt; # Creates only if resource doesn't exist\nkubectl create deployment my-app --image=nginx # Quick imperitive command\n</code></pre> <p>Note: <code>kubectl create</code> is generally used for initial setup or one-off resources. <code>kubectl apply</code> is preferred for declarative, version-controlled resource management.</p>"},{"location":"k8s/k8s/#getting-information","title":"\ud83d\udd0d Getting Information","text":""},{"location":"k8s/k8s/#list-resources","title":"List resources:","text":"<pre><code>\nkubectl get pods\nkubectl get deployments\nkubectl get services\nkubectl get all # Get common resources (pods, services, deployments, replicasets)\nkubectl get pods -o wide # Show more details (Node IP, Pod IP)\nkubectl get pods -n &lt;namespace&gt; # Get pods in a specific namespace\nkubectl get pods --show-labels # Show labels\n</code></pre>"},{"location":"k8s/k8s/#describe-a-resource-detailed-information","title":"Describe a resource (detailed information):","text":"<pre><code>\nkubectl describe pod &lt;pod-name&gt;\nkubectl describe deployment &lt;deployment-name&gt;\nkubectl describe service &lt;service-name&gt;\n# Example:\nkubectl describe pod my-nginx-pod-abc12\n</code></pre> <p>Purpose: Shows events, status, resource limits, volumes, etc. Indispensable for     troubleshooting.</p>"},{"location":"k8s/k8s/#view-logs-from-a-container-in-a-pod","title":"View logs from a container in a Pod:","text":"<pre><code>\nkubectl logs &lt;pod-name&gt;\nkubectl logs -f &lt;pod-name&gt; # Follow logs in real-time\nkubectl logs &lt;pod-name&gt; -c &lt;container-name&gt; # For multi-container pods\n</code></pre>"},{"location":"k8s/k8s/#execute-a-command-in-a-running-container","title":"Execute a command in a running container:","text":"<pre><code>kubectl exec -it &lt;pod-name&gt; -- /bin/bash # Get a shell into the container\nkubectl exec &lt;pod-name&gt; -- ls /app # Run a command\n# Example:\nkubectl exec -it my-nginx-pod-abc12 -- bash\n</code></pre>"},{"location":"k8s/k8s/#copy-files-tofrom-a-container","title":"Copy files to/from a container:","text":"<pre><code>kubectl cp &lt;source-path&gt; &lt;pod-name&gt;:&lt;destination-path&gt;\nkubectl cp &lt;pod-name&gt;:&lt;source-path&gt; &lt;destination-path&gt;\n# Example:\nkubectl cp my-local-file.txt my-nginx-pod-abc12:/usr/share/nginx/html/\n</code></pre>"},{"location":"k8s/k8s/#view-resource-usage-requires-metrics-server","title":"View resource usage (requires Metrics Server):","text":"<pre><code>kubectl top nodes\nkubectl top pods\n</code></pre>"},{"location":"k8s/k8s/#check-cluster-events","title":"Check cluster events:","text":"<pre><code>kubectl get events\n</code></pre>"},{"location":"k8s/k8s/#deletion","title":"Deletion:","text":"<p>Delete a resource:</p> <pre><code>kubectl delete -f &lt;filename.yaml&gt;\nkubectl delete pod &lt;pod-name&gt;\nkubectl delete deployment &lt;deployment-name&gt;\nkubectl delete service &lt;service-name&gt;\nkubectl delete namespace &lt;namespace-name&gt; # Deletes everything in that namespace\n# Example:\nkubectl delete -f my-deployment.yaml\nkubectl delete deployment my-web-deployment\n</code></pre>"},{"location":"k8s/k8s/#scaling-and-updates","title":"Scaling and Updates:","text":"<p>Scale a Deployment:</p> <pre><code>kubectl scale deployment &lt;deployment-name&gt; --replicas=&lt;number&gt;\n# Example:\nkubectl scale deployment my-web-deployment --replicas=5\n</code></pre> <p>Rollout status/history/undo:</p> <pre><code>kubectl rollout status deployment/&lt;deployment-name&gt;\nkubectl rollout history deployment/&lt;deployment-name&gt;\nkubectl rollout undo deployment/&lt;deployment-name&gt; # Rollback to previous version\n</code></pre>"},{"location":"k8s/k8s/#namespace-management","title":"Namespace Management:","text":"<p>List namespaces:</p> <pre><code>kubectl get namespaces\n</code></pre> <p>Create a namespace:</p> <pre><code>kubectl create namespace &lt;namespace-name&gt;\n# Example: kubectl create namespace dev-env\n</code></pre> <p>Set default namespace for current context:</p> <pre><code>kubectl config set-context --current --namespace=&lt;namespace-name&gt;\n# Example: kubectl config set-context --current --namespace=dev-env\n</code></pre> <p>This makes your infrastructure version-controllable and repeatable.</p>"},{"location":"k8s/k8s/#best-practices-for-kubectl","title":"Best Practices for <code>kubectl</code>","text":"<p>Declarative vs. Imperative: While imperative commands (<code>kubectl run</code>, <code>kubectl create deployment</code>) are useful    for quick tests, prefer declarative management using YAML files with:  </p> <p><code>kubectl apply -f &lt;file.yaml&gt;</code></p> <ul> <li>This makes your infrastructure version-controllable and repeatable.</li> </ul>"},{"location":"k8s/k8s/#namespaces","title":"\ud83d\udcdb Namespaces","text":"<ul> <li>Always specify the namespace using the <code>-n &lt;namespace&gt;</code> flag if you're not operating in the default namespace.</li> </ul> <p><code>bash   kubectl get pods -n dev</code></p>"},{"location":"k8s/k8s/#labels","title":"\ud83c\udff7\ufe0f Labels","text":"<p>Use labels extensively for organizing and selecting Kubernetes resources.</p> <ul> <li>Labels are key-value pairs used to categorize resources.</li> <li>They enable filtering, selection, and grouping for operations like deployments, services, and monitoring.</li> </ul> <p>Example (YAML):</p> <pre><code>metadata:\n  labels:\n    app: my-app\n    environment: dev\n</code></pre>"},{"location":"k8s/k8s/#describe-for-troubleshooting","title":"\ud83d\udee0\ufe0f Describe for Troubleshooting","text":"<p>When something isn't working, <code>kubectl describe</code> should be your first stop.</p> <ul> <li>It provides detailed insights into the resource's current state.</li> <li>Useful information includes:</li> <li>Events and warnings</li> <li>Pod scheduling and status</li> <li>Liveness/readiness probe results</li> <li>Volume mounts and conditions</li> </ul> <p>Example:</p> <pre><code>kubectl describe pod my-app-pod\n</code></pre>"},{"location":"k8s/k8s/#logs-for-application-insights","title":"\ud83d\udcc4 Logs for Application Insights","text":"<p>Use <code>kubectl logs</code> to check logs and understand application behavior.</p> <p>Examples:</p> <pre><code>kubectl logs &lt;pod-name&gt;\nkubectl logs -f &lt;pod-name&gt;              # Follow logs in real time\nkubectl logs &lt;pod-name&gt; -c &lt;container&gt;  # For multi-container Pods\n</code></pre>"},{"location":"k8s/k8s/#6-kubernetes-networking","title":"6. Kubernetes Networking","text":"<p>Kubernetes networking enables communication between Pods, Services, and the outside world. It's a complex topic, but here's a simplified overview.</p>"},{"location":"k8s/k8s/#key-principles","title":"Key Principles:","text":"<ul> <li>Every Pod gets its own unique IP address.</li> <li>Pods on a node can communicate with all Pods on all other nodes without NAT.</li> <li>Agents on a node (e.g., kubelet) can communicate with all Pods on that node.</li> </ul>"},{"location":"k8s/k8s/#pod-to-pod-communication","title":"Pod-to-Pod Communication","text":"<ul> <li>When Pods are on the same Node: They communicate directly using their Pod IP addresses.</li> <li>When Pods are on different Nodes: Traffic is routed between nodes by the underlying Container Network Interface (CNI) plugin (e.g., Calico, Flannel, Weave Net). Each Pod has a unique IP address within the cluster, and these IPs are routable across the cluster.</li> </ul>"},{"location":"k8s/k8s/#service-to-service-communication","title":"Service-to-Service Communication","text":"<ul> <li>Services provide a stable IP address and DNS name for a set of Pods.</li> <li>Pods communicate with each other via Services using the Service's stable IP address or DNS name.</li> <li><code>kube-proxy</code> on each node ensures that traffic sent to a Service's IP is correctly load-balanced to the healthy Pods backing that Service.</li> </ul> <p>Example: A frontend Pod wants to talk to a backend Pod. Instead of knowing the backend Pod's ephemeral IP, it sends traffic to the backend-service name or IP, and Kubernetes handles the routing and load balancing.</p>"},{"location":"k8s/k8s/#dns-resolution","title":"DNS Resolution","text":"<ul> <li>Kubernetes provides internal DNS resolution.</li> <li>Services are automatically assigned DNS names.</li> <li>Within the same Namespace: <code>service-name</code></li> <li>Across Namespaces: <code>service-name.namespace-name.svc.cluster.local</code></li> <li>This allows Pods to discover and communicate with Services by name rather than by IP address.</li> </ul>"},{"location":"k8s/k8s/#network-policies-basic-intro","title":"Network Policies (Basic Intro)","text":"<ul> <li>Definition: Kubernetes Network Policies specify how groups of Pods are allowed to communicate with each other and with external network endpoints.</li> <li>Purpose: Enhance security by restricting network access between Pods. By default, Pods are non-isolated and can accept traffic from any source.</li> <li>Requirement: Network Policies require a CNI plugin that supports them (e.g., Calico, Cilium).</li> </ul> <p>Analogy: Network Policies are like firewall rules for your Pods.</p>"},{"location":"k8s/k8s/#7-kubernetes-storage","title":"7. Kubernetes Storage","text":"<p>Kubernetes provides robust mechanisms for managing storage, allowing applications to persist data beyond the life of a single container or Pod.</p>"},{"location":"k8s/k8s/#types-of-volumes","title":"Types of Volumes","text":"<p>Kubernetes Volumes are directories accessible to the containers in a Pod. The data in a Volume persists as long as the Pod exists. Some common types:</p>"},{"location":"k8s/k8s/#emptydir","title":"<code>emptyDir</code>:","text":"<ul> <li>Purpose: A simple, empty volume created when a Pod is first assigned to a node.</li> <li>Persistence: Its contents are deleted when the Pod is removed from the node.</li> <li>Use Case: Temporary scratch space, sharing files between containers in the same Pod.</li> </ul>"},{"location":"k8s/k8s/#hostpath","title":"<code>hostPath</code>:","text":"<ul> <li>Purpose: Mounts a file or directory from the host node's filesystem into a Pod.</li> <li>Persistence: Data persists beyond Pod lifecycle, but tied to a specific node.</li> <li>Use Case: Primarily for system-level Pods (e.g., monitoring agents), or if you need access to host files.</li> </ul> <p>Caution: Generally discouraged for production applications due to lack of portability and potential security risks.</p>"},{"location":"k8s/k8s/#persistentvolume-pv-and-persistentvolumeclaim-pvc-covered-in-section-3","title":"<code>persistentVolume (PV)</code> and <code>persistentVolumeClaim (PVC)</code>: (Covered in Section 3)","text":"<ul> <li>PV: A piece of storage in the cluster, provisioned by an admin (or dynamically).</li> <li>PVC: A request for storage by a user, that binds to an available PV.</li> <li>Purpose: Provides a way to consume durable storage abstractly.</li> <li>Use Case: Databases, persistent application data.</li> </ul>"},{"location":"k8s/k8s/#storageclasses-basic-overview","title":"StorageClasses (Basic Overview)","text":"<ul> <li>Definition: An API object that describes the \"classes\" of storage offered in a cluster.</li> <li>Purpose: Allows administrators to define different types of storage (e.g., \"fast-SSD\", \"cheap-HDD\", \"network-storage\") and users to request them without knowing the underlying storage details.</li> <li>Dynamic Provisioning: When a PVC requests a <code>storageClassName</code>, the StorageClass can dynamically provision a matching PV for that PVC.</li> </ul> <p>Analogy: StorageClass is like a catalog of storage options, and PVC is like ordering from that catalog.</p>"},{"location":"k8s/k8s/#8-kubernetes-services-comparison-table","title":"8. Kubernetes Services Comparison Table","text":"<p>Here's a comparison of the main Service types in Kubernetes, including Ingress for external access.</p> Feature ClusterIP NodePort LoadBalancer Ingress Exposure Internal to cluster On each Node's IP at a static port External IP provisioned by cloud provider HTTP/HTTPS routing based on host/path Accessibility Only from within the cluster From outside the cluster (via NodeIP:NodePort) From anywhere on the internet From anywhere on the internet (via DNS of Ingress controller) Load Balancing Internal (<code>kube-proxy</code>) Internal (<code>kube-proxy</code>) External (cloud provider's LB) Application-layer (L7) (Ingress controller) Cost Free Free Varies by cloud provider (often charged) Requires Ingress Controller (potentially charged for underlying LB) Complexity Low Low Moderate (requires cloud provider setup) Moderate to High (requires Ingress Controller setup) Use Cases Internal microservices, backend services Demo/testing, non-production apps, exposing a few services Production apps in cloud, public APIs Production web apps (HTTP/HTTPS), multiple services on single IP, SSL termination DNS Internal DNS name Internal DNS name + NodeIP/NodePort External IP + Internal DNS name External DNS name (for Ingress Host)"},{"location":"k8s/k8s/#9-kubernetes-ingress","title":"9. Kubernetes Ingress","text":"<p>While Services expose applications, Ingress is designed for managing external access to services in a cluster, typically HTTP and HTTPS.</p>"},{"location":"k8s/k8s/#ingress-controller-and-ingress-resource","title":"Ingress Controller and Ingress Resource","text":""},{"location":"k8s/k8s/#ingress-controller","title":"Ingress Controller:","text":"<ul> <li>Definition: An application that runs in your cluster and watches the Kubernetes API for Ingress resources.</li> <li>Purpose: Fulfills the Ingress rules by acting as a reverse proxy/load balancer. Common Ingress Controllers include Nginx Ingress Controller, Traefik, Istio, GKE Ingress, AWS ALB Ingress Controller.</li> <li>Deployment: The Ingress Controller itself is typically deployed as a Deployment and exposed via a NodePort or LoadBalancer Service.</li> </ul>"},{"location":"k8s/k8s/#ingress-resource","title":"Ingress Resource:","text":"<ul> <li>Definition: A Kubernetes API object that defines rules for routing external HTTP/HTTPS traffic to Services within the cluster.</li> <li>Purpose: Provides flexible routing based on hostname, path, and TLS termination.</li> </ul> <p>Analogy: The Ingress Controller is the actual traffic cop, and the Ingress Resource is the rulebook that tells the traffic cop how to direct traffic.</p> <p>Ingress Architecture: </p>"},{"location":"k8s/k8s/#basic-ingress-yaml-example","title":"Basic Ingress YAML Example","text":"<p>This example routes traffic for <code>myapp.example.com/api</code> to <code>api-service</code> and <code>myapp.example.com/</code> to <code>frontend-service</code>.</p> <pre><code>#### my-ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-app-ingress\n  annotations:\n    # Example annotation for Nginx Ingress Controller:\n    nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  rules:\n  - host: myapp.example.com\n    http:\n      paths:\n      - path: /api\n        pathType: Prefix\n        backend:\n          service:\n            name: api-service # Name of your API Service\n            port:\n              number: 8080\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: frontend-service # Name of your Frontend Service\n            port:\n              number: 80\n  # Optional: TLS/SSL termination\n  # tls:\n  #   - hosts:\n  #       - myapp.example.com\n  #     secretName: my-app-tls-secret # Secret containing TLS certificate and key\n</code></pre> <p>Note: You must have an Ingress Controller running in your cluster for Ingress resources to work.</p>"},{"location":"k8s/k8s/#10-helm-basics","title":"10. Helm Basics","text":"<p>Helm is a package manager for Kubernetes. It simplifies the deployment and management of applications on Kubernetes clusters.</p>"},{"location":"k8s/k8s/#what-is-helm","title":"What is Helm?","text":"<ul> <li>Definition: The \"apt/yum/brew\" for Kubernetes.</li> <li>Purpose: Helps you define, install, and upgrade even the most complex Kubernetes applications.</li> </ul>"},{"location":"k8s/k8s/#key-concepts","title":"Key Concepts:","text":"<ul> <li>Charts: Pre-configured Kubernetes resource packages.</li> <li>Repositories: Places where charts are stored and shared.</li> <li>Releases: An instance of a chart running in a Kubernetes cluster.</li> </ul>"},{"location":"k8s/k8s/#helm-charts-and-their-structure","title":"Helm Charts and their Structure","text":"<p>A Helm Chart is a collection of files that describe a related set of Kubernetes resources. Think of it as a template for a Kubernetes application.</p> <p>Typical Chart Structure:</p>"},{"location":"k8s/k8s/#helm-chart-structure-my-app-chart","title":"Helm Chart Structure: <code>my-app-chart/</code>","text":"<pre><code>my-app-chart/\n\u251c\u2500\u2500 Chart.yaml          # A YAML file containing information about the chart (name, version, etc.)\n\u251c\u2500\u2500 values.yaml         # Default configuration values for the chart\n\u251c\u2500\u2500 templates/          # Directory containing Kubernetes manifest templates\n\u2502   \u251c\u2500\u2500 deployment.yaml # Template for a Deployment object\n\u2502   \u251c\u2500\u2500 service.yaml    # Template for a Service object\n\u2502   \u251c\u2500\u2500 _helpers.tpl    # Optional: Contains reusable template snippets\n\u2502   \u2514\u2500\u2500 NOTES.txt       # Optional: Instructions for the user after installation\n\u251c\u2500\u2500 charts/             # Optional: Contains dependent charts (subcharts)\n\u2514\u2500\u2500 README.md           # Optional: A brief description of the chart\n</code></pre> <p>Installing and Using Helm Commands Install Helm CLI:</p> <p>macOS (Homebrew): brew install helm</p> <p>Linux: Download from helm.sh or use package manager.</p> <p>Add a Chart Repository (e.g., Bitnami stable charts):</p> <pre><code>\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update # Update information about charts from all repositories\n</code></pre> <p>Search for Charts:</p> <pre><code>helm search repo nginx\n</code></pre> <p>Install a Chart:</p> <pre><code>\nhelm install &lt;release-name&gt; &lt;chart-name&gt; --namespace &lt;namespace&gt; --values &lt;your-values.yaml&gt;\n# Example: Install Nginx Ingress Controller\nhelm install my-nginx-ingress bitnami/nginx-ingress-controller --namespace ingress-nginx\n# Example: Install WordPress\nhelm install my-wordpress bitnami/wordpress --set mysql.rootPassword=mysecretpassword --namespace blog\n--set: Override specific values from values.yaml directly on the command line.\n\n--values: Provide an entire custom values.yaml file.\n</code></pre> <p>List Releases:</p> <pre><code>\nhelm list\nhelm list -n &lt;namespace&gt;\n</code></pre> <p>Upgrade a Release:</p> <pre><code>\nhelm upgrade &lt;release-name&gt; &lt;chart-name&gt; --namespace &lt;namespace&gt; --values &lt;your-new-values.yaml&gt;\n# Example:\nhelm upgrade my-wordpress bitnami/wordpress -f my-new-wordpress-values.yaml\n</code></pre> <p>Uninstall a Release:</p> <pre><code>\nhelm uninstall &lt;release-name&gt; --namespace &lt;namespace&gt;\n# Example:\nhelm uninstall my-wordpress -n blog\n</code></pre> <p>Get Release Status:</p> <pre><code>helm status &lt;release-name&gt; -n &lt;namespace&gt;\n</code></pre> <p>Lint a Chart (check for best practices and syntax errors):</p> <pre><code>helm lint ./my-app-chart\n</code></pre> <p>Package a Chart:</p> <pre><code>helm package ./my-app-chart\n</code></pre>"},{"location":"k8s/k8s/#11-kubernetes-security-basics","title":"11. Kubernetes Security Basics","text":"<p>Security is paramount in Kubernetes. Here are fundamental concepts.</p> <p>Role-Based Access Control (RBAC) Purpose: Authorizes users and applications to interact with the Kubernetes API.</p> <p>Concepts:</p> <ul> <li> <p>Role: Defines a set of permissions within a specific Namespace (e.g., \"can read Pods\" or \"can manage Deployments\").</p> </li> <li> <p>ClusterRole: Similar to a Role, but applies across the entire cluster (non-namespaced resources like Nodes or PersistentVolumes, or namespaced resources across all Namespaces).</p> </li> <li> <p>RoleBinding: Grants the permissions defined in a Role to a user, group, or ServiceAccount within a specific Namespace.</p> </li> <li> <p>ClusterRoleBinding: Grants the permissions defined in a ClusterRole to a user, group, or ServiceAccount across the entire cluster.</p> </li> </ul> <p>Analogy: RBAC is like defining roles in an organization (e.g., \"Manager,\" \"Developer\") and then assigning those roles to specific people or teams.</p> <p>ServiceAccount Definition: Provides an identity for processes that run in a Pod.</p> <p>Purpose: Allows Pods to authenticate to the Kubernetes API server when they need to perform actions (e.g., a controller that watches for new resources).</p> <p>Default: Every Pod automatically gets a default ServiceAccount in its Namespace, which usually has limited permissions.</p> <p>Best Practice: Create specific ServiceAccounts with the minimal necessary permissions for your applications.</p> <p>Network Policies Purpose: (As discussed in Section 6) Control Pod-to-Pod communication using firewall rules. By default, Pods are open. Network Policies allow you to isolate them.</p> <p>Best Practice: Implement Network Policies to restrict traffic flows to only what is necessary, following the principle of least privilege.</p> <p>Secrets and ConfigMaps (Best Practices) Secrets: (As discussed in Section 3) For sensitive data.</p> <p>Best Practice: Always use Secrets for credentials. Do not store sensitive data in ConfigMaps or directly in YAML files in version control.</p> <p>For production, consider external Secret management solutions (e.g., HashiCorp Vault, cloud provider KMS integrations) to avoid storing plaintext secrets in etcd or in your Kubernetes manifests.</p> <p>ConfigMaps: For non-confidential configuration.</p> <p>Best Practice: Use ConfigMaps to decouple configuration from your application images.</p>"},{"location":"k8s/k8s/#12-monitoring-and-logging","title":"12. Monitoring and Logging","text":"<p>Effective monitoring and logging are crucial for understanding the health and performance of your Kubernetes applications and cluster.</p> <p>Basic Health Checks - Liveness Probes: (See Section 14) Determine if a container is running and healthy. If a Liveness Probe fails, Kubernetes restarts the container.</p> <ul> <li>Readiness Probes: (See Section 14) Determine if a container is ready to serve traffic. If a Readiness Probe fails, the Pod is removed from Service load balancing until it becomes ready.</li> </ul> <p>kubectl logs and kubectl top - kubectl logs: (As discussed in Section 5) Retrieve standard output and standard error from containers. Essential for debugging application issues.</p> <ul> <li>kubectl top: (As discussed in Section 5) Provides basic CPU and memory usage of nodes and pods. Requires the Kubernetes Metrics Server to be installed in the cluster.</li> </ul> <p>Prometheus and Grafana Overview These are de-facto standards for monitoring in Kubernetes environments.</p> <p>Prometheus:</p> <ul> <li> <p>Purpose: A powerful open-source monitoring and alerting toolkit designed for reliability and scalability.</p> </li> <li> <p>How it works: Scrapes metrics from configured targets (Kubernetes components, application endpoints) at regular intervals, stores them, and allows for querying and alerting.</p> </li> </ul> <p>Grafana:</p> <ul> <li> <p>Purpose: An open-source analytics and interactive visualization web application.</p> </li> <li> <p>How it works: Used to create dashboards that visualize data collected by Prometheus (or other data sources). Provides powerful querying and visualization capabilities.</p> </li> </ul> <p>Typical Setup:</p> <ul> <li> <p>Prometheus Server (runs in Kubernetes) scrapes metrics.</p> </li> <li> <p>Grafana (runs in Kubernetes) connects to Prometheus as a data source and displays dashboards.</p> </li> <li> <p>Node Exporter (DaemonSet) on each node exposes node-level metrics for Prometheus.</p> </li> <li> <p>kube-state-metrics (Deployment) exposes Kubernetes object metrics (e.g., Pod status, Deployment replicas).</p> </li> </ul>"},{"location":"k8s/k8s/#13-deploying-a-full-stack-app-spring-boot-angular-mysql","title":"13. Deploying a Full-Stack App (Spring Boot + Angular + MySQL)","text":""},{"location":"k8s/k8s/#full-stack-application-architecture","title":"Full-Stack Application Architecture","text":""},{"location":"k8s/k8s/#application-components","title":"Application Components","text":"<ul> <li>Frontend: Angular application served by Nginx</li> <li>Backend: Spring Boot REST API</li> <li>Database: MySQL</li> </ul>"},{"location":"k8s/k8s/#kubernetes-application-architecture","title":"Kubernetes Application Architecture","text":"<pre><code>        User\n         |\n         V\n+---------------------+\n|  Internet / Browser |\n+---------------------+\n         | (HTTP/HTTPS)\n         V\n+---------------------+\n| Ingress Controller  |\n+---------------------+\n         |\n         |--&gt; Host: `myapp.com/api` \u2192 Spring Boot Service\n         |--&gt; Host: `myapp.com/`   \u2192 Angular Service\n         V\n+-----------------------------------+\n|     Kubernetes Cluster            |\n|                                   |\n|  +---------------------------+   |\n|  |   Frontend Service        |   |\n|  | (ClusterIP)               |   |\n|  +----+----------------------+   |\n|       |                          |\n|       V                          |\n|  +---------------------------+   |\n|  |   Frontend Deployment     |   |\n|  |   (Nginx + Angular)       |   |\n|  +---------------------------+   |\n|                                   |\n|  +---------------------------+   |\n|  |   Backend Service         |   |\n|  | (ClusterIP)               |   |\n|  +----+----------------------+   |\n|       |                          |\n|       V                          |\n|  +---------------------------+   |\n|  |   Backend Deployment      |   |\n|  |   (Spring Boot)           |   |\n|  +----+----------------------+   |\n|       |                          |\n|       V                          |\n|  +---------------------------+   |\n|  |   MySQL Service           |   |\n|  | (ClusterIP)               |   |\n|  +----+----------------------+   |\n|       |                          |\n|       V                          |\n|  +---------------------------+   |\n|  |   MySQL StatefulSet       |   |\n|  |   + PVC for Data          |   |\n|  +---------------------------+   |\n+-----------------------------------+\n</code></pre> <p>YAML Manifests:</p> <p>We'll use a single k8s-fullstack.yaml file for simplicity.</p>"},{"location":"k8s/k8s/#k8s-fullstackyaml","title":"k8s-fullstack.yaml","text":""},{"location":"k8s/k8s/#1-mysql-deployment-using-statefulset-for-persistence","title":"1. MySQL Deployment (using StatefulSet for persistence)","text":"<pre><code>apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mysql\n  labels:\n    app: mysql\nspec:\n  selector:\n    matchLabels:\n      app: mysql\n  serviceName: \"mysql\" # headless service for stable network identity\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n      - name: mysql\n        image: mysql:8.0\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: mysql-root-password\n        - name: MYSQL_DATABASE\n          valueFrom:\n            configMapKeyRef:\n              name: app-config\n              key: MYSQL_DATABASE\n        ports:\n        - containerPort: 3306\n          name: mysql\n        volumeMounts:\n        - name: mysql-data # Mount the volume for persistent data\n          mountPath: /var/lib/mysql\n  volumeClaimTemplates: # Define the PVC for this StatefulSet\n  - metadata:\n      name: mysql-data\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 5Gi # Request 5GB of storage\n      # storageClassName: standard # Uncomment if you have a specific StorageClass\n</code></pre>"},{"location":"k8s/k8s/#2-mysql-service-clusterip-for-internal-communication","title":"2. MySQL Service (ClusterIP, for internal communication)","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-service\n  labels:\n    app: mysql\nspec:\n  ports:\n  - port: 3306\n    targetPort: 3306\n    protocol: TCP\n    name: mysql\n  selector:\n    app: mysql\n  clusterIP: None # Headless service for StatefulSet\n</code></pre>"},{"location":"k8s/k8s/#3-spring-boot-backend-deployment","title":"3. Spring Boot Backend Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: spring-boot-backend\n  labels:\n    app: backend\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: backend\n  template:\n    metadata:\n      labels:\n        app: backend\n    spec:\n      containers:\n      - name: spring-boot-app\n        image: yourusername/spring-boot-app:1.0.0 # Replace with your image!\n        env:\n        - name: SPRING_DATASOURCE_URL\n          valueFrom:\n            configMapKeyRef:\n              name: app-config\n              key: SPRING_DATASOURCE_URL\n        - name: SPRING_DATASOURCE_USERNAME\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: mysql-username\n        - name: SPRING_DATASOURCE_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: mysql-password\n        ports:\n        - containerPort: 8080\n        livenessProbe: # Example liveness probe\n          httpGet:\n            path: /actuator/health/liveness # Adjust path for your Spring Boot app\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe: # Example readiness probe\n          httpGet:\n            path: /actuator/health/readiness # Adjust path\n            port: 8080\n          initialDelaySeconds: 15\n          periodSeconds: 5\n\n</code></pre>"},{"location":"k8s/k8s/#4-spring-boot-backend-service-clusterip-for-internal-and-ingress-access","title":"4. Spring Boot Backend Service (ClusterIP, for internal and Ingress access)","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: backend-service\n  labels:\n    app: backend\nspec:\n  selector:\n    app: backend\n  ports:\n  - protocol: TCP\n    port: 8080\n    targetPort: 8080\n  type: ClusterIP\n</code></pre>"},{"location":"k8s/k8s/#5-angular-frontend-deployment","title":"5. Angular Frontend Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: angular-frontend\n  labels:\n    app: frontend\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n      - name: nginx-angular\n        image: yourusername/angular-nginx:1.0.0 # Replace with your image!\n        ports:\n        - containerPort: 80\n</code></pre>"},{"location":"k8s/k8s/#6-angular-frontend-service-clusterip-for-ingress-access","title":"6. Angular Frontend Service (ClusterIP, for Ingress access)","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: frontend-service\n  labels:\n    app: frontend\nspec:\n  selector:\n    app: frontend\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: ClusterIP\n</code></pre>"},{"location":"k8s/k8s/#7-configmap-for-application-configuration","title":"7. ConfigMap for application configuration","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-config\ndata:\n  MYSQL_DATABASE: myappdb\n  SPRING_DATASOURCE_URL: jdbc:mysql://mysql-service:3306/myappdb?useSSL=false&amp;allowPublicKeyRetrieval=true\n</code></pre>"},{"location":"k8s/k8s/#8-secret-for-sensitive-data-base64-encoded","title":"8. Secret for sensitive data (base64 encoded)","text":"<pre><code># Create secrets first:\n# echo -n 'root_password_here' | base64\n# echo -n 'myuser' | base64\n# echo -n 'mypassword' | base64\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secret\ntype: Opaque\ndata:\n  mysql-root-password: &lt;base64_encoded_root_password&gt; # e.g., cG9zdGdyZXNfcGFzc3dvcmRfaGVyZQ==\n  mysql-username: &lt;base64_encoded_db_username&gt;\n  mysql-password: &lt;base64_encoded_db_password&gt;\n</code></pre>"},{"location":"k8s/k8s/#9-ingress-for-external-routing","title":"9. Ingress for external routing","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-app-ingress\n  annotations:\n    # Use appropriate annotations for your Ingress Controller (e.g., Nginx, AWS ALB)\n    # For Nginx Ingress Controller:\n    nginx.ingress.kubernetes.io/rewrite-target: /$2 # For path stripping if needed\n    nginx.ingress.kubernetes.io/ssl-redirect: \"false\" # Optional, if not using HTTPS\nspec:\n  ingressClassName: nginx # Required for Kubernetes v1.18+\n  rules:\n  - host: myapp.example.com # Replace with your domain\n    http:\n      paths:\n      - path: /api(/|$)(.*) # Route traffic for /api to backend\n        pathType: Prefix\n        backend:\n          service:\n            name: backend-service\n            port:\n              number: 8080\n      - path: /(.*) # Route all other traffic to frontend\n        pathType: Prefix\n        backend:\n          service:\n            name: frontend-service\n            port:\n              number: 80\n  # Uncomment and configure TLS if you have a certificate secret\n  # tls:\n  #   - hosts:\n  #       - myapp.example.com\n  #     secretName: myapp-tls-secret # Create this secret with 'kubectl create secret tls myapp-tls-secret --key private.key --cert certificate.crt'\n</code></pre> <p>Deployment Steps: Build and push your Docker images:</p> <pre><code>docker build -t yourusername/spring-boot-app:1.0.0 ./spring-boot-app\ndocker push yourusername/spring-boot-app:1.0.0\ndocker build -t yourusername/angular-nginx:1.0.0 ./angular-nginx\ndocker push yourusername/angular-nginx:1.0.0\n</code></pre> <p>Create your mysql-secret:</p> <pre><code>kubectl create secret generic mysql-secret \\\n  --from-literal=mysql-root-password='your_root_password' \\\n  --from-literal=mysql-username='myuser' \\\n  --from-literal=mysql-password='mypassword'\n</code></pre> <p>Apply the full-stack YAML:</p> <pre><code>\nkubectl apply -f k8s-fullstack.yaml\n</code></pre> <p>Verify Deployments and Services:</p> <pre><code>kubectl get deployments\nkubectl get pods\nkubectl get services\nkubectl get pvc\nkubectl get ingress\n</code></pre> <p>Access the application:</p> <p>If using a cloud provider, the LoadBalancer for your Ingress Controller will get an external IP. Update your DNS A record for myapp.example.com to point to the Ingress LoadBalancer IP. Alternatively, if using NodePort for Ingress Controller, access via NodeIP:NodePort.</p>"},{"location":"k8s/k8s/#14-kubernetes-best-practices","title":"14. Kubernetes Best Practices","text":"<p>Adopting these practices ensures robust, scalable, and maintainable applications in Kubernetes.</p> <p>Liveness and Readiness Probes Liveness Probe:</p> <p>Purpose: Tells Kubernetes when to restart a container. If the Liveness Probe fails, Kubernetes knows the container is unhealthy and will terminate and restart it.</p> <p>Configuration: httpGet, tcpSocket, or exec command.</p> <p>Example (in Pod/Deployment spec):</p> <pre><code>livenessProbe:\n  httpGet:\n    path: /healthz\n    port: 8080\n  initialDelaySeconds: 15 # Wait 15s before first check\n  periodSeconds: 10     # Check every 10s\n  timeoutSeconds: 5     # Timeout after 5s\n  failureThreshold: 3   # Restart after 3 failed attempts\nReadiness Probe:\n</code></pre> <p>Purpose: Tells Kubernetes when a container is ready to serve traffic. If the Readiness Probe fails, the Pod is removed from the Service's endpoints (no traffic is sent to it) until it becomes ready.</p> <ul> <li>Configuration: httpGet, tcpSocket, or exec command.</li> </ul> <p>Example (in Pod/Deployment spec):</p> <pre><code>readinessProbe:\n  httpGet:\n    path: /ready\n    port: 8080\n  initialDelaySeconds: 5\n  periodSeconds: 5\n  timeoutSeconds: 3\n  failureThreshold: 1 # Unready after 1 failed attempt\n</code></pre> <p>Difference: Liveness deals with \"should I restart this container?\", Readiness deals with \"is this container ready to accept requests?\".</p> <p>Resource Limits and Requests Purpose: Crucial for efficient resource allocation and cluster stability.</p> <p>requests: The minimum amount of CPU and memory a container needs. Kubernetes uses this for scheduling decisions (ensures a node has enough resources available).</p> <p>limits: The maximum amount of CPU and memory a container can use. If a container exceeds its memory limit, it's terminated. If it exceeds its CPU limit, it's throttled.</p> <p>Example (in container spec):</p> <pre><code>resources:\n  requests:\n    memory: \"256Mi\"\n    cpu: \"500m\" # 0.5 CPU core\n  limits:\n    memory: \"512Mi\"\n    cpu: \"1000m\" # 1 CPU core\n</code></pre> <p>Best Practice: Always define requests and limits for your production workloads. Separation by Namespaces Purpose: (As discussed in Section 3) Logical isolation within a cluster. Best Practice: Create separate Namespaces for different environments (e.g., dev, staging, prod). Create separate Namespaces for different teams or applications. Facilitates RBAC, Network Policies, and resource quotas. Auto-scaling with Horizontal Pod Autoscaler (HPA) Purpose: Automatically scales the number of Pod replicas in a Deployment or ReplicaSet based on observed CPU utilization or other custom metrics.</p> <p>How it works: HPA continuously monitors metrics and adjusts the replicas field of the target resource.</p> <p>Example:</p> <pre><code>\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: my-web-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: my-web-deployment # Target Deployment to scale\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70 # Target 70% average CPU utilization\n  # - type: Resource # Example for memory\n  #   resource:\n  #     name: memory\n  #     target:\n  #       type: AverageValue\n  #       averageValue: 200Mi\n  ```\n\nBest Practice: Use HPA to ensure your application can handle varying loads efficiently. Requires the Metrics Server.\n\n## 15. Cleanup and Maintenance\nRegular cleanup and maintenance are essential for keeping your Kubernetes cluster healthy and cost-efficient.\n\nCommands to Delete Resources\nDelete by file:\n\n```Bash\nkubectl delete -f &lt;filename.yaml&gt;\n</code></pre> <p>Delete by type and name:</p> <pre><code>kubectl delete deployment &lt;deployment-name&gt;\nkubectl delete service &lt;service-name&gt;\nkubectl delete pod &lt;pod-name&gt; --grace-period=0 --force # Force delete a stuck pod\nkubectl delete pvc &lt;pvc-name&gt;\nkubectl delete pv &lt;pv-name&gt; # Careful! Ensure no PVCs are using it.\n</code></pre> <p>Delete multiple resources by label:</p> <pre><code>\nkubectl delete pods -l app=nginx\n</code></pre> <p>Delete all resources of a type in a namespace:</p> <pre><code>kubectl delete all --all -n &lt;namespace&gt; # Deletes all common resources (deployments, services, pods, etc.)\n</code></pre> <p>Delete a Namespace and all its contents:</p> <pre><code>kubectl delete namespace &lt;namespace-name&gt;\n</code></pre> <p>Cleaning Up Cluster Resources Pruning unused resources (Disk space):</p> <pre><code>docker system prune -a # On your node if Docker is container runtime, to clean up unused images/containers\n</code></pre> <p>Note: This is usually done at the Docker daemon level on individual nodes, not directly kubectl. Kubernetes itself manages the lifecycle of its objects.</p> <p>Deleting PersistentVolumes: When you delete a PVC, the corresponding PV might not be automatically deleted. Check the Reclaim Policy of the PV (e.g., Retain, Recycle, Delete).</p> <p>If Retain, you must manually delete the PV after the PVC is gone.</p> <pre><code>kubectl get pv\nkubectl delete pv &lt;pv-name&gt;\nInspecting Pods\n</code></pre> <p>Check Pod status:</p> <pre><code>kubectl get pods\n</code></pre> <p>Common statuses: Running, Pending, ContainerCreating, Error, CrashLoopBackOff. Get detailed information for a specific Pod:</p> <pre><code>kubectl describe pod &lt;pod-name&gt;\n</code></pre> <p>Look at Events section for common issues (e.g., FailedScheduling, ImagePullBackOff, LivenessProbe failed).</p> <p>Check Pod logs:</p> <pre><code>\nkubectl logs &lt;pod-name&gt;\n</code></pre>"},{"location":"k8s/k8s/#16-comparison-tables","title":"16. Comparison Tables","text":""},{"location":"k8s/k8s/#docker-compose-vs-kubernetes","title":"Docker Compose vs Kubernetes","text":"Feature Docker Compose Kubernetes Primary Use Local development, single-host multi-container apps Production deployments, large-scale distributed systems Orchestration Basic (starts/stops linked containers) Advanced (auto-scaling, self-healing, rolling updates) Scalability Manual scaling on a single host (<code>docker-compose up --scale</code>) Automatic scaling across a cluster High Availability Limited to single host, no automatic failover Built-in HA, automatic failover of workloads Complexity Simpler, faster to set up for small projects Higher learning curve, more powerful and flexible Deployment Unit Service (defined in <code>docker-compose.yml</code>) Pod (managed by Deployments, StatefulSets, etc.) Networking Bridge networks between services on single host Complex networking across multiple nodes, CNI plugins Storage Docker volumes, bind mounts PV/PVC, StorageClasses, various volume types Security Basic (user/group permissions, Docker security) Robust RBAC, Network Policies, Secrets management Tools <code>docker compose</code> CLI <code>kubectl</code> CLI, Helm, dashboard, cloud provider tools Ideal For Quick local dev, small projects, PoCs Microservices, enterprise-grade applications, cloud-native"},{"location":"k8s/k8s/#replicaset-vs-deployment-vs-statefulset","title":"ReplicaSet vs Deployment vs StatefulSet","text":"Feature ReplicaSet Deployment StatefulSet Primary Purpose Ensure desired number of Pod replicas Declarative updates and management of Pods/ReplicaSets Manage stateful applications with stable identity Pod Identity No stable identity (random Pod names) No stable identity (random Pod names) Stable, unique network identifiers (e.g., <code>mysql-0</code>) Pod Ordering No guaranteed ordering for creation/deletion No guaranteed ordering for creation/deletion Guaranteed ordered, graceful deployment/deletion Persistent Storage Can use PVCs, but Pod-to-PVC mapping is not stable Can use PVCs, but Pod-to-PVC mapping is not stable Each Pod gets its own dedicated, stable PVC (via <code>volumeClaimTemplates</code>) Use Case Underlying controller for Deployments Stateless applications, web servers, APIs Databases, message queues (Kafka), distributed systems Updates Managed by Deployment for rolling updates Built-in rolling updates, rollbacks Ordered, graceful rolling updates and scaling Scale Down Behavior Arbitrary Pods are removed Arbitrary Pods are removed Pods are terminated in reverse ordinal order <p>Export to Sheets</p>"},{"location":"k8s/k8s/#17-cli-commands-grouped-by-function","title":"17. CLI Commands Grouped by Function","text":"<p>This section consolidates kubectl commands for quick reference.</p>"},{"location":"k8s/k8s/#general-cluster-information","title":"General Cluster Information","text":"<ul> <li> <p><code>kubectl version</code>   Display Kubernetes client and server versions.</p> </li> <li> <p><code>kubectl cluster-info</code>   Display information about the cluster master and services.</p> </li> <li> <p><code>kubectl config view</code>   Display merged kubeconfig settings.</p> </li> <li> <p><code>kubectl get nodes</code>   List cluster nodes.</p> </li> <li> <p><code>kubectl describe node &lt;node-name&gt;</code>   Show detailed information about a node.</p> </li> <li> <p><code>kubectl top nodes</code>   Show CPU/memory usage for nodes (requires Metrics Server).</p> </li> </ul>"},{"location":"k8s/k8s/#resource-management-crud-operations","title":"Resource Management (CRUD operations)","text":""},{"location":"k8s/k8s/#create","title":"Create","text":"<ul> <li> <p><code>kubectl apply -f &lt;filename.yaml&gt;</code>   Create or update resources defined in a YAML file. (Preferred for declarative management)</p> </li> <li> <p><code>kubectl create -f &lt;filename.yaml&gt;</code>   Create resources if they don't exist.</p> </li> <li> <p><code>kubectl create deployment &lt;name&gt; --image=&lt;image&gt;</code>   Imperatively create a Deployment.</p> </li> <li> <p><code>kubectl create service &lt;type&gt; &lt;name&gt; --tcp=&lt;port&gt;:&lt;target-port&gt;</code>   Imperatively create a Service.</p> </li> <li> <p><code>kubectl create namespace &lt;name&gt;</code>   Create a Namespace.</p> </li> <li> <p><code>kubectl create configmap &lt;name&gt; --from-literal=&lt;key&gt;=&lt;value&gt;</code>   Create a ConfigMap from literals.</p> </li> <li> <p><code>kubectl create secret generic &lt;name&gt; --from-literal=&lt;key&gt;=&lt;value&gt;</code>   Create a Secret from literals.</p> </li> <li> <p><code>kubectl create secret tls &lt;name&gt; --key=&lt;key-file&gt; --cert=&lt;cert-file&gt;</code>   Create a TLS Secret.</p> </li> </ul>"},{"location":"k8s/k8s/#get-list","title":"Get (List)","text":"<ul> <li> <p><code>kubectl get all</code>   List common resources (pods, deployments, services, replicasets).</p> </li> <li> <p><code>kubectl get pods</code>   List Pods.</p> </li> <li> <p><code>kubectl get deployments</code>   List Deployments.</p> </li> <li> <p><code>kubectl get services</code>   List Services.</p> </li> <li> <p><code>kubectl get ingress</code>   List Ingress resources.</p> </li> <li> <p><code>kubectl get configmaps</code>   List ConfigMaps.</p> </li> <li> <p><code>kubectl get secrets</code>   List Secrets.</p> </li> <li> <p><code>kubectl get pvc</code>   List PersistentVolumeClaims.</p> </li> <li> <p><code>kubectl get pv</code>   List PersistentVolumes.</p> </li> <li> <p><code>kubectl get namespaces</code>   List Namespaces.</p> </li> <li> <p><code>kubectl get daemonsets</code>   List DaemonSets.</p> </li> <li> <p><code>kubectl get statefulsets</code>   List StatefulSets.</p> </li> <li> <p><code>kubectl get jobs</code>   List Jobs.</p> </li> <li> <p><code>kubectl get cronjobs</code>   List CronJobs.</p> </li> <li> <p><code>kubectl get &lt;resource-type&gt; -n &lt;namespace&gt;</code>   Get resources in a specific Namespace.</p> </li> <li> <p><code>kubectl get &lt;resource-type&gt; -o wide</code>   Get resources with more details.</p> </li> <li> <p><code>kubectl get &lt;resource-type&gt; -l &lt;key&gt;=&lt;value&gt;</code>   Get resources filtered by label.</p> </li> <li> <p><code>kubectl get &lt;resource-type&gt; -o yaml</code>   Get resource in YAML format (useful for inspecting current state).</p> </li> </ul>"},{"location":"k8s/k8s/#describe-detailed-information","title":"Describe (Detailed Information)","text":"<ul> <li> <p><code>kubectl describe pod &lt;pod-name&gt;</code>   Describe a Pod.</p> </li> <li> <p><code>kubectl describe deployment &lt;deployment-name&gt;</code>   Describe a Deployment.</p> </li> <li> <p><code>kubectl describe service &lt;service-name&gt;</code>   Describe a Service.</p> </li> <li> <p><code>kubectl describe configmap &lt;configmap-name&gt;</code>   Describe a ConfigMap.</p> </li> <li> <p><code>kubectl describe secret &lt;secret-name&gt;</code>   Describe a Secret.</p> </li> <li> <p><code>kubectl describe pvc &lt;pvc-name&gt;</code>   Describe a PVC.</p> </li> <li> <p><code>kubectl describe pv &lt;pv-name&gt;</code>   Describe a PV.</p> </li> <li> <p><code>kubectl describe ing &lt;ingress-name&gt;</code>   Describe an Ingress.</p> </li> </ul>"},{"location":"k8s/k8s/#delete","title":"Delete","text":"<ul> <li> <p><code>kubectl delete -f &lt;filename.yaml&gt;</code>   Delete resources defined in a YAML file.</p> </li> <li> <p><code>kubectl delete pod &lt;pod-name&gt;</code>   Delete a Pod.</p> </li> <li> <p><code>kubectl delete deployment &lt;deployment-name&gt;</code>   Delete a Deployment.</p> </li> <li> <p><code>kubectl delete service &lt;service-name&gt;</code>   Delete a Service.</p> </li> <li> <p><code>kubectl delete ingress &lt;ingress-name&gt;</code>   Delete an Ingress.</p> </li> <li> <p><code>kubectl delete namespace &lt;namespace-name&gt;</code>   Delete a Namespace (and all resources within it).</p> </li> <li> <p><code>kubectl delete all --all -n &lt;namespace&gt;</code>   Delete all common resources in a Namespace.</p> </li> <li> <p><code>kubectl delete pods -l app=my-app</code>   Delete Pods by label.</p> </li> </ul>"},{"location":"k8s/k8s/#debugging-and-troubleshooting","title":"Debugging and Troubleshooting","text":"<ul> <li> <p><code>kubectl logs &lt;pod-name&gt;</code>   Print the logs for a container in a Pod.</p> </li> <li> <p><code>kubectl logs -f &lt;pod-name&gt;</code>   Stream (follow) logs.</p> </li> <li> <p><code>kubectl logs &lt;pod-name&gt; -c &lt;container-name&gt;</code>   Get logs from a specific container in a multi-container Pod.</p> </li> <li> <p><code>kubectl exec -it &lt;pod-name&gt; -- /bin/bash</code>   Execute a shell inside a running container.</p> </li> <li> <p><code>kubectl cp &lt;source-path&gt; &lt;pod-name&gt;:&lt;destination-path&gt;</code>   Copy files into a container.</p> </li> <li> <p><code>kubectl cp &lt;pod-name&gt;:&lt;source-path&gt; &lt;destination-path&gt;</code>   Copy files out of a container.</p> </li> <li> <p><code>kubectl port-forward &lt;pod-name&gt; &lt;local-port&gt;:&lt;container-port&gt;</code>   Forward a local port to a port on a Pod.</p> </li> <li> <p><code>kubectl get events</code>   List recent events in the cluster.</p> </li> </ul>"},{"location":"k8s/k8s/#scaling-and-updates_1","title":"Scaling and Updates","text":"<ul> <li> <p><code>kubectl scale deployment &lt;deployment-name&gt; --replicas=&lt;number&gt;</code>   Scale a Deployment to a specific number of replicas.</p> </li> <li> <p><code>kubectl autoscale deployment &lt;deployment-name&gt; --min=1 --max=5 --cpu-percent=70</code>   Create an HPA (Horizontal Pod Autoscaler).</p> </li> <li> <p><code>kubectl rollout status deployment/&lt;deployment-name&gt;</code>   Check the status of a deployment rollout.</p> </li> <li> <p><code>kubectl rollout history deployment/&lt;deployment-name&gt;</code>   View rollout history.</p> </li> <li> <p><code>kubectl rollout undo deployment/&lt;deployment-name&gt;</code>   Rollback to the previous deployment version.</p> </li> <li> <p><code>kubectl set image deployment/&lt;deployment-name&gt; &lt;container-name&gt;=&lt;new-image&gt;</code>   Update container image in a deployment.</p> </li> </ul>"},{"location":"k8s/k8s/#context-and-configuration","title":"Context and Configuration","text":"<ul> <li> <p><code>kubectl config get-contexts</code>   List available contexts.</p> </li> <li> <p><code>kubectl config use-context &lt;context-name&gt;</code>   Switch to a specific context.</p> </li> <li> <p><code>kubectl config set-context --current --namespace=&lt;namespace-name&gt;</code>   Set the default Namespace for the current context.</p> </li> </ul>"},{"location":"python/python/","title":"\ud83d\udc0d Python Basics","text":"<p>yet to start</p>"},{"location":"setup/readme/","title":"\ud83d\udee0\ufe0f Setup","text":""},{"location":"setup/readme/#host-documentation-on-github-using-mkdocs","title":"Host Documentation on GitHub using MkDocs","text":"<pre><code>python --version\nmkdocks --version \npip install mkdocs\nmkdocs new .   \npip install mkdocs-material \nmkdocs serve\nmkdocs gh-deploy  \n\n</code></pre>"}]}