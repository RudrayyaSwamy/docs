{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"readme/","text":"Host Documentation on GitHub using MkDocs python --version mkdocks --version pip install mkdocs mkdocs new . pip install mkdocs-material mkdocs serve mkdocs gh-deploy hello","title":"setup"},{"location":"az-204/az-204/","text":"\ud83d\udd11 1. Azure Compute Solutions App Service Purpose : Platform-as-a-Service (PaaS) offering for hosting web applications, REST APIs, and mobile backends Features : Automatic scaling Built-in load balancing Support for .NET, .NET Core, Java, Ruby, Node.js, PHP, Python Continuous deployment from GitHub, Azure DevOps, or any Git repo Use Cases : Web applications, API backends, mobile app backends Advantages : No infrastructure management, supports custom domains and SSL Functions Purpose : Serverless compute service for running event-triggered code Key Characteristics : Pay-per-execution pricing model Automatic scaling Supports multiple languages (C#, Java, JavaScript, Python, PowerShell) Trigger Types : HTTP (API endpoints) Timer (scheduled tasks) Blob Storage (file uploads) Queue Storage (message processing) Event Grid (event processing) Use Cases : Microservices, event processing, lightweight APIs ACI (Azure Container Instances) & AKS (Azure Kubernetes Service) ACI : Simplest way to run containers in Azure No orchestration needed Fast startup (seconds) Ideal for: One-off tasks, dev/test scenarios, simple applications AKS : Managed Kubernetes service Full container orchestration Features: Auto-scaling, self-healing, load balancing Ideal for: Microservices architectures, production workloads Virtual Machines Purpose : Infrastructure-as-a-Service (IaaS) offering for full control over OS and environment Characteristics : Complete control over the virtualized hardware Supports Windows and Linux Various sizes optimized for different workloads Use Cases : Legacy applications requiring specific OS versions Custom software stacks High-performance computing Applications requiring direct access to hardware \ufffd 2. Azure Storage Solutions Blob Storage Purpose : Object storage for massive amounts of unstructured data Access Tiers : Hot: Frequently accessed data Cool: Infrequently accessed data (lower cost) Archive: Rarely accessed data (lowest cost, retrieval latency) Features : Tier lifecycle management Data encryption at rest Shared Access Signatures (SAS) for secure access Table Storage Purpose : NoSQL key-value store for semi-structured data Characteristics : Schemaless design Fast, cost-effective for large volumes of simple data Partition key + row key structure Use Cases : User data, device information, metadata storage Queue Storage Purpose : Message queue service for asynchronous communication Features : First-In-First-Out (FIFO) processing At-least-once delivery Message time-to-live (TTL) configuration Use Cases : Decoupling application components, load leveling File Storage Purpose : Fully managed file shares using SMB protocol Characteristics : Accessible from cloud or on-premises Supports concurrent access Can be cached on Windows Servers with Azure File Sync Use Cases : Lift-and-shift of file-based applications, shared configuration files \ud83d\udd11 3.Azure Security Azure AD (Active Directory) Purpose : Cloud-based identity and access management service Features : Single sign-on (SSO) Multi-factor authentication (MFA) Application management Device management B2B and B2C capabilities OAuth 2.0/OpenID Connect OAuth 2.0 : Authorization framework for delegated access OpenID Connect : Authentication layer built on OAuth 2.0 Flow Types : Authorization Code (web apps) Implicit (SPAs) Client Credentials (service-to-service) Device Code (IoT/CLI) Managed Identity Purpose : Automatically managed identity in Azure AD for Azure services Types : System-assigned (tied to resource lifecycle) User-assigned (standalone identity) Benefits : Eliminates need for credentials in code Key Vault Purpose : Centralized secrets management Stores : Secrets (passwords, connection strings) Keys (encryption keys) Certificates Features : Access policies and RBAC Hardware security modules (HSMs) Versioning RBAC (Role-Based Access Control) Purpose : Granular access management for Azure resources Components : Security principal (who) Role definition (what permissions) Scope (where) Built-in Roles : Owner, Contributor, Reader Service-specific roles \ud83d\udd11 4. Monitoring, Troubleshooting, and Optimization Application Insights Purpose : Application performance management (APM) service Monitors : Request rates, response times, failure rates Dependency tracking Exceptions and logs Custom metrics and events Azure Monitor Purpose : Comprehensive solution for collecting, analyzing, and acting on telemetry Components : Metrics: Numerical values from resources Logs: Log data with KQL queries Alerts: Notifications based on conditions Workbooks: Interactive reports Log Analytics Purpose : Log data repository and query engine Features : Kusto Query Language (KQL) for powerful analytics Cross-resource queries Saved queries and functions Integration with Azure Monitor Alerts/Autoscale Alerts : Metric alerts (threshold-based) Log alerts (query-based) Activity log alerts (operations-based) Autoscale : Scale based on metrics or schedules Scale sets for VMs App Service scale-out \ud83d\udd11 5. Data Solutions Cosmos DB Purpose : Globally distributed, multi-model database service Consistency Levels : Strong, Bounded Staleness, Session, Consistent Prefix, Eventual APIs Supported : SQL, MongoDB, Cassandra, Gremlin, Table Features : Turnkey global distribution SLA-backed latency and availability Automatic indexing SQL Database Purpose : Fully managed relational database Deployment Models : Single database Elastic pool (shared resources) Managed instance (near-complete SQL Server compatibility) Features : Built-in high availability Intelligent performance tuning Advanced threat protection EF Core (Entity Framework Core) Purpose : Object-Relational Mapper (ORM) for .NET Features : LINQ support Change tracking Database migrations Cross-platform Use with Azure : Simplifies data access to Azure SQL, Cosmos DB \ud83d\udd11 6. Integrating Azure Services Event Grid Purpose : Event routing service using publish-subscribe model Characteristics : Fully managed event routing Supports custom and Azure service events Push-based delivery Use Cases : Reacting to blob storage events, custom event processing Event Hubs Purpose : Big data streaming platform and event ingestion service Features : High throughput (millions of events/sec) Capture feature for automatic data persistence Kafka compatibility Use Cases : IoT telemetry, clickstream analytics Service Bus Purpose : Enterprise messaging with queues and publish-subscribe topics Features : FIFO guarantees Dead-letter queues Duplicate detection Sessions for message ordering Use Cases : Order processing, financial transactions Logic Apps Purpose : Serverless workflow automation Characteristics : Visual designer 200+ connectors Enterprise Integration Pack for B2B scenarios Use Cases : Business process automation, system integration API Management (APIM) Purpose : API gateway for publishing, securing, and analyzing APIs Features : Rate limiting Request/response transformation Developer portal Multiple authentication options \ud83d\udd11 7. Deploying and Managing Resources ARM Templates Purpose : Infrastructure as Code (IaC) for Azure Characteristics : JSON format Declarative syntax Idempotent deployments Modular design with linked templates Azure CLI/PowerShell Azure CLI : Cross-platform command-line tool Bash-like syntax Interactive mode available Azure PowerShell : PowerShell cmdlets for Azure More granular control than CLI Ideal for Windows environments Resource Manager (ARM) Purpose : Deployment and management service for Azure Features : Group resources into resource groups Dependency handling Tagging for organization Access control CI/CD with GitHub Actions/Azure DevOps GitHub Actions : YAML-based workflows Tight GitHub integration Marketplace for actions Azure DevOps : Pipelines for CI/CD Test plans Artifact feeds Full application lifecycle management \ud83d\udd11 8. Caching and Performance Optimization Azure Redis Cache Purpose : In-memory data store based on Redis Tiers : Basic (single node) Standard (replicated) Premium (with persistence and clustering) Use Cases : Session store, output cache, message broker CDN (Content Delivery Network) Purpose : Global content caching for improved performance Features : Edge locations worldwide Custom domains and HTTPS Rules engine for content handling Integration with Storage and Web Apps \ud83d\udd11 9. API and Web App Development Secure API Development Authentication : Azure AD integration OAuth 2.0 flows API keys (for simpler scenarios) Best Practices : Proper status codes Versioning Throttling Input validation Swagger/OpenAPI Purpose : API description format Features : Machine-readable API contracts Interactive documentation Client SDK generation Integration with API Management \ud83d\udd11 10. Messaging Patterns Queue-based Load Leveling Pattern : Use a queue as buffer between components Benefits : Smooths intermittent heavy loads Prevents resource exhaustion Enables asynchronous processing Competing Consumers Pattern : Multiple consumers process messages from same queue Benefits : Increased throughput Horizontal scaling Fault tolerance Publisher/Subscriber Pattern : Events distributed to multiple subscribers Azure Services : Event Grid (lightweight) Service Bus Topics (enterprise) Event Hubs (high volume)","title":"AZ-204"},{"location":"az-204/az-204/#1-azure-compute-solutions","text":"","title":"\ud83d\udd11 1. Azure Compute Solutions"},{"location":"az-204/az-204/#app-service","text":"Purpose : Platform-as-a-Service (PaaS) offering for hosting web applications, REST APIs, and mobile backends Features : Automatic scaling Built-in load balancing Support for .NET, .NET Core, Java, Ruby, Node.js, PHP, Python Continuous deployment from GitHub, Azure DevOps, or any Git repo Use Cases : Web applications, API backends, mobile app backends Advantages : No infrastructure management, supports custom domains and SSL","title":"App Service"},{"location":"az-204/az-204/#functions","text":"Purpose : Serverless compute service for running event-triggered code Key Characteristics : Pay-per-execution pricing model Automatic scaling Supports multiple languages (C#, Java, JavaScript, Python, PowerShell) Trigger Types : HTTP (API endpoints) Timer (scheduled tasks) Blob Storage (file uploads) Queue Storage (message processing) Event Grid (event processing) Use Cases : Microservices, event processing, lightweight APIs","title":"Functions"},{"location":"az-204/az-204/#aci-azure-container-instances-aks-azure-kubernetes-service","text":"ACI : Simplest way to run containers in Azure No orchestration needed Fast startup (seconds) Ideal for: One-off tasks, dev/test scenarios, simple applications AKS : Managed Kubernetes service Full container orchestration Features: Auto-scaling, self-healing, load balancing Ideal for: Microservices architectures, production workloads","title":"ACI (Azure Container Instances) &amp; AKS (Azure Kubernetes Service)"},{"location":"az-204/az-204/#virtual-machines","text":"Purpose : Infrastructure-as-a-Service (IaaS) offering for full control over OS and environment Characteristics : Complete control over the virtualized hardware Supports Windows and Linux Various sizes optimized for different workloads Use Cases : Legacy applications requiring specific OS versions Custom software stacks High-performance computing Applications requiring direct access to hardware","title":"Virtual Machines"},{"location":"az-204/az-204/#2-azure-storage-solutions","text":"","title":"\ufffd 2. Azure Storage Solutions"},{"location":"az-204/az-204/#blob-storage","text":"Purpose : Object storage for massive amounts of unstructured data Access Tiers : Hot: Frequently accessed data Cool: Infrequently accessed data (lower cost) Archive: Rarely accessed data (lowest cost, retrieval latency) Features : Tier lifecycle management Data encryption at rest Shared Access Signatures (SAS) for secure access","title":"Blob Storage"},{"location":"az-204/az-204/#table-storage","text":"Purpose : NoSQL key-value store for semi-structured data Characteristics : Schemaless design Fast, cost-effective for large volumes of simple data Partition key + row key structure Use Cases : User data, device information, metadata storage","title":"Table Storage"},{"location":"az-204/az-204/#queue-storage","text":"Purpose : Message queue service for asynchronous communication Features : First-In-First-Out (FIFO) processing At-least-once delivery Message time-to-live (TTL) configuration Use Cases : Decoupling application components, load leveling","title":"Queue Storage"},{"location":"az-204/az-204/#file-storage","text":"Purpose : Fully managed file shares using SMB protocol Characteristics : Accessible from cloud or on-premises Supports concurrent access Can be cached on Windows Servers with Azure File Sync Use Cases : Lift-and-shift of file-based applications, shared configuration files","title":"File Storage"},{"location":"az-204/az-204/#3azure-security","text":"","title":"\ud83d\udd11 3.Azure Security"},{"location":"az-204/az-204/#azure-ad-active-directory","text":"Purpose : Cloud-based identity and access management service Features : Single sign-on (SSO) Multi-factor authentication (MFA) Application management Device management B2B and B2C capabilities","title":"Azure AD (Active Directory)"},{"location":"az-204/az-204/#oauth-20openid-connect","text":"OAuth 2.0 : Authorization framework for delegated access OpenID Connect : Authentication layer built on OAuth 2.0 Flow Types : Authorization Code (web apps) Implicit (SPAs) Client Credentials (service-to-service) Device Code (IoT/CLI)","title":"OAuth 2.0/OpenID Connect"},{"location":"az-204/az-204/#managed-identity","text":"Purpose : Automatically managed identity in Azure AD for Azure services Types : System-assigned (tied to resource lifecycle) User-assigned (standalone identity) Benefits : Eliminates need for credentials in code","title":"Managed Identity"},{"location":"az-204/az-204/#key-vault","text":"Purpose : Centralized secrets management Stores : Secrets (passwords, connection strings) Keys (encryption keys) Certificates Features : Access policies and RBAC Hardware security modules (HSMs) Versioning","title":"Key Vault"},{"location":"az-204/az-204/#rbac-role-based-access-control","text":"Purpose : Granular access management for Azure resources Components : Security principal (who) Role definition (what permissions) Scope (where) Built-in Roles : Owner, Contributor, Reader Service-specific roles","title":"RBAC (Role-Based Access Control)"},{"location":"az-204/az-204/#4-monitoring-troubleshooting-and-optimization","text":"","title":"\ud83d\udd11 4. Monitoring, Troubleshooting, and Optimization"},{"location":"az-204/az-204/#application-insights","text":"Purpose : Application performance management (APM) service Monitors : Request rates, response times, failure rates Dependency tracking Exceptions and logs Custom metrics and events","title":"Application Insights"},{"location":"az-204/az-204/#azure-monitor","text":"Purpose : Comprehensive solution for collecting, analyzing, and acting on telemetry Components : Metrics: Numerical values from resources Logs: Log data with KQL queries Alerts: Notifications based on conditions Workbooks: Interactive reports","title":"Azure Monitor"},{"location":"az-204/az-204/#log-analytics","text":"Purpose : Log data repository and query engine Features : Kusto Query Language (KQL) for powerful analytics Cross-resource queries Saved queries and functions Integration with Azure Monitor","title":"Log Analytics"},{"location":"az-204/az-204/#alertsautoscale","text":"Alerts : Metric alerts (threshold-based) Log alerts (query-based) Activity log alerts (operations-based) Autoscale : Scale based on metrics or schedules Scale sets for VMs App Service scale-out","title":"Alerts/Autoscale"},{"location":"az-204/az-204/#5-data-solutions","text":"","title":"\ud83d\udd11 5. Data Solutions"},{"location":"az-204/az-204/#cosmos-db","text":"Purpose : Globally distributed, multi-model database service Consistency Levels : Strong, Bounded Staleness, Session, Consistent Prefix, Eventual APIs Supported : SQL, MongoDB, Cassandra, Gremlin, Table Features : Turnkey global distribution SLA-backed latency and availability Automatic indexing","title":"Cosmos DB"},{"location":"az-204/az-204/#sql-database","text":"Purpose : Fully managed relational database Deployment Models : Single database Elastic pool (shared resources) Managed instance (near-complete SQL Server compatibility) Features : Built-in high availability Intelligent performance tuning Advanced threat protection","title":"SQL Database"},{"location":"az-204/az-204/#ef-core-entity-framework-core","text":"Purpose : Object-Relational Mapper (ORM) for .NET Features : LINQ support Change tracking Database migrations Cross-platform Use with Azure : Simplifies data access to Azure SQL, Cosmos DB","title":"EF Core (Entity Framework Core)"},{"location":"az-204/az-204/#6-integrating-azure-services","text":"","title":"\ud83d\udd11 6. Integrating Azure Services"},{"location":"az-204/az-204/#event-grid","text":"Purpose : Event routing service using publish-subscribe model Characteristics : Fully managed event routing Supports custom and Azure service events Push-based delivery Use Cases : Reacting to blob storage events, custom event processing","title":"Event Grid"},{"location":"az-204/az-204/#event-hubs","text":"Purpose : Big data streaming platform and event ingestion service Features : High throughput (millions of events/sec) Capture feature for automatic data persistence Kafka compatibility Use Cases : IoT telemetry, clickstream analytics","title":"Event Hubs"},{"location":"az-204/az-204/#service-bus","text":"Purpose : Enterprise messaging with queues and publish-subscribe topics Features : FIFO guarantees Dead-letter queues Duplicate detection Sessions for message ordering Use Cases : Order processing, financial transactions","title":"Service Bus"},{"location":"az-204/az-204/#logic-apps","text":"Purpose : Serverless workflow automation Characteristics : Visual designer 200+ connectors Enterprise Integration Pack for B2B scenarios Use Cases : Business process automation, system integration","title":"Logic Apps"},{"location":"az-204/az-204/#api-management-apim","text":"Purpose : API gateway for publishing, securing, and analyzing APIs Features : Rate limiting Request/response transformation Developer portal Multiple authentication options","title":"API Management (APIM)"},{"location":"az-204/az-204/#7-deploying-and-managing-resources","text":"","title":"\ud83d\udd11 7. Deploying and Managing Resources"},{"location":"az-204/az-204/#arm-templates","text":"Purpose : Infrastructure as Code (IaC) for Azure Characteristics : JSON format Declarative syntax Idempotent deployments Modular design with linked templates","title":"ARM Templates"},{"location":"az-204/az-204/#azure-clipowershell","text":"Azure CLI : Cross-platform command-line tool Bash-like syntax Interactive mode available Azure PowerShell : PowerShell cmdlets for Azure More granular control than CLI Ideal for Windows environments","title":"Azure CLI/PowerShell"},{"location":"az-204/az-204/#resource-manager-arm","text":"Purpose : Deployment and management service for Azure Features : Group resources into resource groups Dependency handling Tagging for organization Access control","title":"Resource Manager (ARM)"},{"location":"az-204/az-204/#cicd-with-github-actionsazure-devops","text":"GitHub Actions : YAML-based workflows Tight GitHub integration Marketplace for actions Azure DevOps : Pipelines for CI/CD Test plans Artifact feeds Full application lifecycle management","title":"CI/CD with GitHub Actions/Azure DevOps"},{"location":"az-204/az-204/#8-caching-and-performance-optimization","text":"","title":"\ud83d\udd11 8. Caching and Performance Optimization"},{"location":"az-204/az-204/#azure-redis-cache","text":"Purpose : In-memory data store based on Redis Tiers : Basic (single node) Standard (replicated) Premium (with persistence and clustering) Use Cases : Session store, output cache, message broker CDN (Content Delivery Network) Purpose : Global content caching for improved performance Features : Edge locations worldwide Custom domains and HTTPS Rules engine for content handling Integration with Storage and Web Apps","title":"Azure Redis Cache"},{"location":"az-204/az-204/#9-api-and-web-app-development","text":"","title":"\ud83d\udd11 9. API and Web App Development"},{"location":"az-204/az-204/#secure-api-development","text":"Authentication : Azure AD integration OAuth 2.0 flows API keys (for simpler scenarios) Best Practices : Proper status codes Versioning Throttling Input validation","title":"Secure API Development"},{"location":"az-204/az-204/#swaggeropenapi","text":"Purpose : API description format Features : Machine-readable API contracts Interactive documentation Client SDK generation Integration with API Management","title":"Swagger/OpenAPI"},{"location":"az-204/az-204/#10-messaging-patterns","text":"","title":"\ud83d\udd11 10. Messaging Patterns"},{"location":"az-204/az-204/#queue-based-load-leveling","text":"Pattern : Use a queue as buffer between components Benefits : Smooths intermittent heavy loads Prevents resource exhaustion Enables asynchronous processing","title":"Queue-based Load Leveling"},{"location":"az-204/az-204/#competing-consumers","text":"Pattern : Multiple consumers process messages from same queue Benefits : Increased throughput Horizontal scaling Fault tolerance","title":"Competing Consumers"},{"location":"az-204/az-204/#publishersubscriber","text":"Pattern : Events distributed to multiple subscribers Azure Services : Event Grid (lightweight) Service Bus Topics (enterprise) Event Hubs (high volume)","title":"Publisher/Subscriber"},{"location":"python/python/","text":"yet to start","title":"Python"}]}